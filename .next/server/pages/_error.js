/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_error";
exports.ids = ["pages/_error"];
exports.modules = {

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./src/pages/_document.tsx\");\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./src/pages/_app.tsx\");\n/* harmony import */ var private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! private-next-pages/_error */ \"./node_modules/next/dist/pages/_error.js\");\n/* harmony import */ var private_next_pages_error__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__, private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__]);\n([private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__, private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/_error\",\n        pathname: \"/_error\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        Document: private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    },\n    userland: private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGX2Vycm9yJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZXJyb3ImYWJzb2x1dGVBcHBQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmYWJzb2x1dGVEb2N1bWVudFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2RvY3VtZW50Jm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUNoQztBQUNMO0FBQzFEO0FBQ29EO0FBQ1Y7QUFDMUM7QUFDc0Q7QUFDdEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHFEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLHVCQUF1Qix3RUFBSyxDQUFDLHFEQUFRO0FBQ3JDLHVCQUF1Qix3RUFBSyxDQUFDLHFEQUFRO0FBQ3JDLDJCQUEyQix3RUFBSyxDQUFDLHFEQUFRO0FBQ3pDLGVBQWUsd0VBQUssQ0FBQyxxREFBUTtBQUM3Qix3QkFBd0Isd0VBQUssQ0FBQyxxREFBUTtBQUM3QztBQUNPLGdDQUFnQyx3RUFBSyxDQUFDLHFEQUFRO0FBQzlDLGdDQUFnQyx3RUFBSyxDQUFDLHFEQUFRO0FBQzlDLGlDQUFpQyx3RUFBSyxDQUFDLHFEQUFRO0FBQy9DLGdDQUFnQyx3RUFBSyxDQUFDLHFEQUFRO0FBQzlDLG9DQUFvQyx3RUFBSyxDQUFDLHFEQUFRO0FBQ3pEO0FBQ08sd0JBQXdCLHlHQUFnQjtBQUMvQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhaW5pbmctcGxhdGZvcm0vPzQwMGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSBhcHAgYW5kIGRvY3VtZW50IG1vZHVsZXMuXG5pbXBvcnQgRG9jdW1lbnQgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fZG9jdW1lbnRcIjtcbmltcG9ydCBBcHAgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fYXBwXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19lcnJvclwiO1xuLy8gUmUtZXhwb3J0IHRoZSBjb21wb25lbnQgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBtZXRob2RzLlxuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1Byb3BzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U3RhdGljUHJvcHNcIik7XG5leHBvcnQgY29uc3QgZ2V0U3RhdGljUGF0aHMgPSBob2lzdCh1c2VybGFuZCwgXCJnZXRTdGF0aWNQYXRoc1wiKTtcbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJnZXRTZXJ2ZXJTaWRlUHJvcHNcIik7XG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuZXhwb3J0IGNvbnN0IHJlcG9ydFdlYlZpdGFscyA9IGhvaXN0KHVzZXJsYW5kLCBcInJlcG9ydFdlYlZpdGFsc1wiKTtcbi8vIFJlLWV4cG9ydCBsZWdhY3kgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1Byb3BzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1BhdGhzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U3RhdGljUGF0aHNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUGFyYW1zID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U3RhdGljUGFyYW1zXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U2VydmVyUHJvcHNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVMsXG4gICAgICAgIHBhZ2U6IFwiL19lcnJvclwiLFxuICAgICAgICBwYXRobmFtZTogXCIvX2Vycm9yXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBEb2N1bWVudFxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./src/context/AuthContext.tsx":
/*!*************************************!*\
  !*** ./src/context/AuthContext.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _services_firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/firebase */ \"./src/services/firebase.ts\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/auth */ \"firebase/auth\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_services_firebase__WEBPACK_IMPORTED_MODULE_2__, firebase_auth__WEBPACK_IMPORTED_MODULE_3__, firebase_firestore__WEBPACK_IMPORTED_MODULE_4__]);\n([_services_firebase__WEBPACK_IMPORTED_MODULE_2__, firebase_auth__WEBPACK_IMPORTED_MODULE_3__, firebase_firestore__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/context/AuthContext.tsx\n\n\n\n\n\nconst initialAuthState = {\n    user: null,\n    loading: true,\n    error: null,\n    initialized: false\n};\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    ...initialAuthState,\n    isAuthenticated: false,\n    login: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    loginWithGoogle: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    register: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    logout: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    resetPassword: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    confirmPasswordReset: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    updatePassword: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    updateProfile: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    deleteAccount: async ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    },\n    clearError: ()=>{\n        throw new Error(\"AuthContext not initialized\");\n    }\n});\nconst AuthProvider = ({ children })=>{\n    const [authState, setAuthState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialAuthState);\n    // superAdmins is stable as it's a constant array defined here.\n    // If it were dynamic, it would need useMemo.\n    const superAdmins = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>[\n            \"egcharle@gmail.com\"\n        ], []);\n    const getUserProfile = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (firebaseUser)=>{\n        const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", firebaseUser.uid);\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.getDoc)(userDocRef);\n        const isSuperAdmin = firebaseUser.email ? superAdmins.includes(firebaseUser.email) : false;\n        if (userDoc.exists()) {\n            return userDoc.data();\n        } else {\n            const newUserProfile = {\n                id: firebaseUser.uid,\n                email: firebaseUser.email || \"\",\n                displayName: firebaseUser.displayName || firebaseUser.email?.split(\"@\")[0] || \"User\",\n                photoURL: firebaseUser.photoURL || \"\",\n                roles: {\n                    admin: isSuperAdmin,\n                    instructor: false,\n                    student: true,\n                    manager: false\n                },\n                createdAt: new Date().toISOString(),\n                lastLoginAt: new Date().toISOString(),\n                uid: firebaseUser.uid,\n                country: \"\",\n                city: \"\",\n                departmentId: \"\"\n            };\n            try {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.setDoc)(userDocRef, newUserProfile);\n                return newUserProfile;\n            } catch (profileError) {\n                console.error(\"Error setting new user profile:\", profileError);\n                return null; // Or handle error appropriately\n            }\n        }\n    }, [\n        superAdmins\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const unsubscribe = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.onAuthStateChanged)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, async (firebaseUser)=>{\n            if (firebaseUser) {\n                // Optimistically set loading until profile is fetched/updated\n                setAuthState((prev)=>({\n                        ...prev,\n                        loading: true,\n                        error: null\n                    }));\n                try {\n                    const userProfile = await getUserProfile(firebaseUser);\n                    if (userProfile) {\n                        const isSuperAdminNow = firebaseUser.email ? superAdmins.includes(firebaseUser.email) : false;\n                        if (isSuperAdminNow && !userProfile.roles?.admin) {\n                            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", firebaseUser.uid);\n                            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.updateDoc)(userDocRef, {\n                                \"roles.admin\": true,\n                                updatedAt: new Date().toISOString()\n                            });\n                            const updatedProfile = await getUserProfile(firebaseUser); // Re-fetch to get the absolute latest\n                            setAuthState({\n                                user: updatedProfile,\n                                loading: false,\n                                error: null,\n                                initialized: true\n                            });\n                        } else {\n                            // If lastLoginAt is old, update it\n                            const now = new Date();\n                            const lastLogin = userProfile.lastLoginAt ? new Date(userProfile.lastLoginAt) : new Date(0);\n                            // Update if last login was more than, say, 5 minutes ago, to avoid rapid updates on hot reloads\n                            if (now.getTime() - lastLogin.getTime() > 5 * 60 * 1000) {\n                                const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", firebaseUser.uid);\n                                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.updateDoc)(userDocRef, {\n                                    lastLoginAt: now.toISOString()\n                                });\n                                // Fetch again if you want the absolute latest, or merge optimistically\n                                const updatedProfileWithLogin = {\n                                    ...userProfile,\n                                    lastLoginAt: now.toISOString()\n                                };\n                                setAuthState({\n                                    user: updatedProfileWithLogin,\n                                    loading: false,\n                                    error: null,\n                                    initialized: true\n                                });\n                            } else {\n                                setAuthState({\n                                    user: userProfile,\n                                    loading: false,\n                                    error: null,\n                                    initialized: true\n                                });\n                            }\n                        }\n                    } else {\n                        setAuthState({\n                            user: null,\n                            loading: false,\n                            error: \"Failed to load user profile object.\",\n                            initialized: true\n                        });\n                    }\n                } catch (error) {\n                    console.error(\"AuthContext onAuthStateChanged error:\", error);\n                    setAuthState({\n                        user: null,\n                        loading: false,\n                        error: \"Failed to process user profile: \" + error.message,\n                        initialized: true\n                    });\n                }\n            } else {\n                setAuthState({\n                    user: null,\n                    loading: false,\n                    error: null,\n                    initialized: true\n                });\n            }\n        });\n        return ()=>unsubscribe();\n    }, [\n        getUserProfile,\n        superAdmins\n    ]); // getUserProfile depends on superAdmins\n    const loginWithGoogle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_3__.GoogleAuthProvider();\n            provider.addScope(\"https://www.googleapis.com/auth/userinfo.email\");\n            provider.addScope(\"https://www.googleapis.com/auth/userinfo.profile\");\n            const result = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.signInWithPopup)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, provider);\n            const userProfile = await getUserProfile(result.user);\n            if (!userProfile) throw new Error(\"Failed to retrieve profile after Google sign-in.\");\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", userProfile.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.updateDoc)(userDocRef, {\n                lastLoginAt: new Date().toISOString()\n            });\n            const updatedProfile = {\n                ...userProfile,\n                lastLoginAt: new Date().toISOString()\n            };\n            setAuthState({\n                user: updatedProfile,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n            return updatedProfile;\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to login with Google\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, [\n        getUserProfile\n    ]);\n    const login = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (credentials)=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            const { email, password } = credentials;\n            const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.signInWithEmailAndPassword)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, email, password);\n            const userProfile = await getUserProfile(userCredential.user);\n            if (!userProfile) throw new Error(\"Failed to retrieve profile after email/password sign-in.\");\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", userProfile.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.updateDoc)(userDocRef, {\n                lastLoginAt: new Date().toISOString()\n            });\n            const updatedProfile = {\n                ...userProfile,\n                lastLoginAt: new Date().toISOString()\n            };\n            setAuthState({\n                user: updatedProfile,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n            return updatedProfile;\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to login\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, [\n        getUserProfile\n    ]);\n    const register = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (credentials)=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            const { email, password, displayName, firstName, lastName, company, jobTitle } = credentials;\n            const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.createUserWithEmailAndPassword)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, email, password);\n            const isSuperAdmin = superAdmins.includes(email);\n            const newUserProfile = {\n                id: userCredential.user.uid,\n                email,\n                displayName: displayName || email.split(\"@\")[0],\n                firstName,\n                lastName,\n                company,\n                jobTitle,\n                roles: {\n                    admin: isSuperAdmin,\n                    instructor: false,\n                    student: true,\n                    manager: false\n                },\n                createdAt: new Date().toISOString(),\n                lastLoginAt: new Date().toISOString(),\n                uid: userCredential.user.uid,\n                country: \"\",\n                city: \"\",\n                departmentId: \"\"\n            };\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", newUserProfile.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.setDoc)(userDocRef, newUserProfile);\n            setAuthState({\n                user: newUserProfile,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n            return newUserProfile;\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to register\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, [\n        superAdmins\n    ]);\n    const logout = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.signOut)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth);\n            setAuthState({\n                user: null,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to logout\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: errorMessage\n                })); // Ensure user is null on logout error too\n            throw new Error(errorMessage);\n        }\n    }, []);\n    const resetPassword = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (data)=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.sendPasswordResetEmail)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, data.email);\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false\n                }));\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to send password reset email\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, []);\n    const confirmPasswordReset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (code, newPassword)=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.confirmPasswordReset)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth, code, newPassword);\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false\n                }));\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to confirm password reset\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, []);\n    const updatePassword = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (data)=>{\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            const user = _services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser;\n            if (!user || !user.email) {\n                throw new Error(\"User not authenticated for password update.\");\n            }\n            const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_3__.EmailAuthProvider.credential(user.email, data.currentPassword);\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.reauthenticateWithCredential)(user, credential);\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.updatePassword)(user, data.newPassword);\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false\n                }));\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to update password\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, []);\n    const updateProfile = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (data)=>{\n        const currentUser = authState.user;\n        if (!currentUser) {\n            const err = new Error(\"User not authenticated for profile update.\");\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: err.message,\n                    initialized: true\n                }));\n            throw err;\n        }\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", currentUser.id);\n            // Prepare the data to be sent to Firestore.\n            // Only spread properties that are valid for UserProfile.\n            // 'data' itself is Partial<UserProfile>, so it's already type-checked.\n            const dataForFirestore = typeof data === \"object\" && data !== null ? data : {};\n            // Only update if there's actually data to update, otherwise skip Firestore call\n            if (Object.keys(dataForFirestore).length > 0) {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.updateDoc)(userDocRef, dataForFirestore);\n            } else {\n            // console.warn(\"updateProfile called with empty data. No Firestore update performed.\");\n            }\n            // Create the updated user profile for the local state\n            const updatedUserProfile = {\n                ...currentUser,\n                ...dataForFirestore // Apply all changes from 'data'\n            };\n            setAuthState({\n                user: updatedUserProfile,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n            return updatedUserProfile;\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to update profile\";\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: currentUser,\n                    loading: false,\n                    error: errorMessage\n                }));\n            throw new Error(errorMessage);\n        }\n    }, [\n        authState.user\n    ]);\n    const deleteAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        // Get the current user from authState and Firebase auth *before* setting loading state\n        const currentUserProfile = authState.user; // UserProfile from Firestore\n        const currentFirebaseUser = _services_firebase__WEBPACK_IMPORTED_MODULE_2__.auth.currentUser; // FirebaseUser from auth service\n        if (!currentFirebaseUser) {\n            const err = new Error(\"No Firebase user currently authenticated for account deletion.\");\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: err.message,\n                    initialized: true\n                }));\n            throw err;\n        }\n        // currentUserProfile might be null if Firestore sync is off, but currentFirebaseUser is the source of truth for auth deletion\n        setAuthState((prev)=>({\n                ...prev,\n                loading: true,\n                error: null\n            }));\n        try {\n            // Use ID from Firestore profile if available, otherwise fallback to Firebase auth UID\n            // This is important if your Firestore 'id' field is the same as 'uid'\n            const userIdForFirestore = currentUserProfile?.id || currentFirebaseUser.uid;\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", userIdForFirestore);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_4__.deleteDoc)(userDocRef); // Delete Firestore profile\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.deleteUser)(currentFirebaseUser); // Delete Firebase auth user\n            setAuthState({\n                user: null,\n                loading: false,\n                error: null,\n                initialized: true\n            });\n        } catch (error) {\n            const errorMessage = error.message || \"Failed to delete account\";\n            // If deletion fails, the user might still be partially authenticated or their Firestore doc might still exist.\n            // Setting user to null is a safe default, but you might want more nuanced error handling.\n            setAuthState((prev)=>({\n                    ...prev,\n                    user: null,\n                    loading: false,\n                    error: errorMessage,\n                    initialized: true\n                }));\n            throw new Error(errorMessage);\n        }\n    }, [\n        authState.user\n    ]); // Dependency on authState.user because it might be used to get the Firestore doc ID.\n    // auth.currentUser is not a reactive dependency for useCallback.\n    const clearError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setAuthState((prev)=>({\n                ...prev,\n                error: null\n            }));\n    }, []);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return {\n            user: authState.user,\n            loading: authState.loading,\n            error: authState.error,\n            initialized: authState.initialized,\n            isAuthenticated: !!authState.user,\n            login,\n            loginWithGoogle,\n            register,\n            logout,\n            resetPassword,\n            confirmPasswordReset,\n            updatePassword,\n            updateProfile,\n            deleteAccount,\n            clearError\n        };\n    }, [\n        authState,\n        login,\n        loginWithGoogle,\n        register,\n        logout,\n        resetPassword,\n        confirmPasswordReset,\n        updatePassword,\n        updateProfile,\n        deleteAccount,\n        clearError // Functions\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\context\\\\AuthContext.tsx\",\n        lineNumber: 376,\n        columnNumber: 5\n    }, undefined);\n};\nconst useAuth = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (!context) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udGV4dC9BdXRoQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOEJBQThCOztBQUNxRTtBQVc5QztBQWU5QjtBQUN1RDtBQUU5RSxNQUFNNEIsbUJBQThCO0lBQ2xDQyxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsT0FBTztJQUNQQyxhQUFhO0FBQ2Y7QUFFQSxNQUFNQyw0QkFBY2hDLG9EQUFhQSxDQUFrQjtJQUNqRCxHQUFHMkIsZ0JBQWdCO0lBQ25CTSxpQkFBaUI7SUFDakJDLE9BQU87UUFBYSxNQUFNLElBQUlDLE1BQU07SUFBZ0M7SUFDcEVDLGlCQUFpQjtRQUFhLE1BQU0sSUFBSUQsTUFBTTtJQUFnQztJQUM5RUUsVUFBVTtRQUFhLE1BQU0sSUFBSUYsTUFBTTtJQUFnQztJQUN2RUcsUUFBUTtRQUFhLE1BQU0sSUFBSUgsTUFBTTtJQUFnQztJQUNyRUksZUFBZTtRQUFhLE1BQU0sSUFBSUosTUFBTTtJQUFnQztJQUM1RXZCLHNCQUFzQjtRQUFhLE1BQU0sSUFBSXVCLE1BQU07SUFBZ0M7SUFDbkZyQixnQkFBZ0I7UUFBYSxNQUFNLElBQUlxQixNQUFNO0lBQWdDO0lBQzdFSyxlQUFlO1FBQWEsTUFBTSxJQUFJTCxNQUFNO0lBQWdDO0lBQzVFTSxlQUFlO1FBQWEsTUFBTSxJQUFJTixNQUFNO0lBQWdDO0lBQzVFTyxZQUFZO1FBQU8sTUFBTSxJQUFJUCxNQUFNO0lBQWdDO0FBQ3JFO0FBRU8sTUFBTVEsZUFBNEMsQ0FBQyxFQUFDQyxRQUFRLEVBQUU7SUFDbkUsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUczQywrQ0FBUUEsQ0FBWXdCO0lBRXRELCtEQUErRDtJQUMvRCw2Q0FBNkM7SUFDN0MsTUFBTW9CLGNBQWMxQyw4Q0FBT0EsQ0FBQyxJQUFNO1lBQUM7U0FBcUIsRUFBRSxFQUFFO0lBRTVELE1BQU0yQyxpQkFBaUI1QyxrREFBV0EsQ0FBQyxPQUFPNkM7UUFDeEMsTUFBTUMsYUFBYTVCLHVEQUFHQSxDQUFDZix5REFBU0EsRUFBRSxTQUFTMEMsYUFBYUUsR0FBRztRQUMzRCxNQUFNQyxVQUFVLE1BQU03QiwwREFBTUEsQ0FBQzJCO1FBQzdCLE1BQU1HLGVBQWVKLGFBQWFLLEtBQUssR0FBR1AsWUFBWVEsUUFBUSxDQUFDTixhQUFhSyxLQUFLLElBQUk7UUFFckYsSUFBSUYsUUFBUUksTUFBTSxJQUFJO1lBQ3BCLE9BQU9KLFFBQVFLLElBQUk7UUFDdkIsT0FBTztZQUNILE1BQU1DLGlCQUE4QjtnQkFDbENDLElBQUlWLGFBQWFFLEdBQUc7Z0JBQ3BCRyxPQUFPTCxhQUFhSyxLQUFLLElBQUk7Z0JBQzdCTSxhQUFhWCxhQUFhVyxXQUFXLElBQUlYLGFBQWFLLEtBQUssRUFBRU8sTUFBTSxJQUFJLENBQUMsRUFBRSxJQUFJO2dCQUM5RUMsVUFBVWIsYUFBYWEsUUFBUSxJQUFJO2dCQUNuQ0MsT0FBTztvQkFBQ0MsT0FBT1g7b0JBQWNZLFlBQVk7b0JBQU9DLFNBQVM7b0JBQU1DLFNBQVM7Z0JBQU07Z0JBQzlFQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2pDQyxhQUFhLElBQUlGLE9BQU9DLFdBQVc7Z0JBQ25DbkIsS0FBS0YsYUFBYUUsR0FBRztnQkFDckJxQixTQUFTO2dCQUNUQyxNQUFNO2dCQUNOQyxjQUFjO1lBQ2xCO1lBQ0UsSUFBSTtnQkFDRixNQUFNbEQsMERBQU1BLENBQUMwQixZQUFZUTtnQkFDekIsT0FBT0E7WUFDWCxFQUFFLE9BQU9pQixjQUFjO2dCQUNuQkMsUUFBUTlDLEtBQUssQ0FBQyxtQ0FBbUM2QztnQkFDakQsT0FBTyxNQUFNLGdDQUFnQztZQUNqRDtRQUNGO0lBQ0YsR0FBRztRQUFDNUI7S0FBWTtJQUVkN0MsZ0RBQVNBLENBQUM7UUFDUixNQUFNMkUsY0FBYzFELGlFQUFrQkEsQ0FBQ2Isb0RBQUlBLEVBQUUsT0FBTzJDO1lBQ2xELElBQUlBLGNBQWM7Z0JBQ2hCLDhEQUE4RDtnQkFDOURILGFBQWFnQyxDQUFBQSxPQUFTO3dCQUFDLEdBQUdBLElBQUk7d0JBQUVqRCxTQUFTO3dCQUFNQyxPQUFPO29CQUFLO2dCQUMzRCxJQUFJO29CQUNGLE1BQU1pRCxjQUFjLE1BQU0vQixlQUFlQztvQkFDekMsSUFBSThCLGFBQWE7d0JBQ2YsTUFBTUMsa0JBQWtCL0IsYUFBYUssS0FBSyxHQUFHUCxZQUFZUSxRQUFRLENBQUNOLGFBQWFLLEtBQUssSUFBSTt3QkFFeEYsSUFBSTBCLG1CQUFtQixDQUFDRCxZQUFZaEIsS0FBSyxFQUFFQyxPQUFPOzRCQUNoRCxNQUFNZCxhQUFhNUIsdURBQUdBLENBQUNmLHlEQUFTQSxFQUFFLFNBQVMwQyxhQUFhRSxHQUFHOzRCQUMzRCxNQUFNMUIsNkRBQVNBLENBQUN5QixZQUFZO2dDQUFDLGVBQWU7Z0NBQU0rQixXQUFXLElBQUlaLE9BQU9DLFdBQVc7NEJBQUc7NEJBQ3RGLE1BQU1ZLGlCQUFpQixNQUFNbEMsZUFBZUMsZUFBZSxzQ0FBc0M7NEJBQ2pHSCxhQUFhO2dDQUFDbEIsTUFBTXNEO2dDQUFnQnJELFNBQVM7Z0NBQU9DLE9BQU87Z0NBQU1DLGFBQWE7NEJBQUs7d0JBQ3ZGLE9BQU87NEJBQ0gsbUNBQW1DOzRCQUNuQyxNQUFNb0QsTUFBTSxJQUFJZDs0QkFDaEIsTUFBTWUsWUFBWUwsWUFBWVIsV0FBVyxHQUFHLElBQUlGLEtBQUtVLFlBQVlSLFdBQVcsSUFBSSxJQUFJRixLQUFLOzRCQUN6RixnR0FBZ0c7NEJBQ2hHLElBQUljLElBQUlFLE9BQU8sS0FBS0QsVUFBVUMsT0FBTyxLQUFLLElBQUksS0FBSyxNQUFNO2dDQUN2RCxNQUFNbkMsYUFBYTVCLHVEQUFHQSxDQUFDZix5REFBU0EsRUFBRSxTQUFTMEMsYUFBYUUsR0FBRztnQ0FDM0QsTUFBTTFCLDZEQUFTQSxDQUFDeUIsWUFBWTtvQ0FBQ3FCLGFBQWFZLElBQUliLFdBQVc7Z0NBQUc7Z0NBQzVELHVFQUF1RTtnQ0FDdEUsTUFBTWdCLDBCQUEwQjtvQ0FBQyxHQUFHUCxXQUFXO29DQUFFUixhQUFhWSxJQUFJYixXQUFXO2dDQUFHO2dDQUNoRnhCLGFBQWE7b0NBQUNsQixNQUFNMEQ7b0NBQXlCekQsU0FBUztvQ0FBT0MsT0FBTztvQ0FBTUMsYUFBYTtnQ0FBSzs0QkFDakcsT0FBTztnQ0FDRmUsYUFBYTtvQ0FBQ2xCLE1BQU1tRDtvQ0FBYWxELFNBQVM7b0NBQU9DLE9BQU87b0NBQU1DLGFBQWE7Z0NBQUs7NEJBQ3JGO3dCQUNGO29CQUNGLE9BQU87d0JBQ0hlLGFBQWE7NEJBQUNsQixNQUFNOzRCQUFNQyxTQUFTOzRCQUFPQyxPQUFPOzRCQUF1Q0MsYUFBYTt3QkFBSztvQkFDOUc7Z0JBQ0YsRUFBRSxPQUFPRCxPQUFZO29CQUNqQjhDLFFBQVE5QyxLQUFLLENBQUMseUNBQXlDQTtvQkFDdkRnQixhQUFhO3dCQUFDbEIsTUFBTTt3QkFBTUMsU0FBUzt3QkFBT0MsT0FBTyxxQ0FBcUNBLE1BQU15RCxPQUFPO3dCQUFFeEQsYUFBYTtvQkFBSztnQkFDM0g7WUFDRixPQUFPO2dCQUNIZSxhQUFhO29CQUFDbEIsTUFBTTtvQkFBTUMsU0FBUztvQkFBT0MsT0FBTztvQkFBTUMsYUFBYTtnQkFBSztZQUM3RTtRQUNGO1FBRUUsT0FBTyxJQUFNOEM7SUFDakIsR0FBRztRQUFDN0I7UUFBZ0JEO0tBQVksR0FBRyx3Q0FBd0M7SUFFekUsTUFBTVgsa0JBQWtCaEMsa0RBQVdBLENBQUM7UUFDbEMwQyxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNMEQsV0FBVyxJQUFJcEUsNkRBQWtCQTtZQUN2Q29FLFNBQVNDLFFBQVEsQ0FBQztZQUNsQkQsU0FBU0MsUUFBUSxDQUFDO1lBQ2xCLE1BQU1DLFNBQVMsTUFBTXJFLDhEQUFlQSxDQUFDZixvREFBSUEsRUFBRWtGO1lBQzNDLE1BQU1ULGNBQWMsTUFBTS9CLGVBQWUwQyxPQUFPOUQsSUFBSTtZQUVwRCxJQUFJLENBQUNtRCxhQUFhLE1BQU0sSUFBSTVDLE1BQU07WUFFbEMsTUFBTWUsYUFBYTVCLHVEQUFHQSxDQUFDZix5REFBU0EsRUFBRSxTQUFTd0UsWUFBWXBCLEVBQUU7WUFDekQsTUFBTWxDLDZEQUFTQSxDQUFDeUIsWUFBWTtnQkFBQ3FCLGFBQWEsSUFBSUYsT0FBT0MsV0FBVztZQUFHO1lBQ25FLE1BQU1ZLGlCQUFpQjtnQkFBQyxHQUFHSCxXQUFXO2dCQUFFUixhQUFhLElBQUlGLE9BQU9DLFdBQVc7WUFBRztZQUU5RXhCLGFBQWE7Z0JBQUNsQixNQUFNc0Q7Z0JBQWdCckQsU0FBUztnQkFBT0MsT0FBTztnQkFBTUMsYUFBYTtZQUFLO1lBQ25GLE9BQU9tRDtRQUNYLEVBQUUsT0FBT3BELE9BQVk7WUFDakIsTUFBTTZELGVBQWU3RCxNQUFNeUQsT0FBTyxJQUFJO1lBQ3RDekMsYUFBYWdDLENBQUFBLE9BQVM7b0JBQUMsR0FBR0EsSUFBSTtvQkFBRWxELE1BQU07b0JBQU1DLFNBQVM7b0JBQU9DLE9BQU82RDtnQkFBYTtZQUNoRixNQUFNLElBQUl4RCxNQUFNd0Q7UUFDcEI7SUFDRixHQUFHO1FBQUMzQztLQUFlO0lBRWpCLE1BQU1kLFFBQVE5QixrREFBV0EsQ0FBQyxPQUFPd0Y7UUFDL0I5QyxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNLEVBQUN3QixLQUFLLEVBQUV1QyxRQUFRLEVBQUUsR0FBR0Q7WUFDM0IsTUFBTUUsaUJBQWlCLE1BQU1yRix5RUFBMEJBLENBQUNILG9EQUFJQSxFQUFFZ0QsT0FBT3VDO1lBQ3JFLE1BQU1kLGNBQWMsTUFBTS9CLGVBQWU4QyxlQUFlbEUsSUFBSTtZQUU1RCxJQUFJLENBQUNtRCxhQUFhLE1BQU0sSUFBSTVDLE1BQU07WUFFbEMsTUFBTWUsYUFBYTVCLHVEQUFHQSxDQUFDZix5REFBU0EsRUFBRSxTQUFTd0UsWUFBWXBCLEVBQUU7WUFDekQsTUFBTWxDLDZEQUFTQSxDQUFDeUIsWUFBWTtnQkFBQ3FCLGFBQWEsSUFBSUYsT0FBT0MsV0FBVztZQUFHO1lBQ25FLE1BQU1ZLGlCQUFpQjtnQkFBQyxHQUFHSCxXQUFXO2dCQUFFUixhQUFhLElBQUlGLE9BQU9DLFdBQVc7WUFBRztZQUU5RXhCLGFBQWE7Z0JBQUNsQixNQUFNc0Q7Z0JBQWdCckQsU0FBUztnQkFBT0MsT0FBTztnQkFBTUMsYUFBYTtZQUFLO1lBQ25GLE9BQU9tRDtRQUNYLEVBQUUsT0FBT3BELE9BQVk7WUFDakIsTUFBTTZELGVBQWU3RCxNQUFNeUQsT0FBTyxJQUFJO1lBQ3RDekMsYUFBYWdDLENBQUFBLE9BQVM7b0JBQUMsR0FBR0EsSUFBSTtvQkFBRWxELE1BQU07b0JBQU1DLFNBQVM7b0JBQU9DLE9BQU82RDtnQkFBYTtZQUNoRixNQUFNLElBQUl4RCxNQUFNd0Q7UUFDcEI7SUFDRixHQUFHO1FBQUMzQztLQUFlO0lBRWpCLE1BQU1YLFdBQVdqQyxrREFBV0EsQ0FBQyxPQUFPd0Y7UUFDbEM5QyxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNLEVBQUN3QixLQUFLLEVBQUV1QyxRQUFRLEVBQUVqQyxXQUFXLEVBQUVtQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUUsR0FBR047WUFDaEYsTUFBTUUsaUJBQWlCLE1BQU10Riw2RUFBOEJBLENBQUNGLG9EQUFJQSxFQUFFZ0QsT0FBT3VDO1lBQ3pFLE1BQU14QyxlQUFlTixZQUFZUSxRQUFRLENBQUNEO1lBRTFDLE1BQU1JLGlCQUE4QjtnQkFDbENDLElBQUltQyxlQUFlbEUsSUFBSSxDQUFDdUIsR0FBRztnQkFDM0JHO2dCQUNBTSxhQUFhQSxlQUFlTixNQUFNTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9Da0M7Z0JBQ0FDO2dCQUNBQztnQkFDQUM7Z0JBQ0FuQyxPQUFPO29CQUFDQyxPQUFPWDtvQkFBY1ksWUFBWTtvQkFBT0MsU0FBUztvQkFBTUMsU0FBUztnQkFBTTtnQkFDOUVDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztnQkFDakNDLGFBQWEsSUFBSUYsT0FBT0MsV0FBVztnQkFDbkNuQixLQUFLMkMsZUFBZWxFLElBQUksQ0FBQ3VCLEdBQUc7Z0JBQzVCcUIsU0FBUztnQkFDVEMsTUFBTTtnQkFDTkMsY0FBYztZQUNsQjtZQUNFLE1BQU14QixhQUFhNUIsdURBQUdBLENBQUNmLHlEQUFTQSxFQUFFLFNBQVNtRCxlQUFlQyxFQUFFO1lBQzVELE1BQU1uQywwREFBTUEsQ0FBQzBCLFlBQVlRO1lBQ3pCWixhQUFhO2dCQUFDbEIsTUFBTThCO2dCQUFnQjdCLFNBQVM7Z0JBQU9DLE9BQU87Z0JBQU1DLGFBQWE7WUFBSztZQUNuRixPQUFPMkI7UUFDWCxFQUFFLE9BQU81QixPQUFpQjtZQUN0QixNQUFNNkQsZUFBZTdELE1BQU15RCxPQUFPLElBQUk7WUFDdEN6QyxhQUFhZ0MsQ0FBQUEsT0FBUztvQkFBQyxHQUFHQSxJQUFJO29CQUFFbEQsTUFBTTtvQkFBTUMsU0FBUztvQkFBT0MsT0FBTzZEO2dCQUFhO1lBQ2hGLE1BQU0sSUFBSXhELE1BQU13RDtRQUNwQjtJQUNGLEdBQUc7UUFBQzVDO0tBQVk7SUFFZCxNQUFNVCxTQUFTbEMsa0RBQVdBLENBQUM7UUFDekIwQyxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNcEIsc0RBQU9BLENBQUNKLG9EQUFJQTtZQUNsQndDLGFBQWE7Z0JBQUNsQixNQUFNO2dCQUFNQyxTQUFTO2dCQUFPQyxPQUFPO2dCQUFNQyxhQUFhO1lBQUs7UUFDN0UsRUFBRSxPQUFPRCxPQUFZO1lBQ2pCLE1BQU02RCxlQUFlN0QsTUFBTXlELE9BQU8sSUFBSTtZQUN0Q3pDLGFBQWFnQyxDQUFBQSxPQUFTO29CQUFDLEdBQUdBLElBQUk7b0JBQUVsRCxNQUFNO29CQUFNQyxTQUFTO29CQUFPQyxPQUFPNkQ7Z0JBQWEsS0FBSywwQ0FBMEM7WUFDL0gsTUFBTSxJQUFJeEQsTUFBTXdEO1FBQ3BCO0lBQ0YsR0FBRyxFQUFFO0lBRUgsTUFBTXBELGdCQUFnQm5DLGtEQUFXQSxDQUFDLE9BQU9xRDtRQUN2Q1gsYUFBYWdDLENBQUFBLE9BQVM7Z0JBQUMsR0FBR0EsSUFBSTtnQkFBRWpELFNBQVM7Z0JBQU1DLE9BQU87WUFBSztRQUMzRCxJQUFJO1lBQ0YsTUFBTW5CLHFFQUFzQkEsQ0FBQ0wsb0RBQUlBLEVBQUVtRCxLQUFLSCxLQUFLO1lBQzdDUixhQUFhZ0MsQ0FBQUEsT0FBUztvQkFBQyxHQUFHQSxJQUFJO29CQUFFakQsU0FBUztnQkFBTTtRQUNuRCxFQUFFLE9BQU9DLE9BQVk7WUFDakIsTUFBTTZELGVBQWU3RCxNQUFNeUQsT0FBTyxJQUFJO1lBQ3RDekMsYUFBYWdDLENBQUFBLE9BQVM7b0JBQUMsR0FBR0EsSUFBSTtvQkFBRWpELFNBQVM7b0JBQU9DLE9BQU82RDtnQkFBYTtZQUNwRSxNQUFNLElBQUl4RCxNQUFNd0Q7UUFDcEI7SUFDRixHQUFHLEVBQUU7SUFFSCxNQUFNL0UsdUJBQXVCUixrREFBV0EsQ0FBQyxPQUFPK0YsTUFBY0M7UUFDNUR0RCxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNakIsbUVBQTRCQSxDQUFDUCxvREFBSUEsRUFBRTZGLE1BQU1DO1lBQy9DdEQsYUFBYWdDLENBQUFBLE9BQVM7b0JBQUMsR0FBR0EsSUFBSTtvQkFBRWpELFNBQVM7Z0JBQU07UUFDbkQsRUFBRSxPQUFPQyxPQUFZO1lBQ2pCLE1BQU02RCxlQUFlN0QsTUFBTXlELE9BQU8sSUFBSTtZQUN0Q3pDLGFBQWFnQyxDQUFBQSxPQUFTO29CQUFDLEdBQUdBLElBQUk7b0JBQUVqRCxTQUFTO29CQUFPQyxPQUFPNkQ7Z0JBQWE7WUFDcEUsTUFBTSxJQUFJeEQsTUFBTXdEO1FBQ3BCO0lBQ0YsR0FBRyxFQUFFO0lBRUgsTUFBTTdFLGlCQUFpQlYsa0RBQVdBLENBQUMsT0FBT3FEO1FBQ3hDWCxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBQzNELElBQUk7WUFDRixNQUFNRixPQUFPdEIsb0RBQUlBLENBQUMrRixXQUFXO1lBQzdCLElBQUksQ0FBQ3pFLFFBQVEsQ0FBQ0EsS0FBSzBCLEtBQUssRUFBRTtnQkFDeEIsTUFBTSxJQUFJbkIsTUFBTTtZQUNwQjtZQUNFLE1BQU1tRSxhQUFhdEYsNERBQWlCQSxDQUFDc0YsVUFBVSxDQUFDMUUsS0FBSzBCLEtBQUssRUFBRUcsS0FBSzhDLGVBQWU7WUFDaEYsTUFBTXRGLDJFQUE0QkEsQ0FBQ1csTUFBTTBFO1lBQ3pDLE1BQU12Riw2REFBc0JBLENBQUNhLE1BQU02QixLQUFLMkMsV0FBVztZQUNuRHRELGFBQWFnQyxDQUFBQSxPQUFTO29CQUFDLEdBQUdBLElBQUk7b0JBQUVqRCxTQUFTO2dCQUFNO1FBQ25ELEVBQUUsT0FBT0MsT0FBWTtZQUNqQixNQUFNNkQsZUFBZTdELE1BQU15RCxPQUFPLElBQUk7WUFDdEN6QyxhQUFhZ0MsQ0FBQUEsT0FBUztvQkFBQyxHQUFHQSxJQUFJO29CQUFFakQsU0FBUztvQkFBT0MsT0FBTzZEO2dCQUFhO1lBQ3BFLE1BQU0sSUFBSXhELE1BQU13RDtRQUNwQjtJQUNGLEdBQUcsRUFBRTtJQUVILE1BQU1uRCxnQkFBZ0JwQyxrREFBV0EsQ0FBQyxPQUFPcUQ7UUFDdkMsTUFBTTRDLGNBQWN4RCxVQUFVakIsSUFBSTtRQUVsQyxJQUFJLENBQUN5RSxhQUFhO1lBQ2hCLE1BQU1HLE1BQU0sSUFBSXJFLE1BQU07WUFDdEJXLGFBQWFnQyxDQUFBQSxPQUFTO29CQUFDLEdBQUdBLElBQUk7b0JBQUVsRCxNQUFNO29CQUFNQyxTQUFTO29CQUFPQyxPQUFPMEUsSUFBSWpCLE9BQU87b0JBQUV4RCxhQUFhO2dCQUFLO1lBQ2xHLE1BQU15RTtRQUNWO1FBRUUxRCxhQUFhZ0MsQ0FBQUEsT0FBUztnQkFBQyxHQUFHQSxJQUFJO2dCQUFFakQsU0FBUztnQkFBTUMsT0FBTztZQUFLO1FBRTNELElBQUk7WUFDRixNQUFNb0IsYUFBYTVCLHVEQUFHQSxDQUFDZix5REFBU0EsRUFBRSxTQUFTOEYsWUFBWTFDLEVBQUU7WUFFekQsNENBQTRDO1lBQzVDLHlEQUF5RDtZQUN6RCx1RUFBdUU7WUFDdkUsTUFBTThDLG1CQUNILE9BQU9oRCxTQUFTLFlBQVlBLFNBQVMsT0FBT0EsT0FBTyxDQUFDO1lBRXZELGdGQUFnRjtZQUNoRixJQUFJaUQsT0FBT0MsSUFBSSxDQUFDRixrQkFBa0JHLE1BQU0sR0FBRyxHQUFHO2dCQUM1QyxNQUFNbkYsNkRBQVNBLENBQUN5QixZQUFZdUQ7WUFDaEMsT0FBTztZQUNILHdGQUF3RjtZQUM1RjtZQUVFLHNEQUFzRDtZQUN0RCxNQUFNSSxxQkFBa0M7Z0JBQ3RDLEdBQUdSLFdBQVc7Z0JBQ2QsR0FBR0ksaUJBQWlCLGdDQUFnQztZQUN4RDtZQUVFM0QsYUFBYTtnQkFBQ2xCLE1BQU1pRjtnQkFBb0JoRixTQUFTO2dCQUFPQyxPQUFPO2dCQUFNQyxhQUFhO1lBQUs7WUFDdkYsT0FBTzhFO1FBQ1gsRUFBRSxPQUFPL0UsT0FBWTtZQUNqQixNQUFNNkQsZUFBZTdELE1BQU15RCxPQUFPLElBQUk7WUFDdEN6QyxhQUFhZ0MsQ0FBQUEsT0FBUztvQkFBQyxHQUFHQSxJQUFJO29CQUFFbEQsTUFBTXlFO29CQUFheEUsU0FBUztvQkFBT0MsT0FBTzZEO2dCQUFhO1lBQ3ZGLE1BQU0sSUFBSXhELE1BQU13RDtRQUNwQjtJQUNGLEdBQUc7UUFBQzlDLFVBQVVqQixJQUFJO0tBQUM7SUFFakIsTUFBTWEsZ0JBQWdCckMsa0RBQVdBLENBQUM7UUFDaEMsdUZBQXVGO1FBQ3ZGLE1BQU0wRyxxQkFBcUJqRSxVQUFVakIsSUFBSSxFQUFFLDZCQUE2QjtRQUN4RSxNQUFNbUYsc0JBQXNCekcsb0RBQUlBLENBQUMrRixXQUFXLEVBQUUsaUNBQWlDO1FBRS9FLElBQUksQ0FBQ1UscUJBQXFCO1lBQ3hCLE1BQU1QLE1BQU0sSUFBSXJFLE1BQU07WUFDdEJXLGFBQWFnQyxDQUFBQSxPQUFTO29CQUFDLEdBQUdBLElBQUk7b0JBQUVsRCxNQUFNO29CQUFNQyxTQUFTO29CQUFPQyxPQUFPMEUsSUFBSWpCLE9BQU87b0JBQUV4RCxhQUFhO2dCQUFLO1lBQ2xHLE1BQU15RTtRQUNWO1FBQ0UsOEhBQThIO1FBRTlIMUQsYUFBYWdDLENBQUFBLE9BQVM7Z0JBQUMsR0FBR0EsSUFBSTtnQkFBRWpELFNBQVM7Z0JBQU1DLE9BQU87WUFBSztRQUUzRCxJQUFJO1lBQ0Ysc0ZBQXNGO1lBQ3RGLHNFQUFzRTtZQUN0RSxNQUFNa0YscUJBQXFCRixvQkFBb0JuRCxNQUFNb0Qsb0JBQW9CNUQsR0FBRztZQUM1RSxNQUFNRCxhQUFhNUIsdURBQUdBLENBQUNmLHlEQUFTQSxFQUFFLFNBQVN5RztZQUUzQyxNQUFNdEYsNkRBQVNBLENBQUN3QixhQUFhLDJCQUEyQjtZQUV4RCxNQUFNaEMseURBQVVBLENBQUM2RixzQkFBc0IsNEJBQTRCO1lBRW5FakUsYUFBYTtnQkFBQ2xCLE1BQU07Z0JBQU1DLFNBQVM7Z0JBQU9DLE9BQU87Z0JBQU1DLGFBQWE7WUFBSztRQUM3RSxFQUFFLE9BQU9ELE9BQVk7WUFDakIsTUFBTTZELGVBQWU3RCxNQUFNeUQsT0FBTyxJQUFJO1lBQ3RDLCtHQUErRztZQUMvRywwRkFBMEY7WUFDMUZ6QyxhQUFhZ0MsQ0FBQUEsT0FBUztvQkFBQyxHQUFHQSxJQUFJO29CQUFFbEQsTUFBTTtvQkFBTUMsU0FBUztvQkFBT0MsT0FBTzZEO29CQUFjNUQsYUFBYTtnQkFBSztZQUNuRyxNQUFNLElBQUlJLE1BQU13RDtRQUNwQjtJQUNGLEdBQUc7UUFBQzlDLFVBQVVqQixJQUFJO0tBQUMsR0FBRyxxRkFBcUY7SUFDbkYsaUVBQWlFO0lBRXZGLE1BQU1jLGFBQWF0QyxrREFBV0EsQ0FBQztRQUM3QjBDLGFBQWFnQyxDQUFBQSxPQUFTO2dCQUFDLEdBQUdBLElBQUk7Z0JBQUVoRCxPQUFPO1lBQUs7SUFDaEQsR0FBRyxFQUFFO0lBRUgsTUFBTW1GLGVBQWU1Ryw4Q0FBT0EsQ0FBQztRQUMzQixPQUFPO1lBQ0x1QixNQUFNaUIsVUFBVWpCLElBQUk7WUFDcEJDLFNBQVNnQixVQUFVaEIsT0FBTztZQUMxQkMsT0FBT2UsVUFBVWYsS0FBSztZQUN0QkMsYUFBYWMsVUFBVWQsV0FBVztZQUNsQ0UsaUJBQWlCLENBQUMsQ0FBQ1ksVUFBVWpCLElBQUk7WUFDakNNO1lBQ0FFO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0EzQjtZQUNBRTtZQUNBMEI7WUFDQUM7WUFDQUM7UUFDSjtJQUNGLEdBQUc7UUFDQ0c7UUFDQVg7UUFBT0U7UUFBaUJDO1FBQVVDO1FBQVFDO1FBQzFDM0I7UUFBc0JFO1FBQWdCMEI7UUFBZUM7UUFBZUMsV0FBVyxZQUFZO0tBQzVGO0lBRUQscUJBQ0UsOERBQUNWLFlBQVlrRixRQUFRO1FBQUNDLE9BQU9GO2tCQUMxQnJFOzs7Ozs7QUFHUCxFQUFFO0FBRUssTUFBTXdFLFVBQVU7SUFDckIsTUFBTUMsVUFBVXBILGlEQUFVQSxDQUFDK0I7SUFDM0IsSUFBSSxDQUFDcUYsU0FBUztRQUNaLE1BQU0sSUFBSWxGLE1BQU07SUFDcEI7SUFDRSxPQUFPa0Y7QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhaW5pbmctcGxhdGZvcm0vLi9zcmMvY29udGV4dC9BdXRoQ29udGV4dC50c3g/NmVlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29udGV4dC9BdXRoQ29udGV4dC50c3hcbmltcG9ydCBSZWFjdCwge2NyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQXV0aENvbnRleHRUeXBlLFxuICBBdXRoUHJvdmlkZXJQcm9wcyxcbiAgQXV0aFN0YXRlLFxuICBMb2dpbkNyZWRlbnRpYWxzLFxuICBSZWdpc3RlckNyZWRlbnRpYWxzLFxuICBSZXNldFBhc3N3b3JkRGF0YSxcbiAgVXBkYXRlUGFzc3dvcmREYXRhXG59IGZyb20gJ0AvdHlwZXMvYXV0aC50eXBlcyc7XG5pbXBvcnQge1VzZXJQcm9maWxlIH0gZnJvbSAnQC90eXBlcy91c2VyLnR5cGVzJztcbmltcG9ydCB7YXV0aCwgZmlyZXN0b3JlIH0gZnJvbSAnQC9zZXJ2aWNlcy9maXJlYmFzZSc7XG5pbXBvcnQge1xuICBjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsXG4gIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkLFxuICBzaWduT3V0LFxuICBzZW5kUGFzc3dvcmRSZXNldEVtYWlsLFxuICBjb25maXJtUGFzc3dvcmRSZXNldCBhcyBmaXJlYmFzZUNvbmZpcm1QYXNzd29yZFJlc2V0LFxuICB1cGRhdGVQYXNzd29yZCBhcyBmaXJlYmFzZVVwZGF0ZVBhc3N3b3JkLFxuICBFbWFpbEF1dGhQcm92aWRlcixcbiAgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCxcbiAgZGVsZXRlVXNlcixcbiAgb25BdXRoU3RhdGVDaGFuZ2VkLFxuICBVc2VyIGFzIEZpcmViYXNlVXNlcixcbiAgR29vZ2xlQXV0aFByb3ZpZGVyLFxuICBzaWduSW5XaXRoUG9wdXBcbn0gZnJvbSAnZmlyZWJhc2UvYXV0aCc7XG5pbXBvcnQge2RvYywgZ2V0RG9jLCBzZXREb2MsIHVwZGF0ZURvYywgZGVsZXRlRG9jIH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcblxuY29uc3QgaW5pdGlhbEF1dGhTdGF0ZTogQXV0aFN0YXRlID0ge1xuICB1c2VyOiBudWxsLFxuICBsb2FkaW5nOiB0cnVlLFxuICBlcnJvcjogbnVsbCxcbiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxufTtcblxuY29uc3QgQXV0aENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEF1dGhDb250ZXh0VHlwZT4oe1xuICAuLi5pbml0aWFsQXV0aFN0YXRlLFxuICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICBsb2dpbjogYXN5bmMgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignQXV0aENvbnRleHQgbm90IGluaXRpYWxpemVkJyk7IH0sXG4gIGxvZ2luV2l0aEdvb2dsZTogYXN5bmMgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignQXV0aENvbnRleHQgbm90IGluaXRpYWxpemVkJyk7IH0sXG4gIHJlZ2lzdGVyOiBhc3luYyAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdBdXRoQ29udGV4dCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcbiAgbG9nb3V0OiBhc3luYyAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdBdXRoQ29udGV4dCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcbiAgcmVzZXRQYXNzd29yZDogYXN5bmMgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignQXV0aENvbnRleHQgbm90IGluaXRpYWxpemVkJyk7IH0sXG4gIGNvbmZpcm1QYXNzd29yZFJlc2V0OiBhc3luYyAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdBdXRoQ29udGV4dCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcbiAgdXBkYXRlUGFzc3dvcmQ6IGFzeW5jICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ0F1dGhDb250ZXh0IG5vdCBpbml0aWFsaXplZCcpOyB9LFxuICB1cGRhdGVQcm9maWxlOiBhc3luYyAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdBdXRoQ29udGV4dCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcbiAgZGVsZXRlQWNjb3VudDogYXN5bmMgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignQXV0aENvbnRleHQgbm90IGluaXRpYWxpemVkJyk7IH0sXG4gIGNsZWFyRXJyb3I6ICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ0F1dGhDb250ZXh0IG5vdCBpbml0aWFsaXplZCcpOyB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBBdXRoUHJvdmlkZXI6IFJlYWN0LkZDPEF1dGhQcm92aWRlclByb3BzPiA9ICh7Y2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBbYXV0aFN0YXRlLCBzZXRBdXRoU3RhdGVdID0gdXNlU3RhdGU8QXV0aFN0YXRlPihpbml0aWFsQXV0aFN0YXRlKTtcbiAgXG4gIC8vIHN1cGVyQWRtaW5zIGlzIHN0YWJsZSBhcyBpdCdzIGEgY29uc3RhbnQgYXJyYXkgZGVmaW5lZCBoZXJlLlxuICAvLyBJZiBpdCB3ZXJlIGR5bmFtaWMsIGl0IHdvdWxkIG5lZWQgdXNlTWVtby5cbiAgY29uc3Qgc3VwZXJBZG1pbnMgPSB1c2VNZW1vKCgpID0+IFsnZWdjaGFybGVAZ21haWwuY29tJ10sIFtdKTtcblxuICBjb25zdCBnZXRVc2VyUHJvZmlsZSA9IHVzZUNhbGxiYWNrKGFzeW5jIChmaXJlYmFzZVVzZXI6IEZpcmViYXNlVXNlcik6IFByb21pc2U8VXNlclByb2ZpbGUgfCBudWxsPiA9PiB7XG4gICAgY29uc3QgdXNlckRvY1JlZiA9IGRvYyhmaXJlc3RvcmUsICd1c2VycycsIGZpcmViYXNlVXNlci51aWQpO1xuICAgIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCBnZXREb2ModXNlckRvY1JlZik7XG4gICAgY29uc3QgaXNTdXBlckFkbWluID0gZmlyZWJhc2VVc2VyLmVtYWlsID8gc3VwZXJBZG1pbnMuaW5jbHVkZXMoZmlyZWJhc2VVc2VyLmVtYWlsKSA6IGZhbHNlO1xuXG4gICAgaWYgKHVzZXJEb2MuZXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiB1c2VyRG9jLmRhdGEoKSBhcyBVc2VyUHJvZmlsZTtcbiAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1VzZXJQcm9maWxlOiBVc2VyUHJvZmlsZSA9IHtcbiAgICAgICAgaWQ6IGZpcmViYXNlVXNlci51aWQsXG4gICAgICAgIGVtYWlsOiBmaXJlYmFzZVVzZXIuZW1haWwgfHwgJycsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBmaXJlYmFzZVVzZXIuZGlzcGxheU5hbWUgfHwgZmlyZWJhc2VVc2VyLmVtYWlsPy5zcGxpdCgnQCcpWzBdIHx8ICdVc2VyJyxcbiAgICAgICAgcGhvdG9VUkw6IGZpcmViYXNlVXNlci5waG90b1VSTCB8fCAnJyxcbiAgICAgICAgcm9sZXM6IHthZG1pbjogaXNTdXBlckFkbWluLCBpbnN0cnVjdG9yOiBmYWxzZSwgc3R1ZGVudDogdHJ1ZSwgbWFuYWdlcjogZmFsc2UgfSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGxhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVpZDogZmlyZWJhc2VVc2VyLnVpZCxcbiAgICAgICAgY291bnRyeTogJycsXG4gICAgICAgIGNpdHk6ICcnLFxuICAgICAgICBkZXBhcnRtZW50SWQ6ICcnXG4gICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHNldERvYyh1c2VyRG9jUmVmLCBuZXdVc2VyUHJvZmlsZSk7XG4gICAgICAgIHJldHVybiBuZXdVc2VyUHJvZmlsZTtcbiAgICB9IGNhdGNoIChwcm9maWxlRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNldHRpbmcgbmV3IHVzZXIgcHJvZmlsZTpcIiwgcHJvZmlsZUVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIE9yIGhhbmRsZSBlcnJvciBhcHByb3ByaWF0ZWx5XG4gICAgfVxuICB9XG59LCBbc3VwZXJBZG1pbnNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gb25BdXRoU3RhdGVDaGFuZ2VkKGF1dGgsIGFzeW5jIChmaXJlYmFzZVVzZXIpID0+IHtcbiAgICAgIGlmIChmaXJlYmFzZVVzZXIpIHtcbiAgICAgICAgLy8gT3B0aW1pc3RpY2FsbHkgc2V0IGxvYWRpbmcgdW50aWwgcHJvZmlsZSBpcyBmZXRjaGVkL3VwZGF0ZWRcbiAgICAgICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdXNlclByb2ZpbGUgPSBhd2FpdCBnZXRVc2VyUHJvZmlsZShmaXJlYmFzZVVzZXIpO1xuICAgICAgICAgIGlmICh1c2VyUHJvZmlsZSkge1xuICAgICAgICAgICAgY29uc3QgaXNTdXBlckFkbWluTm93ID0gZmlyZWJhc2VVc2VyLmVtYWlsID8gc3VwZXJBZG1pbnMuaW5jbHVkZXMoZmlyZWJhc2VVc2VyLmVtYWlsKSA6IGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaXNTdXBlckFkbWluTm93ICYmICF1c2VyUHJvZmlsZS5yb2xlcz8uYWRtaW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgdXNlckRvY1JlZiA9IGRvYyhmaXJlc3RvcmUsICd1c2VycycsIGZpcmViYXNlVXNlci51aWQpO1xuICAgICAgICAgICAgICBhd2FpdCB1cGRhdGVEb2ModXNlckRvY1JlZiwgeydyb2xlcy5hZG1pbic6IHRydWUsIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvZmlsZSA9IGF3YWl0IGdldFVzZXJQcm9maWxlKGZpcmViYXNlVXNlcik7IC8vIFJlLWZldGNoIHRvIGdldCB0aGUgYWJzb2x1dGUgbGF0ZXN0XG4gICAgICAgICAgICAgIHNldEF1dGhTdGF0ZSh7dXNlcjogdXBkYXRlZFByb2ZpbGUsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCwgaW5pdGlhbGl6ZWQ6IHRydWUgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gSWYgbGFzdExvZ2luQXQgaXMgb2xkLCB1cGRhdGUgaXRcbiAgICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgY29uc3QgbGFzdExvZ2luID0gdXNlclByb2ZpbGUubGFzdExvZ2luQXQgPyBuZXcgRGF0ZSh1c2VyUHJvZmlsZS5sYXN0TG9naW5BdCkgOiBuZXcgRGF0ZSgwKTtcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIGlmIGxhc3QgbG9naW4gd2FzIG1vcmUgdGhhbiwgc2F5LCA1IG1pbnV0ZXMgYWdvLCB0byBhdm9pZCByYXBpZCB1cGRhdGVzIG9uIGhvdCByZWxvYWRzXG4gICAgICAgICAgICAgIGlmIChub3cuZ2V0VGltZSgpIC0gbGFzdExvZ2luLmdldFRpbWUoKSA+IDUgKiA2MCAqIDEwMDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyRG9jUmVmID0gZG9jKGZpcmVzdG9yZSwgJ3VzZXJzJywgZmlyZWJhc2VVc2VyLnVpZCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlRG9jKHVzZXJEb2NSZWYsIHtsYXN0TG9naW5BdDogbm93LnRvSVNPU3RyaW5nKCkgfSk7XG4gICAgICAgICAgICAgICAgLy8gRmV0Y2ggYWdhaW4gaWYgeW91IHdhbnQgdGhlIGFic29sdXRlIGxhdGVzdCwgb3IgbWVyZ2Ugb3B0aW1pc3RpY2FsbHlcbiAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFByb2ZpbGVXaXRoTG9naW4gPSB7Li4udXNlclByb2ZpbGUsIGxhc3RMb2dpbkF0OiBub3cudG9JU09TdHJpbmcoKSB9O1xuICAgICAgICAgICAgICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IHVwZGF0ZWRQcm9maWxlV2l0aExvZ2luLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwsIGluaXRpYWxpemVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgc2V0QXV0aFN0YXRlKHt1c2VyOiB1c2VyUHJvZmlsZSwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBudWxsLCBpbml0aWFsaXplZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IG51bGwsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogJ0ZhaWxlZCB0byBsb2FkIHVzZXIgcHJvZmlsZSBvYmplY3QuJywgaW5pdGlhbGl6ZWQ6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQXV0aENvbnRleHQgb25BdXRoU3RhdGVDaGFuZ2VkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgICAgc2V0QXV0aFN0YXRlKHt1c2VyOiBudWxsLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6ICdGYWlsZWQgdG8gcHJvY2VzcyB1c2VyIHByb2ZpbGU6ICcgKyBlcnJvci5tZXNzYWdlLCBpbml0aWFsaXplZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IG51bGwsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCwgaW5pdGlhbGl6ZWQ6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB1bnN1YnNjcmliZSgpO1xufSwgW2dldFVzZXJQcm9maWxlLCBzdXBlckFkbWluc10pOyAvLyBnZXRVc2VyUHJvZmlsZSBkZXBlbmRzIG9uIHN1cGVyQWRtaW5zXG5cbiAgY29uc3QgbG9naW5XaXRoR29vZ2xlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCk6IFByb21pc2U8VXNlclByb2ZpbGU+ID0+IHtcbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgR29vZ2xlQXV0aFByb3ZpZGVyKCk7XG4gICAgICBwcm92aWRlci5hZGRTY29wZSgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5lbWFpbCcpO1xuICAgICAgcHJvdmlkZXIuYWRkU2NvcGUoJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdXNlcmluZm8ucHJvZmlsZScpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IHVzZXJQcm9maWxlID0gYXdhaXQgZ2V0VXNlclByb2ZpbGUocmVzdWx0LnVzZXIpO1xuXG4gICAgICBpZiAoIXVzZXJQcm9maWxlKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgcHJvZmlsZSBhZnRlciBHb29nbGUgc2lnbi1pbi5cIik7XG5cbiAgICAgIGNvbnN0IHVzZXJEb2NSZWYgPSBkb2MoZmlyZXN0b3JlLCAndXNlcnMnLCB1c2VyUHJvZmlsZS5pZCk7XG4gICAgICBhd2FpdCB1cGRhdGVEb2ModXNlckRvY1JlZiwge2xhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gICAgICBjb25zdCB1cGRhdGVkUHJvZmlsZSA9IHsuLi51c2VyUHJvZmlsZSwgbGFzdExvZ2luQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9O1xuXG4gICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IHVwZGF0ZWRQcm9maWxlLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwsIGluaXRpYWxpemVkOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRQcm9maWxlO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gbG9naW4gd2l0aCBHb29nbGUnO1xuICAgICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCB1c2VyOiBudWxsLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IGVycm9yTWVzc2FnZSB9KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufSwgW2dldFVzZXJQcm9maWxlXSk7XG5cbiAgY29uc3QgbG9naW4gPSB1c2VDYWxsYmFjayhhc3luYyAoY3JlZGVudGlhbHM6IExvZ2luQ3JlZGVudGlhbHMpOiBQcm9taXNlPFVzZXJQcm9maWxlPiA9PiB7XG4gICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtlbWFpbCwgcGFzc3dvcmQgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChhdXRoLCBlbWFpbCwgcGFzc3dvcmQpO1xuICAgICAgY29uc3QgdXNlclByb2ZpbGUgPSBhd2FpdCBnZXRVc2VyUHJvZmlsZSh1c2VyQ3JlZGVudGlhbC51c2VyKTtcblxuICAgICAgaWYgKCF1c2VyUHJvZmlsZSkgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJldHJpZXZlIHByb2ZpbGUgYWZ0ZXIgZW1haWwvcGFzc3dvcmQgc2lnbi1pbi5cIik7XG5cbiAgICAgIGNvbnN0IHVzZXJEb2NSZWYgPSBkb2MoZmlyZXN0b3JlLCAndXNlcnMnLCB1c2VyUHJvZmlsZS5pZCk7XG4gICAgICBhd2FpdCB1cGRhdGVEb2ModXNlckRvY1JlZiwge2xhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gICAgICBjb25zdCB1cGRhdGVkUHJvZmlsZSA9IHsuLi51c2VyUHJvZmlsZSwgbGFzdExvZ2luQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9O1xuXG4gICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IHVwZGF0ZWRQcm9maWxlLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwsIGluaXRpYWxpemVkOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRQcm9maWxlO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gbG9naW4nO1xuICAgICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCB1c2VyOiBudWxsLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IGVycm9yTWVzc2FnZSB9KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufSwgW2dldFVzZXJQcm9maWxlXSk7XG5cbiAgY29uc3QgcmVnaXN0ZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoY3JlZGVudGlhbHM6IFJlZ2lzdGVyQ3JlZGVudGlhbHMpOiBQcm9taXNlPFVzZXJQcm9maWxlPiA9PiB7XG4gICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtlbWFpbCwgcGFzc3dvcmQsIGRpc3BsYXlOYW1lLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBjb21wYW55LCBqb2JUaXRsZSB9ID0gY3JlZGVudGlhbHM7XG4gICAgICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChhdXRoLCBlbWFpbCwgcGFzc3dvcmQpO1xuICAgICAgY29uc3QgaXNTdXBlckFkbWluID0gc3VwZXJBZG1pbnMuaW5jbHVkZXMoZW1haWwpO1xuXG4gICAgICBjb25zdCBuZXdVc2VyUHJvZmlsZTogVXNlclByb2ZpbGUgPSB7XG4gICAgICAgIGlkOiB1c2VyQ3JlZGVudGlhbC51c2VyLnVpZCxcbiAgICAgICAgZW1haWwsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSB8fCBlbWFpbC5zcGxpdCgnQCcpWzBdLFxuICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgIGxhc3ROYW1lLFxuICAgICAgICBjb21wYW55LFxuICAgICAgICBqb2JUaXRsZSxcbiAgICAgICAgcm9sZXM6IHthZG1pbjogaXNTdXBlckFkbWluLCBpbnN0cnVjdG9yOiBmYWxzZSwgc3R1ZGVudDogdHJ1ZSwgbWFuYWdlcjogZmFsc2UgfSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGxhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVpZDogdXNlckNyZWRlbnRpYWwudXNlci51aWQsXG4gICAgICAgIGNvdW50cnk6ICcnLFxuICAgICAgICBjaXR5OiAnJyxcbiAgICAgICAgZGVwYXJ0bWVudElkOiAnJ1xuICAgIH07XG4gICAgICBjb25zdCB1c2VyRG9jUmVmID0gZG9jKGZpcmVzdG9yZSwgJ3VzZXJzJywgbmV3VXNlclByb2ZpbGUuaWQpO1xuICAgICAgYXdhaXQgc2V0RG9jKHVzZXJEb2NSZWYsIG5ld1VzZXJQcm9maWxlKTtcbiAgICAgIHNldEF1dGhTdGF0ZSh7dXNlcjogbmV3VXNlclByb2ZpbGUsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCwgaW5pdGlhbGl6ZWQ6IHRydWUgfSk7XG4gICAgICByZXR1cm4gbmV3VXNlclByb2ZpbGU7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpICAgICAge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHJlZ2lzdGVyJztcbiAgICAgIHNldEF1dGhTdGF0ZShwcmV2ID0+ICh7Li4ucHJldiwgdXNlcjogbnVsbCwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBlcnJvck1lc3NhZ2UgfSkpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cbn0sIFtzdXBlckFkbWluc10pO1xuXG4gIGNvbnN0IGxvZ291dCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2lnbk91dChhdXRoKTtcbiAgICAgIHNldEF1dGhTdGF0ZSh7dXNlcjogbnVsbCwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBudWxsLCBpbml0aWFsaXplZDogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGxvZ291dCc7XG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIHVzZXI6IG51bGwsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlIH0pKTsgLy8gRW5zdXJlIHVzZXIgaXMgbnVsbCBvbiBsb2dvdXQgZXJyb3IgdG9vXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufSwgW10pO1xuXG4gIGNvbnN0IHJlc2V0UGFzc3dvcmQgPSB1c2VDYWxsYmFjayhhc3luYyAoZGF0YTogUmVzZXRQYXNzd29yZERhdGEpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChhdXRoLCBkYXRhLmVtYWlsKTtcbiAgICAgIHNldEF1dGhTdGF0ZShwcmV2ID0+ICh7Li4ucHJldiwgbG9hZGluZzogZmFsc2UgfSkpO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gc2VuZCBwYXNzd29yZCByZXNldCBlbWFpbCc7XG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlIH0pKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG59LCBbXSk7XG5cbiAgY29uc3QgY29uZmlybVBhc3N3b3JkUmVzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAoY29kZTogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZpcmViYXNlQ29uZmlybVBhc3N3b3JkUmVzZXQoYXV0aCwgY29kZSwgbmV3UGFzc3dvcmQpO1xuICAgICAgc2V0QXV0aFN0YXRlKHByZXYgPT4gKHsuLi5wcmV2LCBsb2FkaW5nOiBmYWxzZSB9KSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBjb25maXJtIHBhc3N3b3JkIHJlc2V0JztcbiAgICAgIHNldEF1dGhTdGF0ZShwcmV2ID0+ICh7Li4ucHJldiwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBlcnJvck1lc3NhZ2UgfSkpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cbn0sIFtdKTtcblxuICBjb25zdCB1cGRhdGVQYXNzd29yZCA9IHVzZUNhbGxiYWNrKGFzeW5jIChkYXRhOiBVcGRhdGVQYXNzd29yZERhdGEpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgICBpZiAoIXVzZXIgfHwgIXVzZXIuZW1haWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBhdXRoZW50aWNhdGVkIGZvciBwYXNzd29yZCB1cGRhdGUuJyk7XG4gICAgfVxuICAgICAgY29uc3QgY3JlZGVudGlhbCA9IEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodXNlci5lbWFpbCwgZGF0YS5jdXJyZW50UGFzc3dvcmQpO1xuICAgICAgYXdhaXQgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCh1c2VyLCBjcmVkZW50aWFsKTtcbiAgICAgIGF3YWl0IGZpcmViYXNlVXBkYXRlUGFzc3dvcmQodXNlciwgZGF0YS5uZXdQYXNzd29yZCk7XG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IGZhbHNlIH0pKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHVwZGF0ZSBwYXNzd29yZCc7XG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlIH0pKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG59LCBbXSk7XG5cbiAgY29uc3QgdXBkYXRlUHJvZmlsZSA9IHVzZUNhbGxiYWNrKGFzeW5jIChkYXRhOiBQYXJ0aWFsPFVzZXJQcm9maWxlPik6IFByb21pc2U8VXNlclByb2ZpbGU+ID0+IHtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGF1dGhTdGF0ZS51c2VyO1xuXG4gICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdVc2VyIG5vdCBhdXRoZW50aWNhdGVkIGZvciBwcm9maWxlIHVwZGF0ZS4nKTtcbiAgICAgIHNldEF1dGhTdGF0ZShwcmV2ID0+ICh7Li4ucHJldiwgdXNlcjogbnVsbCwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBlcnIubWVzc2FnZSwgaW5pdGlhbGl6ZWQ6IHRydWUgfSkpO1xuICAgICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyRG9jUmVmID0gZG9jKGZpcmVzdG9yZSwgJ3VzZXJzJywgY3VycmVudFVzZXIuaWQpO1xuICAgICAgXG4gICAgICAvLyBQcmVwYXJlIHRoZSBkYXRhIHRvIGJlIHNlbnQgdG8gRmlyZXN0b3JlLlxuICAgICAgLy8gT25seSBzcHJlYWQgcHJvcGVydGllcyB0aGF0IGFyZSB2YWxpZCBmb3IgVXNlclByb2ZpbGUuXG4gICAgICAvLyAnZGF0YScgaXRzZWxmIGlzIFBhcnRpYWw8VXNlclByb2ZpbGU+LCBzbyBpdCdzIGFscmVhZHkgdHlwZS1jaGVja2VkLlxuICAgICAgY29uc3QgZGF0YUZvckZpcmVzdG9yZTogUGFydGlhbDxVc2VyUHJvZmlsZT4gPSBcbiAgICAgICAgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9KTtcbiAgICAgIFxuICAgICAgLy8gT25seSB1cGRhdGUgaWYgdGhlcmUncyBhY3R1YWxseSBkYXRhIHRvIHVwZGF0ZSwgb3RoZXJ3aXNlIHNraXAgRmlyZXN0b3JlIGNhbGxcbiAgICAgIGlmIChPYmplY3Qua2V5cyhkYXRhRm9yRmlyZXN0b3JlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyRG9jUmVmLCBkYXRhRm9yRmlyZXN0b3JlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJ1cGRhdGVQcm9maWxlIGNhbGxlZCB3aXRoIGVtcHR5IGRhdGEuIE5vIEZpcmVzdG9yZSB1cGRhdGUgcGVyZm9ybWVkLlwiKTtcbiAgICB9XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSB0aGUgdXBkYXRlZCB1c2VyIHByb2ZpbGUgZm9yIHRoZSBsb2NhbCBzdGF0ZVxuICAgICAgY29uc3QgdXBkYXRlZFVzZXJQcm9maWxlOiBVc2VyUHJvZmlsZSA9IHtcbiAgICAgICAgLi4uY3VycmVudFVzZXIsICAgIC8vIFN0YXJ0IHdpdGggdGhlIGN1cnJlbnQgdXNlciBwcm9maWxlXG4gICAgICAgIC4uLmRhdGFGb3JGaXJlc3RvcmUgLy8gQXBwbHkgYWxsIGNoYW5nZXMgZnJvbSAnZGF0YSdcbiAgICB9O1xuXG4gICAgICBzZXRBdXRoU3RhdGUoe3VzZXI6IHVwZGF0ZWRVc2VyUHJvZmlsZSwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBudWxsLCBpbml0aWFsaXplZDogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiB1cGRhdGVkVXNlclByb2ZpbGU7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgcHJvZmlsZSc7XG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIHVzZXI6IGN1cnJlbnRVc2VyLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IGVycm9yTWVzc2FnZSB9KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufSwgW2F1dGhTdGF0ZS51c2VyXSk7XG5cbiAgY29uc3QgZGVsZXRlQWNjb3VudCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdXNlciBmcm9tIGF1dGhTdGF0ZSBhbmQgRmlyZWJhc2UgYXV0aCAqYmVmb3JlKiBzZXR0aW5nIGxvYWRpbmcgc3RhdGVcbiAgICBjb25zdCBjdXJyZW50VXNlclByb2ZpbGUgPSBhdXRoU3RhdGUudXNlcjsgLy8gVXNlclByb2ZpbGUgZnJvbSBGaXJlc3RvcmVcbiAgICBjb25zdCBjdXJyZW50RmlyZWJhc2VVc2VyID0gYXV0aC5jdXJyZW50VXNlcjsgLy8gRmlyZWJhc2VVc2VyIGZyb20gYXV0aCBzZXJ2aWNlXG5cbiAgICBpZiAoIWN1cnJlbnRGaXJlYmFzZVVzZXIpIHtcbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignTm8gRmlyZWJhc2UgdXNlciBjdXJyZW50bHkgYXV0aGVudGljYXRlZCBmb3IgYWNjb3VudCBkZWxldGlvbi4nKTtcbiAgICAgIHNldEF1dGhTdGF0ZShwcmV2ID0+ICh7Li4ucHJldiwgdXNlcjogbnVsbCwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBlcnIubWVzc2FnZSwgaW5pdGlhbGl6ZWQ6IHRydWUgfSkpO1xuICAgICAgdGhyb3cgZXJyO1xuICB9XG4gICAgLy8gY3VycmVudFVzZXJQcm9maWxlIG1pZ2h0IGJlIG51bGwgaWYgRmlyZXN0b3JlIHN5bmMgaXMgb2ZmLCBidXQgY3VycmVudEZpcmViYXNlVXNlciBpcyB0aGUgc291cmNlIG9mIHRydXRoIGZvciBhdXRoIGRlbGV0aW9uXG5cbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgSUQgZnJvbSBGaXJlc3RvcmUgcHJvZmlsZSBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBmYWxsYmFjayB0byBGaXJlYmFzZSBhdXRoIFVJRFxuICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgaWYgeW91ciBGaXJlc3RvcmUgJ2lkJyBmaWVsZCBpcyB0aGUgc2FtZSBhcyAndWlkJ1xuICAgICAgY29uc3QgdXNlcklkRm9yRmlyZXN0b3JlID0gY3VycmVudFVzZXJQcm9maWxlPy5pZCB8fCBjdXJyZW50RmlyZWJhc2VVc2VyLnVpZDtcbiAgICAgIGNvbnN0IHVzZXJEb2NSZWYgPSBkb2MoZmlyZXN0b3JlLCAndXNlcnMnLCB1c2VySWRGb3JGaXJlc3RvcmUpO1xuICAgICAgXG4gICAgICBhd2FpdCBkZWxldGVEb2ModXNlckRvY1JlZik7IC8vIERlbGV0ZSBGaXJlc3RvcmUgcHJvZmlsZVxuXG4gICAgICBhd2FpdCBkZWxldGVVc2VyKGN1cnJlbnRGaXJlYmFzZVVzZXIpOyAvLyBEZWxldGUgRmlyZWJhc2UgYXV0aCB1c2VyXG5cbiAgICAgIHNldEF1dGhTdGF0ZSh7dXNlcjogbnVsbCwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBudWxsLCBpbml0aWFsaXplZDogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGRlbGV0ZSBhY2NvdW50JztcbiAgICAgIC8vIElmIGRlbGV0aW9uIGZhaWxzLCB0aGUgdXNlciBtaWdodCBzdGlsbCBiZSBwYXJ0aWFsbHkgYXV0aGVudGljYXRlZCBvciB0aGVpciBGaXJlc3RvcmUgZG9jIG1pZ2h0IHN0aWxsIGV4aXN0LlxuICAgICAgLy8gU2V0dGluZyB1c2VyIHRvIG51bGwgaXMgYSBzYWZlIGRlZmF1bHQsIGJ1dCB5b3UgbWlnaHQgd2FudCBtb3JlIG51YW5jZWQgZXJyb3IgaGFuZGxpbmcuXG4gICAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIHVzZXI6IG51bGwsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlLCBpbml0aWFsaXplZDogdHJ1ZSB9KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufSwgW2F1dGhTdGF0ZS51c2VyXSk7IC8vIERlcGVuZGVuY3kgb24gYXV0aFN0YXRlLnVzZXIgYmVjYXVzZSBpdCBtaWdodCBiZSB1c2VkIHRvIGdldCB0aGUgRmlyZXN0b3JlIGRvYyBJRC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dGguY3VycmVudFVzZXIgaXMgbm90IGEgcmVhY3RpdmUgZGVwZW5kZW5jeSBmb3IgdXNlQ2FsbGJhY2suXG5cbiAgY29uc3QgY2xlYXJFcnJvciA9IHVzZUNhbGxiYWNrKCgpOiB2b2lkID0+IHtcbiAgICBzZXRBdXRoU3RhdGUocHJldiA9PiAoey4uLnByZXYsIGVycm9yOiBudWxsIH0pKTtcbn0sIFtdKTtcblxuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogYXV0aFN0YXRlLnVzZXIsXG4gICAgICBsb2FkaW5nOiBhdXRoU3RhdGUubG9hZGluZyxcbiAgICAgIGVycm9yOiBhdXRoU3RhdGUuZXJyb3IsXG4gICAgICBpbml0aWFsaXplZDogYXV0aFN0YXRlLmluaXRpYWxpemVkLFxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAhIWF1dGhTdGF0ZS51c2VyLFxuICAgICAgbG9naW4sXG4gICAgICBsb2dpbldpdGhHb29nbGUsXG4gICAgICByZWdpc3RlcixcbiAgICAgIGxvZ291dCxcbiAgICAgIHJlc2V0UGFzc3dvcmQsXG4gICAgICBjb25maXJtUGFzc3dvcmRSZXNldCxcbiAgICAgIHVwZGF0ZVBhc3N3b3JkLFxuICAgICAgdXBkYXRlUHJvZmlsZSxcbiAgICAgIGRlbGV0ZUFjY291bnQsXG4gICAgICBjbGVhckVycm9yLFxuICB9O1xufSwgW1xuICAgIGF1dGhTdGF0ZSwgLy8gTWFpbiBkZXBlbmRlbmN5IGZvciB1c2VyLCBsb2FkaW5nLCBlcnJvciwgaW5pdGlhbGl6ZWQsIGlzQXV0aGVudGljYXRlZFxuICAgIGxvZ2luLCBsb2dpbldpdGhHb29nbGUsIHJlZ2lzdGVyLCBsb2dvdXQsIHJlc2V0UGFzc3dvcmQsIFxuICAgIGNvbmZpcm1QYXNzd29yZFJlc2V0LCB1cGRhdGVQYXNzd29yZCwgdXBkYXRlUHJvZmlsZSwgZGVsZXRlQWNjb3VudCwgY2xlYXJFcnJvciAvLyBGdW5jdGlvbnNcbiAgXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BdXRoQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VBdXRoID0gKCk6IEF1dGhDb250ZXh0VHlwZSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBdXRoIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQXV0aFByb3ZpZGVyJyk7XG59XG4gIHJldHVybiBjb250ZXh0O1xufTsiXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ1c2VNZW1vIiwiYXV0aCIsImZpcmVzdG9yZSIsImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIiwic2lnbk91dCIsInNlbmRQYXNzd29yZFJlc2V0RW1haWwiLCJjb25maXJtUGFzc3dvcmRSZXNldCIsImZpcmViYXNlQ29uZmlybVBhc3N3b3JkUmVzZXQiLCJ1cGRhdGVQYXNzd29yZCIsImZpcmViYXNlVXBkYXRlUGFzc3dvcmQiLCJFbWFpbEF1dGhQcm92aWRlciIsInJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWwiLCJkZWxldGVVc2VyIiwib25BdXRoU3RhdGVDaGFuZ2VkIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwic2lnbkluV2l0aFBvcHVwIiwiZG9jIiwiZ2V0RG9jIiwic2V0RG9jIiwidXBkYXRlRG9jIiwiZGVsZXRlRG9jIiwiaW5pdGlhbEF1dGhTdGF0ZSIsInVzZXIiLCJsb2FkaW5nIiwiZXJyb3IiLCJpbml0aWFsaXplZCIsIkF1dGhDb250ZXh0IiwiaXNBdXRoZW50aWNhdGVkIiwibG9naW4iLCJFcnJvciIsImxvZ2luV2l0aEdvb2dsZSIsInJlZ2lzdGVyIiwibG9nb3V0IiwicmVzZXRQYXNzd29yZCIsInVwZGF0ZVByb2ZpbGUiLCJkZWxldGVBY2NvdW50IiwiY2xlYXJFcnJvciIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwiYXV0aFN0YXRlIiwic2V0QXV0aFN0YXRlIiwic3VwZXJBZG1pbnMiLCJnZXRVc2VyUHJvZmlsZSIsImZpcmViYXNlVXNlciIsInVzZXJEb2NSZWYiLCJ1aWQiLCJ1c2VyRG9jIiwiaXNTdXBlckFkbWluIiwiZW1haWwiLCJpbmNsdWRlcyIsImV4aXN0cyIsImRhdGEiLCJuZXdVc2VyUHJvZmlsZSIsImlkIiwiZGlzcGxheU5hbWUiLCJzcGxpdCIsInBob3RvVVJMIiwicm9sZXMiLCJhZG1pbiIsImluc3RydWN0b3IiLCJzdHVkZW50IiwibWFuYWdlciIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImxhc3RMb2dpbkF0IiwiY291bnRyeSIsImNpdHkiLCJkZXBhcnRtZW50SWQiLCJwcm9maWxlRXJyb3IiLCJjb25zb2xlIiwidW5zdWJzY3JpYmUiLCJwcmV2IiwidXNlclByb2ZpbGUiLCJpc1N1cGVyQWRtaW5Ob3ciLCJ1cGRhdGVkQXQiLCJ1cGRhdGVkUHJvZmlsZSIsIm5vdyIsImxhc3RMb2dpbiIsImdldFRpbWUiLCJ1cGRhdGVkUHJvZmlsZVdpdGhMb2dpbiIsIm1lc3NhZ2UiLCJwcm92aWRlciIsImFkZFNjb3BlIiwicmVzdWx0IiwiZXJyb3JNZXNzYWdlIiwiY3JlZGVudGlhbHMiLCJwYXNzd29yZCIsInVzZXJDcmVkZW50aWFsIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJjb21wYW55Iiwiam9iVGl0bGUiLCJjb2RlIiwibmV3UGFzc3dvcmQiLCJjdXJyZW50VXNlciIsImNyZWRlbnRpYWwiLCJjdXJyZW50UGFzc3dvcmQiLCJlcnIiLCJkYXRhRm9yRmlyZXN0b3JlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInVwZGF0ZWRVc2VyUHJvZmlsZSIsImN1cnJlbnRVc2VyUHJvZmlsZSIsImN1cnJlbnRGaXJlYmFzZVVzZXIiLCJ1c2VySWRGb3JGaXJlc3RvcmUiLCJjb250ZXh0VmFsdWUiLCJQcm92aWRlciIsInZhbHVlIiwidXNlQXV0aCIsImNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/context/AuthContext.tsx\n");

/***/ }),

/***/ "./src/context/CourseContext.tsx":
/*!***************************************!*\
  !*** ./src/context/CourseContext.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CourseContext: () => (/* binding */ CourseContext),\n/* harmony export */   CourseProvider: () => (/* binding */ CourseProvider),\n/* harmony export */   useCourses: () => (/* binding */ useCourses)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _services_firebase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/firebase */ \"./src/services/firebase.ts\");\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AuthContext */ \"./src/context/AuthContext.tsx\");\n/* harmony import */ var _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/courseProgressService */ \"./src/services/courseProgressService.ts\");\n/* harmony import */ var _services_moduleService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/services/moduleService */ \"./src/services/moduleService.ts\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"@tanstack/react-query\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _services_firebase__WEBPACK_IMPORTED_MODULE_3__, _AuthContext__WEBPACK_IMPORTED_MODULE_4__, _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__, _services_moduleService__WEBPACK_IMPORTED_MODULE_6__, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _services_firebase__WEBPACK_IMPORTED_MODULE_3__, _AuthContext__WEBPACK_IMPORTED_MODULE_4__, _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__, _services_moduleService__WEBPACK_IMPORTED_MODULE_6__, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n // Added useCallback, useMemo\n\n\n // Assuming AuthContext is already stabilized\n\n\n // Kept from your snippet\nconst CourseContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst CourseProvider = ({ children })=>{\n    const { user } = (0,_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)(); // Assuming useAuth() provides a stable 'user' object\n    const [courses, setCourses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [enrolledCourses, setEnrolledCourses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [completedCourses, setCompletedCourses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [featuredCourses, setFeaturedCourses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [courseProgress, setCourseProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.useQueryClient)(); // From your snippet\n    // --- START OF MEMOIZED FUNCTIONS (Order Matters) ---\n    const getFirestoreUserId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        // Relies on 'user' from useAuth\n        if (!user || !user.id) {\n            console.error(\"Attempted Firestore operation without authenticated user ID.\");\n            throw new Error(\"User not authenticated for this operation\");\n        }\n        return user.id;\n    }, [\n        user\n    ]);\n    // Define fetchCourse early as it's a common dependency\n    const fetchCourse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, internalCall = false)=>{\n        // Relies on setLoading, setError (stable state setters)\n        // Relies on verifyAllModuleLessonCounts (stable import)\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const courseDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"courses\", courseId));\n            if (!courseDoc.exists()) {\n                throw new Error(\"Course not found\");\n            }\n            const courseData = courseDoc.data();\n            return {\n                ...courseData,\n                id: courseDoc.id\n            };\n        } catch (error) {\n            console.error(`Failed to fetch course ${courseId}:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch course\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, []); // Dependencies: Stable setters, stable imports\n    // Define fetchCourses\n    const fetchCourses = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (options, internalCall = false)=>{\n        // Relies on setLoading, setError, setCourses (stable state setters)\n        // Relies on verifyAllModuleLessonCounts (stable import)\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            if (options?.verifyModuleLessonCounts && options.courseId) {\n                await (0,_services_moduleService__WEBPACK_IMPORTED_MODULE_6__.verifyAllModuleLessonCounts)(options.courseId);\n            }\n            const coursesQueryBuilder = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"courses\");\n            const constraints = [];\n            if (options?.status) {\n                constraints.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"status\", \"==\", options.status));\n            } else {\n                constraints.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"status\", \"==\", \"published\"));\n            }\n            if (options?.featured !== undefined) {\n                constraints.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"featured\", \"==\", options.featured));\n            }\n            constraints.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"title\", \"asc\"));\n            if (options?.limit && typeof options.limit === \"number\") {\n                constraints.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.limit)(options.limit));\n            }\n            const finalQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(coursesQueryBuilder, ...constraints);\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(finalQuery);\n            const fetchedCoursesData = [];\n            querySnapshot.forEach((docSnap)=>{\n                const data = docSnap.data();\n                fetchedCoursesData.push({\n                    id: docSnap.id,\n                    ...data\n                });\n            });\n            if (!options?.featured) {\n                setCourses(fetchedCoursesData);\n            }\n            return fetchedCoursesData;\n        } catch (error) {\n            console.error(\"Failed to fetch courses:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch courses\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, []); // Dependencies: Stable setters, stable imports\n    // Define fetchCourseProgress\n    const fetchCourseProgress = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId)=>{\n        // Relies on user, getFirestoreUserId (memoized), setCourseProgress (stable)\n        // Relies on courseProgressService.getCourseProgress (stable import)\n        if (!user?.id) {\n            return null;\n        }\n        const userId = getFirestoreUserId();\n        try {\n            const progress = await _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__.getCourseProgress(userId, courseId);\n            if (progress) {\n                setCourseProgress((prev)=>({\n                        ...prev,\n                        [courseId]: progress\n                    }));\n            } else {\n                setCourseProgress((prev)=>{\n                    const newState = {\n                        ...prev\n                    };\n                    delete newState[courseId];\n                    return newState;\n                });\n            }\n            return progress;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n            console.error(`Error fetching course progress for ${courseId}:`, error);\n            return null;\n        }\n    }, [\n        user,\n        getFirestoreUserId\n    ]);\n    // --- End of Part 1 ---\n    // --- Continuation from Part 1 ---\n    // fetchCourseProgress was the last function in Part 1\n    // --- Part 2 Functions ---\n    const fetchEnrolledCourses = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchCourse, fetchCourseProgress (all memoized/stable)\n        // Relies on stable setters: setEnrolledCourses, setCompletedCourses, setCourseProgress, setLoading, setError\n        if (!user?.id) {\n            setEnrolledCourses([]);\n            setCompletedCourses([]);\n            setCourseProgress({});\n            return [];\n        }\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const enrollmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, `users/${userId}/enrollments`);\n            const enrollmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(enrollmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"status\", \"==\", \"active\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"enrolledAt\", \"desc\"));\n            const enrollmentsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(enrollmentsQuery);\n            const enrollments = enrollmentsSnapshot.docs.map((d)=>({\n                    ...d.data(),\n                    enrollmentId: d.id\n                }));\n            const uniqueEnrollmentsByCourseId = Array.from(enrollments.reduce((map, enrollment)=>{\n                const existingEnrollment = map.get(enrollment.courseId);\n                if (!existingEnrollment || enrollment.enrolledAt && existingEnrollment.enrolledAt && new Date(enrollment.enrolledAt) > new Date(existingEnrollment.enrolledAt)) {\n                    map.set(enrollment.courseId, enrollment);\n                }\n                return map;\n            }, new Map()).values());\n            const progressPromises = uniqueEnrollmentsByCourseId.map((e)=>fetchCourseProgress(e.courseId));\n            const progressResults = await Promise.all(progressPromises);\n            const tempProgressMap = {};\n            progressResults.forEach((p)=>{\n                if (p) {\n                    tempProgressMap[p.courseId] = p;\n                }\n            });\n            const enrolledCoursesDetailsPromises = uniqueEnrollmentsByCourseId.map(async (e)=>{\n                try {\n                    const course = await fetchCourse(e.courseId, true);\n                    const progress = tempProgressMap[course.id];\n                    return {\n                        ...course,\n                        progress: progress?.overallProgress || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching details for enrolled course ${e.courseId} in fetchEnrolledCourses:`, error);\n                    return undefined;\n                }\n            });\n            const finalEnrolledCourses = (await Promise.all(enrolledCoursesDetailsPromises)).filter((c)=>c !== undefined);\n            const completed = [];\n            const inProgress = [];\n            finalEnrolledCourses.forEach((c)=>{\n                c.progress === 100 ? completed.push(c) : inProgress.push(c);\n            });\n            setEnrolledCourses(inProgress);\n            setCompletedCourses(completed);\n            setCourseProgress((prevGlobalProgress)=>({\n                    ...prevGlobalProgress,\n                    ...tempProgressMap\n                }));\n            return finalEnrolledCourses;\n        } catch (error) {\n            console.error(\"Error fetching enrolled courses:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch enrolled courses\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchCourse,\n        fetchCourseProgress\n    ]);\n    const fetchCompletedCourses = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchCourse (all memoized/stable)\n        // Relies on stable setters: setCompletedCourses, setLoading, setError\n        if (!user?.id) {\n            setCompletedCourses([]);\n            return [];\n        }\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const progressQ = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"courseProgress\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"completed\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"completedDate\", \"desc\"));\n            const progressSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(progressQ);\n            const completedProgressDocs = progressSnapshot.docs.map((d)=>d.data());\n            const completedCoursesPromises = completedProgressDocs.map(async (progressItem)=>{\n                try {\n                    const course = await fetchCourse(progressItem.courseId, true);\n                    return {\n                        ...course,\n                        progress: 100\n                    };\n                } catch (error) {\n                    console.error(`Error fetching details for completed course ${progressItem.courseId}:`, error);\n                    return undefined;\n                }\n            });\n            const completedCoursesData = (await Promise.all(completedCoursesPromises)).filter((c)=>c !== undefined);\n            setCompletedCourses(completedCoursesData);\n            return completedCoursesData;\n        } catch (error) {\n            console.error(\"Error fetching completed courses:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch completed courses\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchCourse\n    ]);\n    const enrollInCourse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchCourse, fetchEnrolledCourses (all memoized/stable)\n        // Relies on stable setters: setLoading, setError\n        if (!user?.id) throw new Error(\"User not authenticated\");\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const enrollmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, `users/${userId}/enrollments`);\n            const enrollmentQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(enrollmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"courseId\", \"==\", courseId));\n            const enrollmentSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(enrollmentQuery);\n            if (!enrollmentSnapshot.empty) {\n                const enrollmentDoc = enrollmentSnapshot.docs[0];\n                const enrollmentData = enrollmentDoc.data();\n                if (enrollmentData.status !== \"active\") {\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(enrollmentDoc.ref, {\n                        status: \"active\",\n                        enrolledAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString()\n                    });\n                    const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n                    const progressSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(progressRef);\n                    if (progressSnap.exists()) {\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(progressRef, {\n                            completed: false,\n                            completedDate: null,\n                            certificateId: null\n                        }).catch(console.warn);\n                    }\n                } else return;\n            } else {\n                const course = await fetchCourse(courseId, true);\n                const newEnrollmentData = {\n                    courseId,\n                    courseName: course.title,\n                    enrolledAt: new Date().toISOString(),\n                    status: \"active\",\n                    progress: 0,\n                    completedLessons: [],\n                    lastAccessedAt: new Date().toISOString()\n                };\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(enrollmentsRef, newEnrollmentData);\n                const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n                const progressDocSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(progressRef);\n                if (!progressDocSnap.exists()) {\n                    const newProgressData = {\n                        courseId,\n                        userId: userId,\n                        startDate: new Date().toISOString(),\n                        lastAccessDate: new Date().toISOString(),\n                        completedLessons: [],\n                        completedModules: [],\n                        quizScores: {},\n                        quizAttempts: {},\n                        lessonProgress: {},\n                        moduleProgress: {},\n                        overallProgress: 0,\n                        completed: false,\n                        timeSpent: 0,\n                        lastPosition: undefined\n                    };\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(progressRef, newProgressData);\n                } else {\n                    const existingProgress = progressDocSnap.data();\n                    if (existingProgress.completed) {\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(progressRef, {\n                            completed: false,\n                            completedDate: null,\n                            certificateId: null,\n                            certificateIssueDate: null\n                        });\n                    }\n                }\n            }\n            await fetchEnrolledCourses(true);\n        } catch (error) {\n            console.error(`Failed to enroll in course ${courseId}:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to enroll in course\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchCourse,\n        fetchEnrolledCourses\n    ]);\n    const unenrollFromCourse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchEnrolledCourses (all memoized/stable)\n        // Relies on stable setters: setLoading, setError\n        if (!user?.id) throw new Error(\"User not authenticated\");\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const enrollmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, `users/${userId}/enrollments`);\n            const enrollmentQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(enrollmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"courseId\", \"==\", courseId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"status\", \"==\", \"active\"));\n            const enrollmentSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(enrollmentQuery);\n            if (enrollmentSnapshot.empty) {\n                console.warn(`Attempted to unenroll from course ${courseId} but no active enrollment found.`);\n                return;\n            }\n            const enrollmentDocRef = enrollmentSnapshot.docs[0].ref;\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(enrollmentDocRef, {\n                status: \"inactive\",\n                updatedAt: new Date().toISOString()\n            });\n            await fetchEnrolledCourses(true);\n        } catch (error) {\n            console.error(`Failed to unenroll from course ${courseId}:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to unenroll from course\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchEnrolledCourses\n    ]);\n    // --- End of Part 2 ---\n    // --- Continuation from Part 2 ---\n    // unenrollFromCourse was the last function in Part 2\n    // --- Part 3 Functions, useEffects, contextValue, return ---\n    const updateCourseProgress = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, lessonId, completed, internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchCourse, fetchEnrolledCourses (all memoized/stable)\n        // Relies on stable setters: setLoading, setError, setCourseProgress\n        // Relies on stable import: courseProgressService.updateLessonProgress\n        if (!user?.id) throw new Error(\"User not authenticated\");\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const course = await fetchCourse(courseId, true);\n            const totalLessons = course.modulesList?.reduce((total, moduleId)=>{\n                // Check if moduleId is actually a Module object (for backward compatibility)\n                if (typeof moduleId === \"object\" && moduleId !== null) {\n                    const moduleObj = moduleId;\n                    return total + (moduleObj.lessons?.length || 0);\n                }\n                // If it's a string ID, we can't directly access lessons\n                // This is likely the source of your type error\n                return total;\n            }, 0) || 0;\n            const updatedProgressData = await _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__.updateLessonProgress(userId, courseId, course.title, lessonId, completed, totalLessons);\n            if (updatedProgressData) {\n                setCourseProgress((prev)=>({\n                        ...prev,\n                        [courseId]: updatedProgressData\n                    }));\n            } else {\n                console.warn(`updateLessonProgress service did not return updated progress for ${courseId}.`);\n            }\n            await fetchEnrolledCourses(true);\n        } catch (error) {\n            console.error(`Failed to update progress for lesson ${lessonId} in course ${courseId}:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to update course progress\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchCourse,\n        fetchEnrolledCourses\n    ]);\n    const markModuleComplete = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, moduleId, internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchEnrolledCourses (all memoized/stable)\n        // Relies on stable setters: setLoading, setError, setCourseProgress\n        // Relies on stable import: courseProgressService.markModuleComplete\n        if (!user?.id) throw new Error(\"User not authenticated\");\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const updatedProgressData = await _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__.markModuleComplete(userId, courseId, moduleId);\n            if (updatedProgressData) {\n                setCourseProgress((prev)=>({\n                        ...prev,\n                        [courseId]: updatedProgressData\n                    }));\n            } else {\n                console.warn(`markModuleComplete service did not return updated progress for ${courseId}.`);\n            }\n            await fetchEnrolledCourses(true);\n        } catch (error) {\n            console.error(`Failed to mark module ${moduleId} complete in course ${courseId}:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to mark module complete\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchEnrolledCourses\n    ]);\n    const markCourseComplete = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (courseId, internalCall = false)=>{\n        // Relies on user, getFirestoreUserId, fetchCourse, fetchEnrolledCourses (all memoized/stable)\n        // Relies on stable setters: setLoading, setError, setCourseProgress\n        // Relies on stable import: courseProgressService.markCourseComplete\n        if (!user?.id) throw new Error(\"User not authenticated\");\n        const userId = getFirestoreUserId();\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            const course = await fetchCourse(courseId, true);\n            const verificationCode = `CERT-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n            const tempId = \"generating\";\n            const certificateRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"certificates\"), {\n                userId: userId,\n                courseId: courseId,\n                courseName: course.title,\n                userName: user.displayName || \"Learner\",\n                issueDate: new Date().toISOString(),\n                templateId: \"default\",\n                pdfUrl: `/certificates/${tempId}.pdf`,\n                thumbnailUrl: `/certificates/${tempId}.jpg`,\n                verificationCode: verificationCode,\n                status: \"active\",\n                instructor: course.instructor || null,\n                instructorTitle: course.instructorTitle || null\n            });\n            const certificateDocId = certificateRef.id;\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(certificateRef, {\n                pdfUrl: `/certificates/${certificateDocId}.pdf`,\n                thumbnailUrl: `/certificates/${certificateDocId}.jpg`\n            });\n            const updatedServiceProgress = await _services_courseProgressService__WEBPACK_IMPORTED_MODULE_5__.markCourseComplete(userId, courseId, course.title);\n            setCourseProgress((prev)=>{\n                const baseProgress = updatedServiceProgress || prev[courseId] || {\n                    courseId,\n                    userId\n                };\n                return {\n                    ...prev,\n                    [courseId]: {\n                        ...baseProgress,\n                        // Use the progress values from the service rather than overriding them\n                        // This ensures we use the single source of truth from the backend\n                        certificateId: certificateDocId,\n                        certificateIssueDate: new Date().toISOString()\n                    }\n                };\n            });\n            await fetchEnrolledCourses(true);\n            return certificateDocId;\n        } catch (error) {\n            console.error(`Failed to mark course ${courseId} complete:`, error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to mark course complete\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        user,\n        getFirestoreUserId,\n        fetchCourse,\n        fetchEnrolledCourses\n    ]); // Depends on user from auth\n    const searchCourses = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (queryText, filters, internalCall = false)=>{\n        // Relies on 'courses' state variable\n        // Relies on stable setters: setLoading, setError\n        if (!internalCall) {\n            setLoading(true);\n            setError(null);\n        }\n        try {\n            let filteredResults = [\n                ...courses\n            ]; // Use the 'courses' state from CourseProvider scope\n            if (queryText) {\n                const queryLower = queryText.toLowerCase();\n                filteredResults = filteredResults.filter((course)=>course.title.toLowerCase().includes(queryLower) || course.description?.toLowerCase().includes(queryLower) || course.longDescription?.toLowerCase().includes(queryLower) || course.tags?.some((tag)=>tag.toLowerCase().includes(queryLower)));\n            }\n            if (filters) {\n                if (filters.categories && filters.categories.length > 0) {\n                    filteredResults = filteredResults.filter((c)=>c.categoryIds?.some((catId)=>filters.categories?.includes(catId)));\n                }\n                if (filters.levels && filters.levels.length > 0) {\n                    filteredResults = filteredResults.filter((c)=>filters.levels?.includes(c.level));\n                }\n                if (filters.durations && filters.durations.length > 0) {\n                    filteredResults = filteredResults.filter((c)=>{\n                        let totalSeconds = c.durationDetails?.totalSeconds;\n                        if (totalSeconds === undefined && c.duration) {\n                            const parts = c.duration.split(\" \");\n                            if (parts.length === 2) {\n                                const value = parseFloat(parts[0]);\n                                const unit = parts[1].toLowerCase();\n                                if (!isNaN(value)) {\n                                    if (unit.startsWith(\"hour\")) totalSeconds = value * 3600;\n                                    else if (unit.startsWith(\"minute\")) totalSeconds = value * 60;\n                                }\n                            }\n                        }\n                        if (totalSeconds === undefined) return false;\n                        return filters.durations?.some((fDuration)=>{\n                            if (fDuration === \"short\") return totalSeconds < 2 * 3600;\n                            if (fDuration === \"medium\") return totalSeconds >= 2 * 3600 && totalSeconds <= 4 * 3600;\n                            if (fDuration === \"long\") return totalSeconds > 4 * 3600;\n                            return false;\n                        });\n                    });\n                }\n                if (filters.priceRange && typeof filters.priceRange?.min === \"number\" && typeof filters.priceRange?.max === \"number\") {\n                    filteredResults = filteredResults.filter((c)=>{\n                        const price = c.price || 0;\n                        const isFree = c.isFree || false;\n                        if (filters.priceRange?.min === 0 && isFree) return true;\n                        return price >= (filters.priceRange?.min ?? 0) && price <= (filters.priceRange?.max ?? Infinity);\n                    });\n                }\n                if (filters.rating !== undefined && filters.rating > 0) {\n                    filteredResults = filteredResults.filter((c)=>c.rating !== undefined && c.rating >= filters.rating);\n                }\n            }\n            return filteredResults;\n        } catch (error) {\n            console.error(\"Failed to search courses:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Failed to search courses\";\n            if (!internalCall) setError(errorMessage);\n            throw new Error(errorMessage);\n        } finally{\n            if (!internalCall) setLoading(false);\n        }\n    }, [\n        courses\n    ]); // Depends only on the 'courses' state variable\n    // --- End of All Memoized Functions ---\n    // --- useEffect Hooks (should now use memoized functions if they call them) ---\n    // Fetch featured courses on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadFeaturedCourses = async ()=>{\n            try {\n                // Calls memoized fetchCourses\n                const featuredCoursesData = await fetchCourses({\n                    featured: true,\n                    limit: 6\n                }, true);\n                setFeaturedCourses(featuredCoursesData);\n            } catch (error) {\n                console.error(\"Error loading featured courses:\", error);\n            }\n        };\n        loadFeaturedCourses();\n    }, [\n        fetchCourses\n    ]); // Dependency is the memoized fetchCourses\n    // Fetch enrolled courses when user changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (user?.id) {\n            // Calls memoized fetchEnrolledCourses\n            fetchEnrolledCourses(true); // Use internal call = true\n        } else {\n            setEnrolledCourses([]);\n            setCompletedCourses([]);\n            setCourseProgress({});\n        }\n    }, [\n        user?.id,\n        fetchEnrolledCourses\n    ]); // Dependencies are user.id and the memoized fetchEnrolledCourses\n    // --- contextValue wrapped in useMemo ---\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        // console.log(\"[CourseContext] Recalculating contextValue\"); // Keep commented unless debugging\n        return {\n            // State values\n            courses,\n            enrolledCourses,\n            completedCourses,\n            featuredCourses,\n            courseProgress,\n            loading,\n            error,\n            // Memoized functions\n            fetchCourses,\n            fetchCourse,\n            fetchEnrolledCourses,\n            fetchCompletedCourses,\n            enrollInCourse,\n            unenrollFromCourse,\n            updateCourseProgress,\n            markModuleComplete,\n            markCourseComplete,\n            fetchCourseProgress,\n            searchCourses\n        };\n    }, [\n        // State dependencies\n        courses,\n        enrolledCourses,\n        completedCourses,\n        featuredCourses,\n        courseProgress,\n        loading,\n        error,\n        // Function dependencies (now stable references)\n        fetchCourses,\n        fetchCourse,\n        fetchEnrolledCourses,\n        fetchCompletedCourses,\n        enrollInCourse,\n        unenrollFromCourse,\n        updateCourseProgress,\n        markModuleComplete,\n        markCourseComplete,\n        fetchCourseProgress,\n        searchCourses\n    ]);\n    // --- Provider Return ---\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CourseContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\context\\\\CourseContext.tsx\",\n        lineNumber: 664,\n        columnNumber: 5\n    }, undefined);\n}; // End of CourseProvider Component\n// --- useCourses Hook (remains the same) ---\nconst useCourses = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CourseContext);\n    if (!context) {\n        throw new Error(\"useCourses must be used within a CourseProvider\");\n    }\n    return context;\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/context/CourseContext.tsx\n");

/***/ }),

/***/ "./src/context/SettingsContext.tsx":
/*!*****************************************!*\
  !*** ./src/context/SettingsContext.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SettingsProvider: () => (/* binding */ SettingsProvider),\n/* harmony export */   useSettings: () => (/* binding */ useSettings)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _services_firebase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/firebase */ \"./src/services/firebase.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _services_firebase__WEBPACK_IMPORTED_MODULE_3__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _services_firebase__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nconst defaultSettings = {\n    defaultStudentName: \"\",\n    certificatePreviewTitle: \"Certificate Preview\",\n    defaultPreviewName: \"\",\n    defaultCourseName: \"\",\n    organizationName: \"\",\n    defaultIssuerTitle: \"\",\n    previewDescription: \"\",\n    previewDataTitle: \"Preview Data\"\n};\nconst SettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    settings: defaultSettings,\n    loading: true,\n    error: null\n});\nconst useSettings = ()=>(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SettingsContext);\nconst SettingsProvider = ({ children })=>{\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultSettings);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Use a one-time query instead of a real-time listener\n        const fetchSettings = async ()=>{\n            try {\n                // Check if we have cached settings\n                const cachedSettings = localStorage.getItem(\"site_settings\");\n                const cacheTimestamp = localStorage.getItem(\"site_settings_timestamp\");\n                // Use cache if it's less than 15 minutes old\n                if (cachedSettings && cacheTimestamp) {\n                    const timestamp = parseInt(cacheTimestamp);\n                    const now = Date.now();\n                    const fifteenMinutes = 15 * 60 * 1000;\n                    if (now - timestamp < fifteenMinutes) {\n                        setSettings({\n                            ...defaultSettings,\n                            ...JSON.parse(cachedSettings)\n                        });\n                        setLoading(false);\n                        return;\n                    }\n                }\n                // Fetch from Firestore if no valid cache\n                const settingsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_3__.firestore, \"settings\", \"site\");\n                const docSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(settingsRef);\n                if (docSnapshot.exists()) {\n                    const settingsData = docSnapshot.data();\n                    setSettings({\n                        ...defaultSettings,\n                        ...settingsData\n                    });\n                    // Cache the settings\n                    localStorage.setItem(\"site_settings\", JSON.stringify(settingsData));\n                    localStorage.setItem(\"site_settings_timestamp\", Date.now().toString());\n                }\n                setLoading(false);\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n                console.error(\"Error fetching settings:\", error);\n                setError(error.message);\n                setLoading(false);\n                // Try to use cached settings even if they're older\n                const cachedSettings = localStorage.getItem(\"site_settings\");\n                if (cachedSettings) {\n                    setSettings({\n                        ...defaultSettings,\n                        ...JSON.parse(cachedSettings)\n                    });\n                }\n            }\n        };\n        fetchSettings();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SettingsContext.Provider, {\n        value: {\n            settings,\n            loading,\n            error\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\context\\\\SettingsContext.tsx\",\n        lineNumber: 115,\n        columnNumber: 5\n    }, undefined);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/context/SettingsContext.tsx\n");

/***/ }),

/***/ "./src/contexts/NotificationContext.tsx":
/*!**********************************************!*\
  !*** ./src/contexts/NotificationContext.tsx ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationProvider: () => (/* binding */ NotificationProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useNotifications: () => (/* binding */ useNotifications)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/context/AuthContext */ \"./src/context/AuthContext.tsx\");\n/* harmony import */ var _services_notificationService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/notificationService */ \"./src/services/notificationService.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _context_AuthContext__WEBPACK_IMPORTED_MODULE_3__, _services_notificationService__WEBPACK_IMPORTED_MODULE_4__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, _context_AuthContext__WEBPACK_IMPORTED_MODULE_3__, _services_notificationService__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n // Import Timestamp\n\n\nconst NotificationContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useNotifications = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NotificationContext);\n    if (context === undefined) {\n        throw new Error(\"useNotifications must be used within a NotificationProvider\");\n    }\n    return context;\n};\nconst NotificationProvider = ({ children })=>{\n    const { user } = (0,_context_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Convert system notification to UI notification format\n    const convertToUINotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((notification)=>{\n        // Map notification type to UI notification type\n        let uiType = \"system\";\n        switch(notification.type){\n            case \"course_progress\":\n                uiType = \"reminder\";\n                break;\n            case \"course_completion\":\n                uiType = \"course_completion\";\n                break;\n            case \"certificate_expiration\":\n                uiType = \"reminder\";\n                break;\n            case \"new_course_available\":\n                uiType = \"new_course\";\n                break;\n            case \"inactivity_reminder\":\n                uiType = \"reminder\";\n                break;\n            case \"enrollment_confirmation\":\n                uiType = \"system\";\n                break;\n            case \"quiz_completion\":\n                uiType = \"quiz_passed\";\n                break;\n            case \"achievement_unlocked\":\n                uiType = \"system\";\n                break;\n            case \"welcome_message\":\n                uiType = \"system\";\n                break;\n            default:\n                uiType = \"system\";\n        }\n        // Convert Firestore Timestamp to ISO string if it exists\n        const timestampString = notification.createdAt instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp ? notification.createdAt.toDate().toISOString() : typeof notification.createdAt === \"string\" ? notification.createdAt : new Date().toISOString(); // Fallback to current time if undefined\n        return {\n            id: notification.id,\n            type: uiType,\n            title: notification.title,\n            message: notification.message,\n            timestamp: timestampString,\n            isRead: notification.isRead,\n            link: notification.link,\n            data: notification.data,\n            priority: notification.priority === null || notification.priority === undefined ? undefined : notification.priority\n        };\n    }, []);\n    // Fetch notifications\n    const fetchNotifications = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!user?.id) {\n            setNotifications([]);\n            return;\n        }\n        setLoading(true);\n        try {\n            // Fetch notifications from Firestore\n            const systemNotifications = await (0,_services_notificationService__WEBPACK_IMPORTED_MODULE_4__.getUserNotifications)(user.id, 50);\n            // Convert to UI notifications\n            const uiNotifications = systemNotifications.map(convertToUINotification);\n            // Sort notifications by timestamp (newest first)\n            uiNotifications.sort((a, b)=>{\n                return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\n            });\n            setNotifications(uiNotifications);\n        } catch (error) {\n            console.error(\"Error fetching notifications:\", error);\n        } finally{\n            setLoading(false);\n        }\n    }, [\n        user,\n        convertToUINotification\n    ]);\n    // Fetch notifications when user changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchNotifications();\n    }, [\n        user\n    ]);\n    // Mark notification as read\n    const markAsRead = async (notificationId)=>{\n        try {\n            // Update in Firestore\n            await (0,_services_notificationService__WEBPACK_IMPORTED_MODULE_4__.markNotificationAsRead)(notificationId);\n            // Update local state\n            setNotifications((prev)=>prev.map((notification)=>notification.id === notificationId ? {\n                        ...notification,\n                        isRead: true\n                    } : notification));\n        } catch (error) {\n            console.error(\"Error marking notification as read:\", error);\n        }\n    };\n    // Mark all notifications as read\n    const markAllAsRead = async ()=>{\n        if (!user?.id) return;\n        try {\n            // Update in Firestore\n            await (0,_services_notificationService__WEBPACK_IMPORTED_MODULE_4__.markAllNotificationsAsRead)(user.id);\n            // Update local state\n            setNotifications((prev)=>prev.map((notification)=>({\n                        ...notification,\n                        isRead: true\n                    })));\n        } catch (error) {\n            console.error(\"Error marking all notifications as read:\", error);\n        }\n    };\n    // Delete notification\n    const deleteNotification = async (notificationId)=>{\n        try {\n            // Delete from Firestore\n            await (0,_services_notificationService__WEBPACK_IMPORTED_MODULE_4__.deleteNotification)(notificationId);\n            // Remove from local state\n            setNotifications((prev)=>prev.filter((notification)=>notification.id !== notificationId));\n        } catch (error) {\n            console.error(\"Error deleting notification:\", error);\n        }\n    };\n    // Calculate unread count\n    const unreadCount = notifications.filter((notification)=>!notification.isRead).length;\n    // Context value\n    const value = {\n        notifications,\n        unreadCount,\n        loading,\n        markAsRead,\n        markAllAsRead,\n        deleteNotification,\n        refreshNotifications: fetchNotifications\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NotificationContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\contexts\\\\NotificationContext.tsx\",\n        lineNumber: 208,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotificationContext);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contexts/NotificationContext.tsx\n");

/***/ }),

/***/ "./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_Inter_arguments_subsets_latin_variable_font_inter_variableName_inter___WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"src\\\\pages\\\\_app.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"} */ \"./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\pages\\\\\\\\_app.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-inter\\\"}],\\\"variableName\\\":\\\"inter\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_Inter_arguments_subsets_latin_variable_font_inter_variableName_inter___WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_src_pages_app_tsx_import_Inter_arguments_subsets_latin_variable_font_inter_variableName_inter___WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_Montserrat_arguments_subsets_latin_variable_font_montserrat_variableName_montserrat___WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"src\\\\pages\\\\_app.tsx\",\"import\":\"Montserrat\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-montserrat\"}],\"variableName\":\"montserrat\"} */ \"./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\pages\\\\\\\\_app.tsx\\\",\\\"import\\\":\\\"Montserrat\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-montserrat\\\"}],\\\"variableName\\\":\\\"montserrat\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_Montserrat_arguments_subsets_latin_variable_font_montserrat_variableName_montserrat___WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_src_pages_app_tsx_import_Montserrat_arguments_subsets_latin_variable_font_montserrat_variableName_montserrat___WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_JetBrains_Mono_arguments_subsets_latin_variable_font_jetbrains_mono_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"src\\\\pages\\\\_app.tsx\",\"import\":\"JetBrains_Mono\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-jetbrains-mono\"}],\"variableName\":\"jetbrainsMono\"} */ \"./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\pages\\\\\\\\_app.tsx\\\",\\\"import\\\":\\\"JetBrains_Mono\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-jetbrains-mono\\\"}],\\\"variableName\\\":\\\"jetbrainsMono\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_src_pages_app_tsx_import_JetBrains_Mono_arguments_subsets_latin_variable_font_jetbrains_mono_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_src_pages_app_tsx_import_JetBrains_Mono_arguments_subsets_latin_variable_font_jetbrains_mono_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/styles/globals.css */ \"./src/styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-hot-toast */ \"react-hot-toast\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/styles */ \"@mui/material/styles\");\n/* harmony import */ var _mui_material_CssBaseline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/CssBaseline */ \"@mui/material/CssBaseline\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"@emotion/react\");\n/* harmony import */ var _utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/createEmotionCache */ \"./src/utils/createEmotionCache.ts\");\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/context/AuthContext */ \"./src/context/AuthContext.tsx\");\n/* harmony import */ var _context_CourseContext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/context/CourseContext */ \"./src/context/CourseContext.tsx\");\n/* harmony import */ var _contexts_NotificationContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/contexts/NotificationContext */ \"./src/contexts/NotificationContext.tsx\");\n/* harmony import */ var _context_SettingsContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/context/SettingsContext */ \"./src/context/SettingsContext.tsx\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"@tanstack/react-query\");\n/* harmony import */ var _tanstack_react_query_devtools__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query-devtools */ \"@tanstack/react-query-devtools\");\n/* harmony import */ var _utils_queryClient__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/utils/queryClient */ \"./src/utils/queryClient.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_hot_toast__WEBPACK_IMPORTED_MODULE_3__, _mui_material_styles__WEBPACK_IMPORTED_MODULE_4__, _mui_material_CssBaseline__WEBPACK_IMPORTED_MODULE_5__, _emotion_react__WEBPACK_IMPORTED_MODULE_6__, _utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_7__, _context_AuthContext__WEBPACK_IMPORTED_MODULE_8__, _context_CourseContext__WEBPACK_IMPORTED_MODULE_9__, _contexts_NotificationContext__WEBPACK_IMPORTED_MODULE_10__, _context_SettingsContext__WEBPACK_IMPORTED_MODULE_11__, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__, _tanstack_react_query_devtools__WEBPACK_IMPORTED_MODULE_13__, _utils_queryClient__WEBPACK_IMPORTED_MODULE_14__]);\n([react_hot_toast__WEBPACK_IMPORTED_MODULE_3__, _mui_material_styles__WEBPACK_IMPORTED_MODULE_4__, _mui_material_CssBaseline__WEBPACK_IMPORTED_MODULE_5__, _emotion_react__WEBPACK_IMPORTED_MODULE_6__, _utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_7__, _context_AuthContext__WEBPACK_IMPORTED_MODULE_8__, _context_CourseContext__WEBPACK_IMPORTED_MODULE_9__, _contexts_NotificationContext__WEBPACK_IMPORTED_MODULE_10__, _context_SettingsContext__WEBPACK_IMPORTED_MODULE_11__, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__, _tanstack_react_query_devtools__WEBPACK_IMPORTED_MODULE_13__, _utils_queryClient__WEBPACK_IMPORTED_MODULE_14__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Client-side cache\nconst clientSideEmotionCache = (0,_utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n// Create MUI theme\nconst theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.responsiveFontSizes)((0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.createTheme)({\n    palette: {\n        primary: {\n            main: \"#3f51b5\"\n        },\n        secondary: {\n            main: \"#f50057\"\n        }\n    },\n    typography: {\n        fontFamily: \"var(--font-inter), sans-serif\",\n        h1: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        },\n        h2: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        },\n        h3: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        },\n        h4: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        },\n        h5: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        },\n        h6: {\n            fontFamily: \"var(--font-montserrat), sans-serif\"\n        }\n    },\n    components: {\n        MuiButtonBase: {\n            defaultProps: {\n                disableRipple: true\n            }\n        }\n    }\n}));\nfunction App({ Component, pageProps, emotionCache = clientSideEmotionCache }) {\n    // Create the query client - only once when the component mounts\n    // Using lazy initialization to ensure it only runs on the client side\n    const [queryClient, setQueryClient] = react__WEBPACK_IMPORTED_MODULE_2___default().useState(null);\n    // Initialize the query client on the client side only\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        // Create the query client only on the client side\n        setQueryClient((0,_utils_queryClient__WEBPACK_IMPORTED_MODULE_14__.createQueryClient)());\n        // Remove the server-side injected CSS\n        const jssStyles = document.querySelector(\"#jss-server-side\");\n        if (jssStyles?.parentElement) {\n            jssStyles.parentElement.removeChild(jssStyles);\n        }\n    }, []);\n    // Don't render the app until the query client is initialized on the client side\n    // This prevents hydration errors and ensures Firestore persistence is properly set up\n    if (!queryClient) {\n        // Return a minimal loading state that won't cause hydration issues\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react__WEBPACK_IMPORTED_MODULE_6__.CacheProvider, {\n            value: emotionCache,\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    visibility: \"hidden\"\n                },\n                children: \"Loading...\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                lineNumber: 97,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n            lineNumber: 96,\n            columnNumber: 7\n        }, this);\n    }\n    // Once the query client is initialized, render the full app\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react__WEBPACK_IMPORTED_MODULE_6__.CacheProvider, {\n        value: emotionCache,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.QueryClientProvider, {\n            client: queryClient,\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.StyledEngineProvider, {\n                    injectFirst: true,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.ThemeProvider, {\n                        theme: theme,\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material_CssBaseline__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                lineNumber: 108,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_AuthContext__WEBPACK_IMPORTED_MODULE_8__.AuthProvider, {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_SettingsContext__WEBPACK_IMPORTED_MODULE_11__.SettingsProvider, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_CourseContext__WEBPACK_IMPORTED_MODULE_9__.CourseProvider, {\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_NotificationContext__WEBPACK_IMPORTED_MODULE_10__.NotificationProvider, {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                                                className: `${(next_font_google_target_css_path_src_pages_app_tsx_import_Inter_arguments_subsets_latin_variable_font_inter_variableName_inter___WEBPACK_IMPORTED_MODULE_15___default().variable)} ${(next_font_google_target_css_path_src_pages_app_tsx_import_Montserrat_arguments_subsets_latin_variable_font_montserrat_variableName_montserrat___WEBPACK_IMPORTED_MODULE_16___default().variable)} ${(next_font_google_target_css_path_src_pages_app_tsx_import_JetBrains_Mono_arguments_subsets_latin_variable_font_jetbrains_mono_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_17___default().variable)}`,\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                                                        ...pageProps\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                                        lineNumber: 114,\n                                                        columnNumber: 23\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_hot_toast__WEBPACK_IMPORTED_MODULE_3__.Toaster, {\n                                                        position: \"top-right\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                                        lineNumber: 115,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                                lineNumber: 113,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                            lineNumber: 112,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                        lineNumber: 111,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                    lineNumber: 110,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                                lineNumber: 109,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                        lineNumber: 107,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                    lineNumber: 106,\n                    columnNumber: 9\n                }, this),\n                 true && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tanstack_react_query_devtools__WEBPACK_IMPORTED_MODULE_13__.ReactQueryDevtools, {}, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n                    lineNumber: 123,\n                    columnNumber: 52\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n            lineNumber: 105,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_app.tsx\",\n        lineNumber: 104,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/_app.tsx\n");

/***/ }),

/***/ "./src/pages/_document.tsx":
/*!*********************************!*\
  !*** ./src/pages/_document.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MyDocument)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/document */ \"./node_modules/next/document.js\");\n/* harmony import */ var next_document__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_document__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/createEmotionCache */ \"./src/utils/createEmotionCache.ts\");\n/* harmony import */ var _emotion_server_create_instance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/server/create-instance */ \"@emotion/server/create-instance\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_3__, _emotion_server_create_instance__WEBPACK_IMPORTED_MODULE_4__]);\n([_utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_3__, _emotion_server_create_instance__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nclass MyDocument extends (next_document__WEBPACK_IMPORTED_MODULE_2___default()) {\n    render() {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_2__.Html, {\n            lang: \"en\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_2__.Head, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                            name: \"description\",\n                            content: \"Closer College Training Platform - AI-powered sales training\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                            lineNumber: 11,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                            rel: \"icon\",\n                            href: \"/favicon.ico\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                            lineNumber: 12,\n                            columnNumber: 11\n                        }, this),\n                        this.props.emotionStyleTags\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                    lineNumber: 10,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_2__.Main, {}, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                            lineNumber: 17,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_2__.NextScript, {}, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                            lineNumber: 18,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                    lineNumber: 16,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n            lineNumber: 9,\n            columnNumber: 7\n        }, this);\n    }\n}\n// `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with static-site generation (SSG).\nMyDocument.getInitialProps = async (ctx)=>{\n    // Resolution order\n    //\n    // On the server:\n    // 1. app.getInitialProps\n    // 2. page.getInitialProps\n    // 3. document.getInitialProps\n    // 4. app.render\n    // 5. page.render\n    // 6. document.render\n    //\n    // On the server with error:\n    // 1. document.getInitialProps\n    // 2. app.render\n    // 3. page.render\n    // 4. document.render\n    //\n    // On the client\n    // 1. app.getInitialProps\n    // 2. page.getInitialProps\n    // 3. app.render\n    // 4. page.render\n    const originalRenderPage = ctx.renderPage;\n    // You can consider sharing the same Emotion cache between all the SSR requests to speed up performance.\n    // However, be aware that it can have global side effects.\n    const cache = (0,_utils_createEmotionCache__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const { extractCriticalToChunks } = (0,_emotion_server_create_instance__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(cache);\n    ctx.renderPage = ()=>originalRenderPage({\n            enhanceApp: (App)=>(props)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(App, {\n                        emotionCache: cache,\n                        ...props\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n                        lineNumber: 59,\n                        columnNumber: 44\n                    }, undefined)\n        });\n    const initialProps = await next_document__WEBPACK_IMPORTED_MODULE_2___default().getInitialProps(ctx);\n    // This is important. It prevents Emotion to render invalid HTML.\n    // See https://github.com/mui/material-ui/issues/26561#issuecomment-855286153\n    const emotionStyles = extractCriticalToChunks(initialProps.html);\n    const emotionStyleTags = emotionStyles.styles.map((style)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"style\", {\n            \"data-emotion\": `${style.key} ${style.ids.join(\" \")}`,\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML: {\n                __html: style.css\n            }\n        }, style.key, false, {\n            fileName: \"C:\\\\Users\\\\egcha\\\\Documents\\\\triniloyalty.backup2\\\\SALESCOACHAIIDX2.51-main\\\\training-platform\\\\src\\\\pages\\\\_document.tsx\",\n            lineNumber: 67,\n            columnNumber: 5\n        }, undefined));\n    return {\n        ...initialProps,\n        emotionStyleTags\n    };\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2RvY3VtZW50LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ3VDO0FBQ1Q7QUFDSztBQUVuRCxNQUFNUSxtQkFBbUJQLHNEQUFRQTtJQUM5Q1EsU0FBUztRQUNQLHFCQUNFLDhEQUFDUCwrQ0FBSUE7WUFBQ1EsTUFBSzs7OEJBQ1QsOERBQUNQLCtDQUFJQTs7c0NBQ0gsOERBQUNROzRCQUFLQyxNQUFLOzRCQUFjQyxTQUFROzs7Ozs7c0NBQ2pDLDhEQUFDQzs0QkFBS0MsS0FBSTs0QkFBT0MsTUFBSzs7Ozs7O3dCQUVwQixJQUFJLENBQUNDLEtBQUssQ0FBU0MsZ0JBQWdCOzs7Ozs7OzhCQUV2Qyw4REFBQ0M7O3NDQUNDLDhEQUFDZiwrQ0FBSUE7Ozs7O3NDQUNMLDhEQUFDQyxxREFBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSXJCO0FBQ0E7QUFFQSxnRUFBZ0U7QUFDaEUscURBQXFEO0FBQ3JERyxXQUFXWSxlQUFlLEdBQUcsT0FBT0M7SUFDbEMsbUJBQW1CO0lBQ25CLEVBQUU7SUFDRixpQkFBaUI7SUFDakIseUJBQXlCO0lBQ3pCLDBCQUEwQjtJQUMxQiw4QkFBOEI7SUFDOUIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsRUFBRTtJQUNGLDRCQUE0QjtJQUM1Qiw4QkFBOEI7SUFDOUIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsRUFBRTtJQUNGLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsMEJBQTBCO0lBQzFCLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFFakIsTUFBTUMscUJBQXFCRCxJQUFJRSxVQUFVO0lBRXpDLHdHQUF3RztJQUN4RywwREFBMEQ7SUFDMUQsTUFBTUMsUUFBUWxCLHFFQUFrQkE7SUFDaEMsTUFBTSxFQUFDbUIsdUJBQXVCLEVBQUUsR0FBR2xCLDJFQUFtQkEsQ0FBQ2lCO0lBRXZESCxJQUFJRSxVQUFVLEdBQUcsSUFDZkQsbUJBQW1CO1lBQ2pCSSxZQUFZLENBQUNDLE1BQWEsQ0FBQ1Ysc0JBQVUsOERBQUNVO3dCQUFJQyxjQUFjSjt3QkFBUSxHQUFHUCxLQUFLOzs7Ozs7UUFDNUU7SUFFQSxNQUFNWSxlQUFlLE1BQU01QixvRUFBd0IsQ0FBQ29CO0lBQ3BELGlFQUFpRTtJQUNqRSw2RUFBNkU7SUFDN0UsTUFBTVMsZ0JBQWdCTCx3QkFBd0JJLGFBQWFFLElBQUk7SUFDL0QsTUFBTWIsbUJBQW1CWSxjQUFjRSxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxzQkFDakQsOERBQUNBO1lBQ0NDLGdCQUFjLENBQUMsRUFBRUQsTUFBTUUsR0FBRyxDQUFDLENBQUMsRUFBRUYsTUFBTUcsR0FBRyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRW5ELDJDQUEyQztZQUMzQ0MseUJBQXlCO2dCQUFDQyxRQUFRTixNQUFNTyxHQUFHO1lBQUM7V0FGdkNQLE1BQU1FLEdBQUc7Ozs7O0lBTWxCLE9BQU87UUFDTCxHQUFHUCxZQUFZO1FBQ2ZYO0lBQ0o7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWluaW5nLXBsYXRmb3JtLy4vc3JjL3BhZ2VzL19kb2N1bWVudC50c3g/MTg4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRG9jdW1lbnQsIHtIdG1sLCBIZWFkLCBNYWluLCBOZXh0U2NyaXB0IH0gZnJvbSAnbmV4dC9kb2N1bWVudCc7XG5pbXBvcnQgY3JlYXRlRW1vdGlvbkNhY2hlIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUVtb3Rpb25DYWNoZSc7XG5pbXBvcnQgY3JlYXRlRW1vdGlvblNlcnZlciBmcm9tICdAZW1vdGlvbi9zZXJ2ZXIvY3JlYXRlLWluc3RhbmNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlEb2N1bWVudCBleHRlbmRzIERvY3VtZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8SHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIkNsb3NlciBDb2xsZWdlIFRyYWluaW5nIFBsYXRmb3JtIC0gQUktcG93ZXJlZCBzYWxlcyB0cmFpbmluZ1wiIC8+XG4gICAgICAgICAgPGxpbmsgcmVsPVwiaWNvblwiIGhyZWY9XCIvZmF2aWNvbi5pY29cIiAvPlxuICAgICAgICAgIHsvKiBJbmplY3QgTVVJIHN0eWxlcyBmaXJzdCB0byBtYXRjaCB3aXRoIHRoZSBwcmVwZW5kOiB0cnVlIGNvbmZpZ3VyYXRpb24uICovfVxuICAgICAgICAgIHsodGhpcy5wcm9wcyBhcyBhbnkpLmVtb3Rpb25TdHlsZVRhZ3N9XG4gICAgICAgIDwvSGVhZD5cbiAgICAgICAgPGJvZHk+XG4gICAgICAgICAgPE1haW4gLz5cbiAgICAgICAgICA8TmV4dFNjcmlwdCAvPlxuICAgICAgICA8L2JvZHk+XG4gICAgICA8L0h0bWw+XG4gICAgKTtcbn1cbn1cblxuLy8gYGdldEluaXRpYWxQcm9wc2AgYmVsb25ncyB0byBgX2RvY3VtZW50YCAoaW5zdGVhZCBvZiBgX2FwcGApLFxuLy8gaXQncyBjb21wYXRpYmxlIHdpdGggc3RhdGljLXNpdGUgZ2VuZXJhdGlvbiAoU1NHKS5cbk15RG9jdW1lbnQuZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgKGN0eCkgPT4ge1xuICAvLyBSZXNvbHV0aW9uIG9yZGVyXG4gIC8vXG4gIC8vIE9uIHRoZSBzZXJ2ZXI6XG4gIC8vIDEuIGFwcC5nZXRJbml0aWFsUHJvcHNcbiAgLy8gMi4gcGFnZS5nZXRJbml0aWFsUHJvcHNcbiAgLy8gMy4gZG9jdW1lbnQuZ2V0SW5pdGlhbFByb3BzXG4gIC8vIDQuIGFwcC5yZW5kZXJcbiAgLy8gNS4gcGFnZS5yZW5kZXJcbiAgLy8gNi4gZG9jdW1lbnQucmVuZGVyXG4gIC8vXG4gIC8vIE9uIHRoZSBzZXJ2ZXIgd2l0aCBlcnJvcjpcbiAgLy8gMS4gZG9jdW1lbnQuZ2V0SW5pdGlhbFByb3BzXG4gIC8vIDIuIGFwcC5yZW5kZXJcbiAgLy8gMy4gcGFnZS5yZW5kZXJcbiAgLy8gNC4gZG9jdW1lbnQucmVuZGVyXG4gIC8vXG4gIC8vIE9uIHRoZSBjbGllbnRcbiAgLy8gMS4gYXBwLmdldEluaXRpYWxQcm9wc1xuICAvLyAyLiBwYWdlLmdldEluaXRpYWxQcm9wc1xuICAvLyAzLiBhcHAucmVuZGVyXG4gIC8vIDQuIHBhZ2UucmVuZGVyXG5cbiAgY29uc3Qgb3JpZ2luYWxSZW5kZXJQYWdlID0gY3R4LnJlbmRlclBhZ2U7XG5cbiAgLy8gWW91IGNhbiBjb25zaWRlciBzaGFyaW5nIHRoZSBzYW1lIEVtb3Rpb24gY2FjaGUgYmV0d2VlbiBhbGwgdGhlIFNTUiByZXF1ZXN0cyB0byBzcGVlZCB1cCBwZXJmb3JtYW5jZS5cbiAgLy8gSG93ZXZlciwgYmUgYXdhcmUgdGhhdCBpdCBjYW4gaGF2ZSBnbG9iYWwgc2lkZSBlZmZlY3RzLlxuICBjb25zdCBjYWNoZSA9IGNyZWF0ZUVtb3Rpb25DYWNoZSgpO1xuICBjb25zdCB7ZXh0cmFjdENyaXRpY2FsVG9DaHVua3MgfSA9IGNyZWF0ZUVtb3Rpb25TZXJ2ZXIoY2FjaGUpO1xuXG4gIGN0eC5yZW5kZXJQYWdlID0gKCkgPT5cbiAgICBvcmlnaW5hbFJlbmRlclBhZ2Uoe1xuICAgICAgZW5oYW5jZUFwcDogKEFwcDogYW55KSA9PiAocHJvcHMpID0+IDxBcHAgZW1vdGlvbkNhY2hlPXtjYWNoZX0gey4uLnByb3BzfSAvPixcbiAgfSk7XG5cbiAgY29uc3QgaW5pdGlhbFByb3BzID0gYXdhaXQgRG9jdW1lbnQuZ2V0SW5pdGlhbFByb3BzKGN0eCk7XG4gIC8vIFRoaXMgaXMgaW1wb3J0YW50LiBJdCBwcmV2ZW50cyBFbW90aW9uIHRvIHJlbmRlciBpbnZhbGlkIEhUTUwuXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8yNjU2MSNpc3N1ZWNvbW1lbnQtODU1Mjg2MTUzXG4gIGNvbnN0IGVtb3Rpb25TdHlsZXMgPSBleHRyYWN0Q3JpdGljYWxUb0NodW5rcyhpbml0aWFsUHJvcHMuaHRtbCk7XG4gIGNvbnN0IGVtb3Rpb25TdHlsZVRhZ3MgPSBlbW90aW9uU3R5bGVzLnN0eWxlcy5tYXAoKHN0eWxlKSA9PiAoXG4gICAgPHN0eWxlXG4gICAgICBkYXRhLWVtb3Rpb249e2Ake3N0eWxlLmtleX0gJHtzdHlsZS5pZHMuam9pbignICcpfWB9XG4gICAgICBrZXk9e3N0eWxlLmtleX1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBzdHlsZS5jc3MgfX1cbiAgICAvPlxuICApKTtcblxuICByZXR1cm4ge1xuICAgIC4uLmluaXRpYWxQcm9wcyxcbiAgICBlbW90aW9uU3R5bGVUYWdzLFxufTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJEb2N1bWVudCIsIkh0bWwiLCJIZWFkIiwiTWFpbiIsIk5leHRTY3JpcHQiLCJjcmVhdGVFbW90aW9uQ2FjaGUiLCJjcmVhdGVFbW90aW9uU2VydmVyIiwiTXlEb2N1bWVudCIsInJlbmRlciIsImxhbmciLCJtZXRhIiwibmFtZSIsImNvbnRlbnQiLCJsaW5rIiwicmVsIiwiaHJlZiIsInByb3BzIiwiZW1vdGlvblN0eWxlVGFncyIsImJvZHkiLCJnZXRJbml0aWFsUHJvcHMiLCJjdHgiLCJvcmlnaW5hbFJlbmRlclBhZ2UiLCJyZW5kZXJQYWdlIiwiY2FjaGUiLCJleHRyYWN0Q3JpdGljYWxUb0NodW5rcyIsImVuaGFuY2VBcHAiLCJBcHAiLCJlbW90aW9uQ2FjaGUiLCJpbml0aWFsUHJvcHMiLCJlbW90aW9uU3R5bGVzIiwiaHRtbCIsInN0eWxlcyIsIm1hcCIsInN0eWxlIiwiZGF0YS1lbW90aW9uIiwia2V5IiwiaWRzIiwiam9pbiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiY3NzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_document.tsx\n");

/***/ }),

/***/ "./src/services/blockchainService.ts":
/*!*******************************************!*\
  !*** ./src/services/blockchainService.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateCertificateHash: () => (/* binding */ generateCertificateHash),\n/* harmony export */   getBlockchainVerification: () => (/* binding */ getBlockchainVerification),\n/* harmony export */   registerAllCertificatesOnBlockchain: () => (/* binding */ registerAllCertificatesOnBlockchain),\n/* harmony export */   registerCertificateOnBlockchain: () => (/* binding */ registerCertificateOnBlockchain),\n/* harmony export */   verifyBlockchainCertificate: () => (/* binding */ verifyBlockchainCertificate)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"./src/services/firebase.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n/**\n * Generate a hash for a certificate\n */ const generateCertificateHash = (certificate)=>{\n    // Create a deterministic string representation of the certificate\n    const certificateData = JSON.stringify({\n        id: certificate.id,\n        userId: certificate.userId,\n        courseId: certificate.courseId,\n        courseName: certificate.courseName,\n        userName: certificate.userName,\n        issueDate: certificate.issueDate,\n        templateId: certificate.templateId,\n        verificationCode: certificate.verificationCode\n    });\n    // Generate SHA-256 hash\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_2__.createHash)(\"sha256\").update(certificateData).digest(\"hex\");\n};\n/**\n * Register a certificate on the blockchain\n * Note: In a real implementation, this would interact with an actual blockchain\n */ const registerCertificateOnBlockchain = async (certificate)=>{\n    try {\n        // Generate certificate hash\n        const certificateHash = generateCertificateHash(certificate);\n        // Check if certificate is already registered\n        const existingVerification = await getBlockchainVerification(certificate.id);\n        if (existingVerification) {\n            return existingVerification;\n        }\n        // Create blockchain verification record\n        const verificationId = certificate.id;\n        const verificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"blockchainVerifications\", verificationId);\n        // In a real implementation, this would submit the hash to a blockchain\n        // For now, we'll simulate a successful registration\n        const timestamp = new Date().toISOString();\n        // Simulate blockchain transaction data\n        const blockchainData = {\n            transactionId: `tx_${Math.random().toString(36).substring(2, 15)}`,\n            blockNumber: Math.floor(Math.random() * 1000000),\n            blockchainProvider: \"Ethereum\",\n            blockchainNetwork: \"Rinkeby Testnet\",\n            verificationUrl: `https://rinkeby.etherscan.io/tx/${Math.random().toString(36).substring(2, 15)}`\n        };\n        const verification = {\n            id: verificationId,\n            certificateId: certificate.id,\n            certificateHash,\n            transactionId: blockchainData.transactionId,\n            blockchainProvider: blockchainData.blockchainProvider,\n            blockchainNetwork: blockchainData.blockchainNetwork,\n            blockNumber: blockchainData.blockNumber,\n            timestamp,\n            status: \"verified\",\n            verificationUrl: blockchainData.verificationUrl\n        };\n        // Save verification record\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(verificationRef, {\n            ...verification,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        // Update certificate with blockchain verification\n        const certificateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"certificates\", certificate.id);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(certificateRef, {\n            blockchainVerified: true,\n            blockchainVerificationId: verificationId,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return verification;\n    } catch (error) {\n        console.error(\"Error registering certificate on blockchain:\", error);\n        return null;\n    }\n};\n/**\n * Get blockchain verification for a certificate\n */ const getBlockchainVerification = async (certificateId)=>{\n    try {\n        const verificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"blockchainVerifications\", certificateId);\n        const verificationSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(verificationRef);\n        if (!verificationSnapshot.exists()) {\n            return null;\n        }\n        return {\n            id: verificationSnapshot.id,\n            ...verificationSnapshot.data()\n        };\n    } catch (error) {\n        console.error(\"Error getting blockchain verification:\", error);\n        return null;\n    }\n};\n/**\n * Verify a certificate against the blockchain\n */ const verifyBlockchainCertificate = async (certificate)=>{\n    try {\n        // Get blockchain verification\n        const verification = await getBlockchainVerification(certificate.id);\n        if (!verification) {\n            return {\n                isValid: false,\n                message: \"Certificate is not registered on the blockchain\"\n            };\n        }\n        // Generate certificate hash\n        const certificateHash = generateCertificateHash(certificate);\n        // Compare hashes\n        if (certificateHash !== verification.certificateHash) {\n            return {\n                isValid: false,\n                message: \"Certificate hash does not match blockchain record\",\n                verification\n            };\n        }\n        return {\n            isValid: true,\n            message: \"Certificate is verified on the blockchain\",\n            verification\n        };\n    } catch (error) {\n        console.error(\"Error verifying certificate on blockchain:\", error);\n        return {\n            isValid: false,\n            message: \"Error verifying certificate on blockchain\"\n        };\n    }\n};\n/**\n * Register all unregistered certificates on the blockchain\n */ const registerAllCertificatesOnBlockchain = async (certificates)=>{\n    let success = 0;\n    let failed = 0;\n    for (const certificate of certificates){\n        try {\n            const result = await registerCertificateOnBlockchain(certificate);\n            if (result) {\n                success++;\n            } else {\n                failed++;\n            }\n        } catch (error) {\n            console.error(`Error registering certificate ${certificate.id} on blockchain:`, error);\n            failed++;\n        }\n    }\n    return {\n        success,\n        failed,\n        total: certificates.length\n    };\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/blockchainService.ts\n");

/***/ }),

/***/ "./src/services/certificateService.ts":
/*!********************************************!*\
  !*** ./src/services/certificateService.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCertificateTemplate: () => (/* binding */ createCertificateTemplate),\n/* harmony export */   generateCertificate: () => (/* binding */ generateCertificate),\n/* harmony export */   generateQRCode: () => (/* binding */ generateQRCode),\n/* harmony export */   getCertificate: () => (/* binding */ getCertificate),\n/* harmony export */   getCertificateTemplate: () => (/* binding */ getCertificateTemplate),\n/* harmony export */   getCertificateTemplates: () => (/* binding */ getCertificateTemplates),\n/* harmony export */   getCourseCertificates: () => (/* binding */ getCourseCertificates),\n/* harmony export */   getDefaultCertificateTemplate: () => (/* binding */ getDefaultCertificateTemplate),\n/* harmony export */   getUserCertificates: () => (/* binding */ getUserCertificates),\n/* harmony export */   revokeCertificate: () => (/* binding */ revokeCertificate),\n/* harmony export */   searchCertificates: () => (/* binding */ searchCertificates),\n/* harmony export */   updateCertificateTemplate: () => (/* binding */ updateCertificateTemplate),\n/* harmony export */   verifyCertificate: () => (/* binding */ verifyCertificate)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/storage */ \"firebase/storage\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firebase */ \"./src/services/firebase.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var _utils_pdfGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/pdfGenerator */ \"./src/utils/pdfGenerator.ts\");\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! qrcode */ \"qrcode\");\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(qrcode__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _blockchainService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blockchainService */ \"./src/services/blockchainService.ts\");\n/* harmony import */ var _utils_digitalSignature__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/digitalSignature */ \"./src/utils/digitalSignature.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, firebase_storage__WEBPACK_IMPORTED_MODULE_1__, _firebase__WEBPACK_IMPORTED_MODULE_2__, uuid__WEBPACK_IMPORTED_MODULE_3__, _blockchainService__WEBPACK_IMPORTED_MODULE_6__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, firebase_storage__WEBPACK_IMPORTED_MODULE_1__, _firebase__WEBPACK_IMPORTED_MODULE_2__, uuid__WEBPACK_IMPORTED_MODULE_3__, _blockchainService__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n/**\n * Get a certificate template by ID\n */ const getCertificateTemplate = async (templateId)=>{\n    try {\n        const templateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateTemplates\", templateId);\n        const templateSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(templateRef);\n        if (!templateSnapshot.exists()) {\n            return null;\n        }\n        return {\n            id: templateSnapshot.id,\n            ...templateSnapshot.data()\n        };\n    } catch (error) {\n        console.error(\"Error getting certificate template:\", error);\n        return null;\n    }\n};\n/**\n * Get all certificate templates\n */ const getCertificateTemplates = async ()=>{\n    try {\n        const templatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateTemplates\");\n        const templatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(templatesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"createdAt\", \"desc\"));\n        const templatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(templatesQuery);\n        const templates = [];\n        templatesSnapshot.forEach((doc)=>{\n            templates.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return templates;\n    } catch (error) {\n        console.error(\"Error getting certificate templates:\", error);\n        return [];\n    }\n};\n/**\n * Get the default certificate template\n */ const getDefaultCertificateTemplate = async ()=>{\n    try {\n        const templatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateTemplates\");\n        const templatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(templatesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isDefault\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(1));\n        const templatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(templatesQuery);\n        if (templatesSnapshot.empty) {\n            return null;\n        }\n        const templateDoc = templatesSnapshot.docs[0];\n        return {\n            id: templateDoc.id,\n            ...templateDoc.data()\n        };\n    } catch (error) {\n        console.error(\"Error getting default certificate template:\", error);\n        return null;\n    }\n};\n/**\n * Create a new certificate template\n */ const createCertificateTemplate = async (template)=>{\n    try {\n        const templateId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n        const templateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateTemplates\", templateId);\n        const now = new Date().toISOString();\n        const newTemplate = {\n            ...template,\n            createdAt: now,\n            updatedAt: now\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(templateRef, {\n            ...newTemplate,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return {\n            id: templateId,\n            ...newTemplate\n        };\n    } catch (error) {\n        console.error(\"Error creating certificate template:\", error);\n        return null;\n    }\n};\n/**\n * Update a certificate template\n */ const updateCertificateTemplate = async (templateId, template)=>{\n    try {\n        const templateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateTemplates\", templateId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(templateRef, {\n            ...template,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error updating certificate template:\", error);\n        return false;\n    }\n};\n/**\n * Generate a certificate for a user who completed a course\n */ const generateCertificate = async (options)=>{\n    try {\n        const { templateId, userId, courseId, values = {}, expiryDate, metadata: inputMetadata = {}, isPublic = false } = options;\n        const metadata = {\n            completionDate: new Date().toISOString(),\n            ...inputMetadata\n        };\n        // Ensure metadata has required completionDate\n        if (!metadata.completionDate) {\n            metadata.completionDate = new Date().toISOString();\n        }\n        // Get the template\n        const template = await getCertificateTemplate(templateId);\n        if (!template) {\n            throw new Error(\"Certificate template not found\");\n        }\n        // Get the user\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"users\", userId);\n        const userSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (!userSnapshot.exists()) {\n            throw new Error(\"User not found\");\n        }\n        const userData = userSnapshot.data();\n        // Get the course\n        const courseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"courses\", courseId);\n        const courseSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(courseRef);\n        if (!courseSnapshot.exists()) {\n            throw new Error(\"Course not found\");\n        }\n        const courseData = courseSnapshot.data();\n        // Generate a unique certificate ID\n        const certificateId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n        // Generate a verification code\n        const verificationCode = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n        // Create the verification URL\n        const verificationUrl = `${process.env.NEXT_PUBLIC_SITE_URL || \"\"}/verify-certificate/${verificationCode}`;\n        // Generate QR code for verification URL\n        const qrCodeDataUrl = await generateQRCode(verificationUrl);\n        // Current date\n        const now = new Date().toISOString();\n        // Merge default values with provided values\n        const mergedValues = {\n            ...template.defaultValues,\n            studentName: userData.displayName || userData.email || \"Student\",\n            courseName: courseData.title || \"Course\",\n            issueDate: now,\n            certificateId,\n            verificationCode,\n            verificationUrl,\n            qrCode: qrCodeDataUrl,\n            ...values\n        };\n        // Generate the certificate HTML\n        let certificateHtml = template.content;\n        // Replace placeholders with actual values\n        Object.entries(mergedValues).forEach(([key, value])=>{\n            certificateHtml = certificateHtml.replace(new RegExp(`{{${key}}}`, \"g\"), value);\n        });\n        // Generate PDF from HTML\n        const pdfBuffer = await (0,_utils_pdfGenerator__WEBPACK_IMPORTED_MODULE_4__.generatePDF)(certificateHtml, {\n            format: \"A4\",\n            landscape: true,\n            margin: {\n                top: \"1cm\",\n                bottom: \"1cm\",\n                left: \"1cm\",\n                right: \"1cm\"\n            }\n        });\n        // Upload PDF to storage\n        const pdfRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_2__.storage, `certificates/${certificateId}.pdf`);\n        await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.uploadString)(pdfRef, pdfBuffer.toString(\"base64\"), \"base64\");\n        // Get download URL\n        const downloadUrl = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.getDownloadURL)(pdfRef);\n        // Create certificate record with all required fields\n        const certificateData = {\n            userId,\n            userName: userData.displayName || userData.email || \"Student\",\n            courseId,\n            courseName: courseData.title || \"Course\",\n            templateId,\n            issueDate: now,\n            expiryDate: expiryDate || undefined,\n            values: mergedValues,\n            status: \"issued\",\n            verificationCode,\n            verificationUrl,\n            downloadUrl: downloadUrl || \"\",\n            qrCodeUrl: qrCodeDataUrl || \"\",\n            metadata,\n            createdAt: now,\n            isPublic: isPublic || false,\n            pdfUrl: downloadUrl || \"\",\n            thumbnailUrl: \"\",\n            blockchainVerified: false,\n            digitalSignature: undefined\n        };\n        // Generate digital signature for the certificate\n        const signatureData = {\n            id: certificateId,\n            userId,\n            courseId,\n            templateId,\n            issueDate: now,\n            verificationCode\n        };\n        const digitalSignature = (0,_utils_digitalSignature__WEBPACK_IMPORTED_MODULE_7__.generateSignature)(signatureData);\n        // Add digital signature to certificate data\n        certificateData.digitalSignature = digitalSignature || undefined;\n        const certificate = {\n            id: certificateId,\n            ...certificateData\n        };\n        // Save certificate to Firestore\n        const certificateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\", certificateId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(certificateRef, {\n            ...certificate,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        // Update user's course progress to include certificate\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            certificateId,\n            certificateIssueDate: now,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        // Update certificate stats\n        const statsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateStats\", templateId);\n        const statsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(statsRef);\n        if (statsSnapshot.exists()) {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(statsRef, {\n                totalIssued: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.increment)(1),\n                lastIssued: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                coursesUsed: courseId\n            });\n        } else {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(statsRef, {\n                templateId,\n                totalIssued: 1,\n                lastIssued: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                coursesUsed: [\n                    courseId\n                ]\n            });\n        }\n        // Register certificate on blockchain\n        try {\n            const blockchainVerification = await (0,_blockchainService__WEBPACK_IMPORTED_MODULE_6__.registerCertificateOnBlockchain)(certificate);\n            if (blockchainVerification) {\n                console.log(`Certificate ${certificate.id} registered on blockchain with transaction ID: ${blockchainVerification.transactionId}`);\n            }\n        } catch (blockchainError) {\n            console.error(\"Error registering certificate on blockchain:\", blockchainError);\n        // Continue even if blockchain registration fails\n        }\n        return certificate;\n    } catch (error) {\n        console.error(\"Error generating certificate:\", error);\n        return null;\n    }\n};\n/**\n * Get a certificate by ID\n */ const getCertificate = async (certificateId)=>{\n    try {\n        const certificateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\", certificateId);\n        const certificateSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(certificateRef);\n        if (!certificateSnapshot.exists()) {\n            return null;\n        }\n        return {\n            id: certificateSnapshot.id,\n            ...certificateSnapshot.data()\n        };\n    } catch (error) {\n        console.error(\"Error getting certificate:\", error);\n        return null;\n    }\n};\n/**\n * Get certificates for a user\n */ const getUserCertificates = async (userId)=>{\n    try {\n        const certificatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\");\n        const certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"issueDate\", \"desc\"));\n        const certificatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(certificatesQuery);\n        const certificates = [];\n        certificatesSnapshot.forEach((doc)=>{\n            certificates.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return certificates;\n    } catch (error) {\n        console.error(\"Error getting user certificates:\", error);\n        return [];\n    }\n};\n/**\n * Get certificates for a course\n */ const getCourseCertificates = async (courseId)=>{\n    try {\n        const certificatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\");\n        const certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"courseId\", \"==\", courseId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"issueDate\", \"desc\"));\n        const certificatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(certificatesQuery);\n        const certificates = [];\n        certificatesSnapshot.forEach((doc)=>{\n            certificates.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return certificates;\n    } catch (error) {\n        console.error(\"Error getting course certificates:\", error);\n        return [];\n    }\n};\n/**\n * Search certificates with filters\n */ const searchCertificates = async (filters)=>{\n    try {\n        const certificatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\");\n        let certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesRef);\n        // Apply filters\n        if (filters.userId) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", filters.userId));\n        }\n        if (filters.courseId) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"courseId\", \"==\", filters.courseId));\n        }\n        if (filters.templateId) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"templateId\", \"==\", filters.templateId));\n        }\n        if (filters.status) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", filters.status));\n        }\n        // Add date range filters if provided\n        if (filters.startDate && filters.endDate) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"issueDate\", \">=\", filters.startDate), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"issueDate\", \"<=\", filters.endDate));\n        } else if (filters.startDate) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"issueDate\", \">=\", filters.startDate));\n        } else if (filters.endDate) {\n            certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"issueDate\", \"<=\", filters.endDate));\n        }\n        // Order by issue date\n        certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"issueDate\", \"desc\"));\n        const certificatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(certificatesQuery);\n        const certificates = [];\n        certificatesSnapshot.forEach((doc)=>{\n            certificates.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return certificates;\n    } catch (error) {\n        console.error(\"Error searching certificates:\", error);\n        return [];\n    }\n};\n/**\n * Verify a certificate by verification code\n */ const verifyCertificate = async (verificationCode, ipAddress, userAgent)=>{\n    try {\n        const certificatesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\");\n        const certificatesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(certificatesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"verificationCode\", \"==\", verificationCode));\n        const certificatesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(certificatesQuery);\n        const now = new Date().toISOString();\n        const verificationId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n        // Certificate not found\n        if (certificatesSnapshot.empty) {\n            // Log invalid verification attempt\n            await logVerificationAttempt({\n                id: verificationId,\n                verificationCode,\n                status: \"invalid\",\n                verifiedAt: now,\n                verifiedIp: ipAddress,\n                userAgent\n            });\n            return {\n                isValid: false,\n                message: \"Certificate not found\",\n                verifiedAt: now\n            };\n        }\n        const certificateDoc = certificatesSnapshot.docs[0];\n        const certificate = {\n            id: certificateDoc.id,\n            ...certificateDoc.data()\n        };\n        // Check if certificate is revoked\n        if (certificate.status === \"revoked\") {\n            // Log revoked verification attempt\n            await logVerificationAttempt({\n                id: verificationId,\n                certificateId: certificate.id,\n                verificationCode,\n                status: \"revoked\",\n                verifiedAt: now,\n                verifiedIp: ipAddress,\n                userAgent\n            });\n            return {\n                isValid: false,\n                certificate,\n                message: \"Certificate has been revoked\",\n                verifiedAt: now\n            };\n        }\n        // Check if certificate is expired\n        if (certificate.status === \"expired\" || certificate.expiryDate && new Date(certificate.expiryDate) < new Date()) {\n            // Log expired verification attempt\n            await logVerificationAttempt({\n                id: verificationId,\n                certificateId: certificate.id,\n                verificationCode,\n                status: \"expired\",\n                verifiedAt: now,\n                verifiedIp: ipAddress,\n                userAgent\n            });\n            return {\n                isValid: false,\n                certificate,\n                message: \"Certificate has expired\",\n                verifiedAt: now\n            };\n        }\n        // Certificate is valid\n        await logVerificationAttempt({\n            id: verificationId,\n            certificateId: certificate.id,\n            verificationCode,\n            status: \"valid\",\n            verifiedAt: now,\n            verifiedIp: ipAddress,\n            userAgent\n        });\n        // Verify digital signature\n        let signatureValid = false;\n        let signatureMessage = \"Digital signature not found\";\n        if (certificate.digitalSignature) {\n            // Data to verify\n            const signatureData = {\n                id: certificate.id,\n                userId: certificate.userId,\n                courseId: certificate.courseId,\n                templateId: certificate.templateId,\n                issueDate: certificate.issueDate,\n                verificationCode: certificate.verificationCode\n            };\n            signatureValid = (0,_utils_digitalSignature__WEBPACK_IMPORTED_MODULE_7__.verifySignature)(signatureData, certificate.digitalSignature);\n            signatureMessage = signatureValid ? \"Digital signature verified\" : \"Digital signature invalid - certificate may have been tampered with\";\n        }\n        // Verify on blockchain if available\n        let blockchainVerificationResult = undefined;\n        if (certificate.blockchainVerified) {\n            try {\n                const blockchainResult = await (0,_blockchainService__WEBPACK_IMPORTED_MODULE_6__.verifyBlockchainCertificate)(certificate);\n                if (blockchainResult.verification) {\n                    blockchainVerificationResult = {\n                        isValid: blockchainResult.isValid,\n                        message: blockchainResult.message,\n                        transactionId: blockchainResult.verification.transactionId,\n                        blockchainProvider: blockchainResult.verification.blockchainProvider,\n                        blockchainNetwork: blockchainResult.verification.blockchainNetwork,\n                        verificationUrl: blockchainResult.verification.verificationUrl\n                    };\n                } else {\n                    blockchainVerificationResult = {\n                        isValid: false,\n                        message: \"Certificate not found on blockchain\"\n                    };\n                }\n            } catch (blockchainError) {\n                console.error(\"Error verifying certificate on blockchain:\", blockchainError);\n                blockchainVerificationResult = {\n                    isValid: false,\n                    message: \"Error verifying certificate on blockchain\"\n                };\n            }\n        }\n        return {\n            isValid: true,\n            certificate,\n            message: \"Certificate is valid\",\n            verifiedAt: now,\n            digitalSignatureVerification: {\n                isValid: signatureValid,\n                message: signatureMessage\n            },\n            blockchainVerification: blockchainVerificationResult\n        };\n    } catch (error) {\n        console.error(\"Error verifying certificate:\", error);\n        // Log error verification attempt\n        try {\n            await logVerificationAttempt({\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)(),\n                verificationCode,\n                status: \"invalid\",\n                verifiedAt: new Date().toISOString(),\n                verifiedIp: ipAddress,\n                userAgent\n            });\n        } catch (logError) {\n            console.error(\"Error logging verification attempt:\", logError);\n        }\n        return {\n            isValid: false,\n            message: \"Error verifying certificate\",\n            verifiedAt: new Date().toISOString()\n        };\n    }\n};\n/**\n * Log a certificate verification attempt\n */ const logVerificationAttempt = async (verification)=>{\n    try {\n        const verificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateVerifications\", verification.id || (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)());\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(verificationRef, {\n            ...verification,\n            verifiedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            timestamp: new Date().getTime()\n        });\n    } catch (error) {\n        console.error(\"Error logging verification attempt:\", error);\n    }\n};\n/**\n * Revoke a certificate\n */ const revokeCertificate = async (certificateId, reason)=>{\n    try {\n        const certificateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificates\", certificateId);\n        const certificateDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(certificateRef);\n        if (!certificateDoc.exists()) {\n            throw new Error(\"Certificate not found\");\n        }\n        // Update certificate status\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(certificateRef, {\n            status: \"revoked\",\n            revocationReason: reason,\n            revocationDate: new Date().toISOString(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        // Log revocation\n        const revocationId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n        const revocationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_2__.firestore, \"certificateRevocations\", revocationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(revocationRef, {\n            id: revocationId,\n            certificateId,\n            reason,\n            revokedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            revokedBy: \"admin\",\n            timestamp: new Date().getTime()\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error revoking certificate:\", error);\n        return false;\n    }\n};\n/**\n * Generate a QR code for a verification URL\n */ const generateQRCode = async (url)=>{\n    try {\n        // Generate QR code as data URL\n        const qrDataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_5___default().toDataURL(url, {\n            errorCorrectionLevel: \"H\",\n            margin: 1,\n            width: 200,\n            color: {\n                dark: \"#000000\",\n                light: \"#ffffff\"\n            }\n        });\n        return qrDataUrl;\n    } catch (error) {\n        console.error(\"Error generating QR code:\", error);\n        return \"\";\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/certificateService.ts\n");

/***/ }),

/***/ "./src/services/courseProgressService.ts":
/*!***********************************************!*\
  !*** ./src/services/courseProgressService.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLessonBookmark: () => (/* binding */ addLessonBookmark),\n/* harmony export */   addLessonNote: () => (/* binding */ addLessonNote),\n/* harmony export */   calculateCourseProgress: () => (/* binding */ calculateCourseProgress),\n/* harmony export */   checkInactiveEnrollments: () => (/* binding */ checkInactiveEnrollments),\n/* harmony export */   getCourseProgress: () => (/* binding */ getCourseProgress),\n/* harmony export */   getCoursesInProgress: () => (/* binding */ getCoursesInProgress),\n/* harmony export */   getLessonProgress: () => (/* binding */ getLessonProgress),\n/* harmony export */   initializeCourseProgress: () => (/* binding */ initializeCourseProgress),\n/* harmony export */   markCourseComplete: () => (/* binding */ markCourseComplete),\n/* harmony export */   markLessonCompleted: () => (/* binding */ markLessonCompleted),\n/* harmony export */   markModuleComplete: () => (/* binding */ markModuleComplete),\n/* harmony export */   resetCourseProgress: () => (/* binding */ resetCourseProgress),\n/* harmony export */   syncCourseProgress: () => (/* binding */ syncCourseProgress),\n/* harmony export */   updateLessonProgress: () => (/* binding */ updateLessonProgress),\n/* harmony export */   updateLessonTracking: () => (/* binding */ updateLessonTracking),\n/* harmony export */   updateQuizScore: () => (/* binding */ updateQuizScore)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"./src/services/firebase.ts\");\n/* harmony import */ var _reminderService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reminderService */ \"./src/services/reminderService.ts\");\n/* harmony import */ var _certificateService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./certificateService */ \"./src/services/certificateService.ts\");\n/* harmony import */ var _utils_queryClient__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/queryClient */ \"./src/utils/queryClient.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__, _reminderService__WEBPACK_IMPORTED_MODULE_2__, _certificateService__WEBPACK_IMPORTED_MODULE_3__, _utils_queryClient__WEBPACK_IMPORTED_MODULE_4__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__, _reminderService__WEBPACK_IMPORTED_MODULE_2__, _certificateService__WEBPACK_IMPORTED_MODULE_3__, _utils_queryClient__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Cache for progress data\nconst progressCache = new Map();\nconst CACHE_TTL = 10 * 60 * 1000; // 10 minutes\nconst writeQueue = [];\nlet writeTimer = null;\nconst BATCH_INTERVAL = 5000; // 5 seconds\nconst MAX_BATCH_SIZE = 500; // Firestore limit is 500 operations per batch\n/**\n * Queue a write operation to be batched\n */ const queueWrite = (docPath, data)=>{\n    // Add to queue\n    writeQueue.push({\n        docPath,\n        data,\n        timestamp: Date.now()\n    });\n    // Start timer if not already running\n    if (!writeTimer) {\n        writeTimer = setTimeout(()=>{\n            void processBatchWrites();\n        }, BATCH_INTERVAL);\n    }\n};\n/**\n * Process queued write operations in batches\n */ const processBatchWrites = async ()=>{\n    // Clear timer\n    writeTimer = null;\n    // If queue is empty, do nothing\n    if (writeQueue.length === 0) {\n        return;\n    }\n    try {\n        // Get operations to process (up to max batch size)\n        const operations = writeQueue.splice(0, MAX_BATCH_SIZE);\n        // Group by timestamp to avoid hotspotting\n        // This creates multiple batches with operations spread across time\n        const timeGroups = {};\n        operations.forEach((op)=>{\n            // Group by 10-second intervals\n            const timeKey = Math.floor(op.timestamp / 10000).toString();\n            if (!timeGroups[timeKey]) {\n                timeGroups[timeKey] = [];\n            }\n            timeGroups[timeKey].push(op);\n        });\n        // Process each time group\n        for(const timeKey in timeGroups){\n            const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore);\n            const groupOps = timeGroups[timeKey];\n            // Add operations to batch\n            groupOps.forEach((op)=>{\n                const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, op.docPath);\n                batch.update(docRef, {\n                    ...op.data,\n                    lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                });\n            });\n            // Commit batch\n            await batch.commit();\n            console.log(`Processed ${groupOps.length} write operations in batch`);\n        }\n    } catch (error) {\n        console.error(\"Error processing batch writes:\", error);\n        // If there was an error, re-queue operations with exponential backoff\n        if (writeQueue.length < 1000) {\n            setTimeout(()=>{\n                void processBatchWrites();\n            }, BATCH_INTERVAL * 2);\n        }\n    }\n    // If there are more operations, schedule another batch\n    if (writeQueue.length > 0) {\n        writeTimer = setTimeout(()=>{\n            void processBatchWrites();\n        }, BATCH_INTERVAL);\n    }\n};\n/**\n * Get course progress for a user\n */ const getCourseProgress = async (userId, courseId)=>{\n    const docId = `${userId}_${courseId}`;\n    const cached = progressCache.get(docId);\n    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n        return cached.data;\n    }\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", docId);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            return null;\n        }\n        const progress = progressDoc.data();\n        progressCache.set(docId, {\n            data: progress,\n            timestamp: Date.now()\n        });\n        return progress;\n    } catch (error) {\n        console.error(\"Error getting course progress:\", error);\n        return null;\n    }\n};\n/**\n * Initialize course progress for a user\n */ const initializeCourseProgress = async (userId, courseId, courseName)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (progressDoc.exists()) {\n            return progressDoc.data();\n        }\n        // Get all modules and lessons to initialize progress tracking\n        const modulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n        const modulesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(modulesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"order\", \"asc\"));\n        const modulesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(modulesQuery);\n        const moduleProgress = {};\n        const lessonProgress = {};\n        // Initialize module and lesson progress\n        for (const moduleDoc of modulesSnapshot.docs){\n            const moduleId = moduleDoc.id;\n            // Get lessons for this module\n            const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`);\n            const lessonsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(lessonsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"order\", \"asc\"));\n            const lessonsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(lessonsQuery);\n            // Initialize module progress\n            moduleProgress[moduleId] = {\n                moduleId,\n                startDate: \"\",\n                lastAccessDate: \"\",\n                completed: false,\n                progress: 0,\n                timeSpent: 0,\n                completedLessons: 0,\n                totalLessons: lessonsSnapshot.size\n            };\n            // Initialize lesson progress\n            lessonsSnapshot.forEach((lessonDoc)=>{\n                const lessonId = lessonDoc.id;\n                lessonProgress[`${moduleId}_${lessonId}`] = {\n                    lessonId,\n                    moduleId,\n                    startDate: \"\",\n                    lastAccessDate: \"\",\n                    completed: false,\n                    timeSpent: 0,\n                    progress: 0,\n                    notes: [],\n                    bookmarks: []\n                };\n            });\n        }\n        const newProgress = {\n            courseId,\n            userId,\n            startDate: new Date().toISOString(),\n            lastAccessDate: new Date().toISOString(),\n            completedLessons: [],\n            completedModules: [],\n            quizScores: {},\n            quizAttempts: {},\n            lessonProgress,\n            moduleProgress,\n            overallProgress: 0,\n            completed: false,\n            timeSpent: 0\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(progressRef, newProgress);\n        // Create initial progress reminder\n        await (0,_reminderService__WEBPACK_IMPORTED_MODULE_2__.createProgressReminder)(userId, courseId, courseName, 0);\n        return newProgress;\n    } catch (error) {\n        console.error(\"Error initializing course progress:\", error);\n        throw error;\n    }\n};\n/**\n * Calculate course progress without database operations\n */ const calculateCourseProgress = (completedLessons, totalLessons)=>{\n    const safeTotalLessons = Math.max(1, totalLessons);\n    const overallProgress = Math.floor(completedLessons.length / safeTotalLessons * 100);\n    const completed = completedLessons.length >= safeTotalLessons && safeTotalLessons > 0;\n    return {\n        overallProgress,\n        completed\n    };\n};\n/**\n * Update lesson progress with optimized writes\n */ const updateLessonProgress = async (userId, courseId, courseName, lessonId, completed, totalLessons)=>{\n    try {\n        // Generate document ID\n        const docId = `${userId}_${courseId}`;\n        const docPath = `courseProgress/${docId}`; // This is the path to the document in Firestore\n        // Get current progress (from cache if possible)\n        let progress;\n        const cached = progressCache.get(docId);\n        if (cached && cached.data && Date.now() - cached.timestamp < CACHE_TTL) {\n            progress = cached.data;\n        } else {\n            const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", docId);\n            const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n            if (!progressDoc.exists()) {\n                throw new Error(\"Course progress not found\");\n            }\n            progress = progressDoc.data();\n            progressCache.set(docId, {\n                data: progress,\n                timestamp: Date.now()\n            });\n        }\n        // Check if we need to update\n        const completedLessons = [\n            ...progress.completedLessons || []\n        ];\n        const lessonIndex = completedLessons.indexOf(lessonId);\n        if (completed && lessonIndex >= 0 || !completed && lessonIndex < 0) {\n            // No change needed\n            return progress;\n        }\n        // Update completed lessons\n        if (completed) {\n            completedLessons.push(lessonId);\n        } else {\n            completedLessons.splice(lessonIndex, 1);\n        }\n        // Calculate new progress\n        const { overallProgress, completed: isCompleted } = calculateCourseProgress(completedLessons, totalLessons);\n        // Prepare update data\n        const updateData = {\n            completedLessons,\n            overallProgress,\n            completed: isCompleted,\n            lastAccessDate: new Date().toISOString()\n        };\n        // Add completion date if newly completed\n        if (isCompleted && !progress.completed) {\n            updateData.completedDate = new Date().toISOString();\n        } else if (!isCompleted && progress.completed) {\n            // Use deleteField() to properly remove the field from Firestore\n            updateData.completedDate = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteField)();\n        }\n        // Queue the write instead of immediate update\n        queueWrite(docPath, updateData);\n        // Separate completedDate from updateData and resolve its type for the cache/return object\n        const { completedDate: rawCompletedDateFromUpdateData, ...restOfUpdateData } = updateData;\n        const resolvedCompletedDateForCache = rawCompletedDateFromUpdateData === (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteField)() ? undefined : typeof rawCompletedDateFromUpdateData === \"string\" ? rawCompletedDateFromUpdateData : undefined;\n        const updatedProgress = {\n            ...progress,\n            ...restOfUpdateData,\n            completedDate: resolvedCompletedDateForCache\n        };\n        progressCache.set(docId, {\n            data: updatedProgress,\n            timestamp: Date.now()\n        });\n        // Return updated progress\n        return updatedProgress;\n    } catch (error) {\n        console.error(\"Error updating lesson progress:\", error);\n        throw error;\n    }\n};\n/**\n * Mark a module as complete\n */ const markModuleComplete = async (userId, courseId, moduleId)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            throw new Error(\"Course progress not found\");\n        }\n        const progress = progressDoc.data();\n        const completedModules = [\n            ...progress.completedModules\n        ];\n        if (!completedModules.includes(moduleId)) {\n            completedModules.push(moduleId);\n        }\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            completedModules,\n            lastAccessDate: new Date().toISOString(),\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return {\n            ...progress,\n            completedModules,\n            lastAccessDate: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Error marking module complete:\", error);\n        throw error;\n    }\n};\n/**\n * Mark a course as complete\n */ const markCourseComplete = async (userId, courseId, courseName)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            throw new Error(\"Course progress not found\");\n        }\n        const progress = progressDoc.data();\n        // Get all published lessons in the course to verify completion\n        const modulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n        const modulesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(modulesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"));\n        const modulesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(modulesQuery);\n        let totalLessons = 0;\n        const moduleIds = [];\n        // Count total lessons and collect module IDs\n        for (const moduleDoc of modulesSnapshot.docs){\n            const moduleId = moduleDoc.id;\n            moduleIds.push(moduleId);\n            const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`);\n            const lessonsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(lessonsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"));\n            const lessonsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(lessonsQuery);\n            totalLessons += lessonsSnapshot.size;\n        }\n        // Calculate actual progress based on completed lessons\n        const completedLessons = progress.completedLessons.length;\n        const actualProgress = totalLessons > 0 ? Math.round(completedLessons / totalLessons * 100) : 0;\n        // Only mark as complete if all lessons are actually completed\n        const isActuallyComplete = totalLessons > 0 && completedLessons >= totalLessons;\n        const completionDate = new Date().toISOString();\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            completed: isActuallyComplete,\n            completionDate: isActuallyComplete ? completionDate : null,\n            overallProgress: actualProgress,\n            lastAccessDate: completionDate,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        // Create completion reminder\n        await (0,_reminderService__WEBPACK_IMPORTED_MODULE_2__.createCompletionReminder)(userId, courseId, courseName);\n        // Issue certificate if course is configured to issue certificates\n        await issueCertificateForCourse(userId, courseId, courseName);\n        return {\n            ...progress,\n            completed: true,\n            completionDate,\n            overallProgress: 100,\n            lastAccessDate: completionDate\n        };\n    } catch (error) {\n        console.error(\"Error marking course complete:\", error);\n        throw error;\n    }\n};\n/**\n * Issue a certificate for a completed course\n */ const issueCertificateForCourse = async (userId, courseId, courseName)=>{\n    try {\n        // Get course details to check if certificates are enabled\n        const courseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courses\", courseId);\n        const courseDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(courseRef);\n        if (!courseDoc.exists()) {\n            console.error(\"Course not found for certificate issuance\");\n            return;\n        }\n        const courseData = courseDoc.data();\n        // Check if certificates are enabled for this course\n        if (!courseData.certificatesEnabled) {\n            console.log(\"Certificates not enabled for this course\");\n            return;\n        }\n        // Get user details\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"users\", userId);\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (!userDoc.exists()) {\n            console.error(\"User not found for certificate issuance\");\n            return;\n        }\n        const userData = userDoc.data();\n        // Get certificate template (use course-specific template or default)\n        const templateId = courseData.certificateTemplateId || null;\n        let template = null;\n        if (templateId) {\n            // Use course-specific template\n            const templateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"certificateTemplates\", templateId);\n            const templateDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(templateRef);\n            if (templateDoc.exists()) {\n                template = templateDoc.data();\n            }\n        }\n        // If no template found, use default template\n        if (!template) {\n            const defaultTemplate = await (0,_certificateService__WEBPACK_IMPORTED_MODULE_3__.getDefaultCertificateTemplate)();\n            if (!defaultTemplate) {\n                console.error(\"No certificate template found\");\n                return;\n            }\n            template = defaultTemplate;\n        }\n        // Generate certificate\n        const certificate = await (0,_certificateService__WEBPACK_IMPORTED_MODULE_3__.generateCertificate)({\n            templateId: template.id,\n            userId,\n            courseId,\n            values: {\n                studentName: userData.displayName || userData.email || \"Student\",\n                courseName: courseName || courseData.title || \"Course\",\n                completionDate: new Date().toISOString(),\n                issuerName: courseData.instructorName || \"Instructor\",\n                issuerTitle: courseData.instructorTitle || \"Course Instructor\"\n            },\n            isPublic: courseData.publicCertificates === true\n        });\n        if (certificate) {\n            console.log(`Certificate ${certificate.id} issued successfully for course ${courseId} to user ${userId}`);\n        }\n    } catch (error) {\n        console.error(\"Error issuing certificate:\", error);\n    }\n};\n/**\n * Check for inactive enrollments and create reminders\n */ const checkInactiveEnrollments = async ()=>{\n    try {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const sevenDaysAgoStr = sevenDaysAgo.toISOString();\n        // Query for progress records that haven't been accessed in a while\n        const progressQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"lastAccessDate\", \"<=\", sevenDaysAgoStr), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"completed\", \"==\", false));\n        const progressSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(progressQuery);\n        let count = 0;\n        // Process each inactive enrollment\n        for (const progressDoc of progressSnapshot.docs){\n            const progress = progressDoc.data();\n            // Get course name\n            const courseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courses\", progress.courseId);\n            const courseDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(courseRef);\n            if (!courseDoc.exists()) {\n                continue;\n            }\n            const courseData = courseDoc.data();\n            const courseName = courseData.title || \"Unknown Course\";\n            // Calculate days since last access\n            const lastAccessDate = new Date(progress.lastAccessDate);\n            const daysSinceLastAccess = Math.floor((now.getTime() - lastAccessDate.getTime()) / (24 * 60 * 60 * 1000));\n            // Create inactivity reminder\n            await (0,_reminderService__WEBPACK_IMPORTED_MODULE_2__.createInactivityReminder)(progress.userId, progress.courseId, courseName, daysSinceLastAccess);\n            count++;\n        }\n        return count;\n    } catch (error) {\n        console.error(\"Error checking inactive enrollments:\", error);\n        return 0;\n    }\n};\n/**\n * Update quiz score for a lesson\n */ const updateQuizScore = async (userId, courseId, lessonId, score)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            throw new Error(\"Course progress not found\");\n        }\n        const progress = progressDoc.data();\n        const quizScores = {\n            ...progress.quizScores,\n            [lessonId]: score\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            quizScores,\n            lastAccessDate: new Date().toISOString(),\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return {\n            ...progress,\n            quizScores,\n            lastAccessDate: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Error updating quiz score:\", error);\n        throw error;\n    }\n};\n/**\n * Mark a lesson as completed\n */ \nconst markLessonCompleted = async (userId, courseId, moduleId, lessonId, timeSpent = 0, position = 0)=>{\n    const queryClient = (0,_utils_queryClient__WEBPACK_IMPORTED_MODULE_4__.getQueryClient)();\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            // Create progress if it doesn't exist\n            await initializeCourseProgress(userId, courseId, \"Unknown Course\");\n            return;\n        }\n        const progress = progressDoc.data();\n        const lessonKey = `${moduleId}_${lessonId}`;\n        const now = new Date().toISOString();\n        // Update lesson progress\n        const lessonProgress = progress.lessonProgress || {};\n        const currentLessonProgress = lessonProgress[lessonKey] || {\n            lessonId,\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            timeSpent: 0,\n            progress: 0,\n            notes: [],\n            bookmarks: []\n        };\n        // Update lesson progress\n        lessonProgress[lessonKey] = {\n            ...currentLessonProgress,\n            completed: true,\n            completedDate: now,\n            lastAccessDate: now,\n            timeSpent: currentLessonProgress.timeSpent + timeSpent,\n            progress: 100,\n            position: position || currentLessonProgress.position\n        };\n        // Update module progress\n        const moduleProgress = progress.moduleProgress || {};\n        const currentModuleProgress = moduleProgress[moduleId] || {\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            progress: 0,\n            timeSpent: 0,\n            completedLessons: 0,\n            totalLessons: 0\n        };\n        // Count completed lessons in this module\n        const completedLessonsInModule = Object.keys(lessonProgress).filter((key)=>key.startsWith(`${moduleId}_`) && lessonProgress[key].completed).length;\n        // Update module progress\n        moduleProgress[moduleId] = {\n            ...currentModuleProgress,\n            lastAccessDate: now,\n            timeSpent: (currentModuleProgress.timeSpent || 0) + timeSpent,\n            completedLessons: completedLessonsInModule,\n            progress: (currentModuleProgress.totalLessons || 0) > 0 ? Math.round(completedLessonsInModule / (currentModuleProgress.totalLessons || 1) * 100) : 0\n        };\n        // Update the progress document\n        const updatedProgress = {\n            completedLessons: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.arrayUnion)(lessonKey),\n            lastAccessDate: now,\n            timeSpent: progress.timeSpent + timeSpent,\n            lessonProgress,\n            moduleProgress,\n            lastPosition: {\n                moduleId,\n                lessonId,\n                position\n            },\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, updatedProgress);\n        // Check if all lessons in the module are completed\n        await checkModuleCompletion(userId, courseId, moduleId);\n        // Update overall progress\n        await updateOverallProgress(userId, courseId);\n        // Invalidate relevant queries to trigger UI updates\n        queryClient.invalidateQueries({\n            queryKey: [\n                \"courseProgress\",\n                userId,\n                courseId\n            ]\n        });\n        queryClient.invalidateQueries({\n            queryKey: [\n                \"enrolledCoursesWithProgress\",\n                userId\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error marking lesson as completed:\", error);\n        throw error;\n    }\n};\n/**\n * Update lesson progress without marking it as completed\n */ const updateLessonTracking = async (userId, courseId, moduleId, lessonId, timeSpent = 0, position = 0, progressPercentage = 0)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            // Create progress if it doesn't exist\n            await initializeCourseProgress(userId, courseId, \"Unknown Course\");\n            return;\n        }\n        const progress = progressDoc.data();\n        const lessonKey = `${moduleId}_${lessonId}`;\n        const now = new Date().toISOString();\n        // Update lesson progress\n        const lessonProgress = progress.lessonProgress || {};\n        const currentLessonProgress = lessonProgress[lessonKey] || {\n            lessonId,\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            timeSpent: 0,\n            progress: 0,\n            notes: [],\n            bookmarks: []\n        };\n        // If this is the first time accessing this lesson, set the start date\n        if (!currentLessonProgress.startDate) {\n            currentLessonProgress.startDate = now;\n        }\n        // Update lesson progress\n        lessonProgress[lessonKey] = {\n            ...currentLessonProgress,\n            lastAccessDate: now,\n            timeSpent: currentLessonProgress.timeSpent + timeSpent,\n            progress: Math.max(progressPercentage, currentLessonProgress.progress || 0),\n            position: position\n        };\n        // Update module progress\n        const moduleProgress = progress.moduleProgress || {};\n        const currentModuleProgress = moduleProgress[moduleId] || {\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            progress: 0,\n            timeSpent: 0,\n            completedLessons: 0,\n            totalLessons: 0\n        };\n        // If this is the first time accessing this module, set the start date\n        if (!currentModuleProgress.startDate) {\n            currentModuleProgress.startDate = now;\n        }\n        // Count completed lessons in this module\n        const completedLessonsInModule = Object.keys(lessonProgress).filter((key)=>key.startsWith(`${moduleId}_`) && lessonProgress[key].completed).length;\n        // Calculate average progress for incomplete lessons\n        const incompleteLessons = Object.keys(lessonProgress).filter((key)=>key.startsWith(`${moduleId}_`) && !lessonProgress[key].completed);\n        const incompleteProgress = incompleteLessons.reduce((sum, key)=>sum + (lessonProgress[key].progress || 0), 0);\n        const averageIncompleteProgress = incompleteLessons.length > 0 ? incompleteProgress / incompleteLessons.length : 0;\n        // Calculate overall module progress\n        const totalLessons = currentModuleProgress.totalLessons || 1;\n        const moduleProgressPercentage = (completedLessonsInModule * 100 + // Completed lessons count as 100%\n        (totalLessons - completedLessonsInModule) * averageIncompleteProgress / 100 // Add partial progress\n        ) / totalLessons;\n        // Update module progress\n        moduleProgress[moduleId] = {\n            ...currentModuleProgress,\n            lastAccessDate: now,\n            timeSpent: (currentModuleProgress.timeSpent || 0) + timeSpent,\n            completedLessons: completedLessonsInModule,\n            progress: Math.round(moduleProgressPercentage)\n        };\n        // Update the progress document\n        const updatedProgress = {\n            lastAccessDate: now,\n            timeSpent: progress.timeSpent + timeSpent,\n            lessonProgress,\n            moduleProgress,\n            lastPosition: {\n                moduleId,\n                lessonId,\n                position\n            },\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, updatedProgress);\n        // Update overall progress without marking anything as completed\n        await updateOverallProgressCalculation(userId, courseId);\n    } catch (error) {\n        console.error(\"Error updating lesson tracking:\", error);\n    }\n};\n/**\n * Update overall progress calculation without marking anything as completed\n */ const updateOverallProgressCalculation = async (userId, courseId)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            return;\n        }\n        const progress = progressDoc.data();\n        // Calculate overall progress based on module progress\n        const moduleProgressValues = Object.values(progress.moduleProgress || {});\n        if (moduleProgressValues.length === 0) {\n            return;\n        }\n        const overallProgress = Math.round(moduleProgressValues.reduce((sum, module)=>sum + module.progress, 0) / moduleProgressValues.length);\n        // Update progress\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            overallProgress,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n    } catch (error) {\n        console.error(\"Error updating overall progress calculation:\", error);\n    }\n};\n/**\n * Add a bookmark to a lesson\n */ const addLessonBookmark = async (userId, courseId, moduleId, lessonId, position, note)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            // Create progress if it doesn't exist\n            await initializeCourseProgress(userId, courseId, \"Unknown Course\");\n            return;\n        }\n        const progress = progressDoc.data();\n        const lessonKey = `${moduleId}_${lessonId}`;\n        const now = new Date().toISOString();\n        // Update lesson progress\n        const lessonProgress = progress.lessonProgress || {};\n        const currentLessonProgress = lessonProgress[lessonKey] || {\n            lessonId,\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            timeSpent: 0,\n            progress: 0,\n            notes: [],\n            bookmarks: []\n        };\n        // Add bookmark\n        const bookmarks = currentLessonProgress.bookmarks || [];\n        const newBookmark = {\n            id: `bookmark_${Date.now()}`,\n            position,\n            note,\n            createdAt: now\n        };\n        // Update lesson progress\n        lessonProgress[lessonKey] = {\n            ...currentLessonProgress,\n            lastAccessDate: now,\n            bookmarks: [\n                ...bookmarks,\n                newBookmark\n            ]\n        };\n        // Update the progress document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            lessonProgress,\n            lastAccessDate: now,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n    } catch (error) {\n        console.error(\"Error adding lesson bookmark:\", error);\n    }\n};\n/**\n * Add a note to a lesson\n */ const addLessonNote = async (userId, courseId, moduleId, lessonId, note)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            // Create progress if it doesn't exist\n            await initializeCourseProgress(userId, courseId, \"Unknown Course\");\n            return;\n        }\n        const progress = progressDoc.data();\n        const lessonKey = `${moduleId}_${lessonId}`;\n        const now = new Date().toISOString();\n        // Update lesson progress\n        const lessonProgress = progress.lessonProgress || {};\n        const currentLessonProgress = lessonProgress[lessonKey] || {\n            lessonId,\n            moduleId,\n            startDate: now,\n            lastAccessDate: now,\n            completed: false,\n            timeSpent: 0,\n            progress: 0,\n            notes: [],\n            bookmarks: []\n        };\n        // Add note\n        const notes = currentLessonProgress.notes || [];\n        // Update lesson progress\n        lessonProgress[lessonKey] = {\n            ...currentLessonProgress,\n            lastAccessDate: now,\n            notes: [\n                ...notes,\n                note\n            ]\n        };\n        // Update the progress document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n            lessonProgress,\n            lastAccessDate: now,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n    } catch (error) {\n        console.error(\"Error adding lesson note:\", error);\n    }\n};\n/**\n * Check if all lessons in a module are completed\n */ const checkModuleCompletion = async (userId, courseId, moduleId)=>{\n    try {\n        // Get the module data\n        const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}`);\n        const moduleSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(moduleRef);\n        if (!moduleSnapshot.exists()) {\n            return;\n        }\n        // Get module data\n        // const moduleData = moduleSnapshot.data() as Module; // moduleData is not used\n        // Get all lessons for the module\n        const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`);\n        const lessonsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(lessonsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"));\n        const lessonsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(lessonsQuery);\n        const lessonIds = lessonsSnapshot.docs.map((doc)=>doc.id);\n        // Get the user's progress\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/courseProgress/${courseId}`);\n        const progressSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressSnapshot.exists()) {\n            return;\n        }\n        const progressData = progressSnapshot.data();\n        // Check if all lessons are completed\n        const allLessonsCompleted = lessonIds.every((lessonId)=>progressData.completedLessons.includes(`${moduleId}_${lessonId}`));\n        // If all lessons are completed and the module is not already marked as completed\n        if (allLessonsCompleted && !progressData.completedModules.includes(moduleId)) {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, {\n                completedModules: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.arrayUnion)(moduleId),\n                lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n        }\n    } catch (error) {\n        console.error(\"Error checking module completion:\", error);\n    }\n};\n/**\n * Update overall course progress\n */ const updateOverallProgress = async (userId, courseId)=>{\n    try {\n        // Get all published lessons in the course\n        const modulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n        const modulesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(modulesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"));\n        const modulesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(modulesQuery);\n        let totalLessons = 0;\n        const moduleIds = [];\n        // Count total lessons\n        for (const moduleDoc of modulesSnapshot.docs){\n            moduleIds.push(moduleDoc.id);\n            const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleDoc.id}/lessons`);\n            const lessonsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(lessonsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"));\n            const lessonsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(lessonsQuery);\n            totalLessons += lessonsSnapshot.size;\n        }\n        // Get user progress\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/courseProgress/${courseId}`);\n        const progressSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressSnapshot.exists()) {\n            return;\n        }\n        const progressData = progressSnapshot.data();\n        const completedLessons = progressData.completedLessons.length;\n        // Calculate progress percentage\n        const overallProgress = totalLessons > 0 ? Math.round(completedLessons / totalLessons * 100) : 0;\n        // Check if all modules are completed\n        const allModulesCompleted = moduleIds.every((moduleId)=>progressData.completedModules.includes(moduleId));\n        // Data for the courseProgress document (users/{userId}/courseProgress/{courseId})\n        const courseProgressUpdateData = {\n            overallProgress,\n            completed: allModulesCompleted && overallProgress === 100,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(progressRef, courseProgressUpdateData);\n        // Also update the corresponding enrollment document in users/{userId}/enrollments/{courseId}\n        try {\n            const enrollmentDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/enrollments/${courseId}`);\n            const enrollmentSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(enrollmentDocRef);\n            let currentEnrollmentStatus = \"active\"; // Default to 'active'\n            if (enrollmentSnap.exists()) {\n                const enrollmentData = enrollmentSnap.data();\n                currentEnrollmentStatus = enrollmentData.status || \"active\";\n            }\n            // Update the main enrollment document with the same progress.\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(enrollmentDocRef, {\n                progress: overallProgress,\n                status: allModulesCompleted && overallProgress === 100 ? \"completed\" : currentEnrollmentStatus,\n                lastAccessedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n        } catch (enrollmentError) {\n            console.error(`Error updating enrollment document for user ${userId}, course ${courseId}:`, enrollmentError);\n        // Decide if this error should propagate or be handled silently\n        }\n        // If course is completed, update user stats\n        if (allModulesCompleted && overallProgress === 100 && !progressData.completed) {\n            // Update user stats\n            const userStatsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/stats/courses`);\n            const userStatsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userStatsRef);\n            if (userStatsSnapshot.exists()) {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(userStatsRef, {\n                    completedCourses: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.increment)(1),\n                    lastCompletionDate: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now()\n                });\n            } else {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userStatsRef, {\n                    completedCourses: 1,\n                    lastCompletionDate: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now()\n                });\n            }\n        }\n    } catch (error) {\n        console.error(\"Error updating overall progress:\", error);\n    }\n};\n/**\n * Get all courses in progress for a user\n */ const getCoursesInProgress = async (userId)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/courseProgress`);\n        const progressSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(progressRef);\n        const coursesInProgress = [];\n        progressSnapshot.forEach((doc)=>{\n            coursesInProgress.push({\n                ...doc.data(),\n                courseId: doc.id,\n                userId\n            });\n        });\n        return coursesInProgress;\n    } catch (error) {\n        console.error(\"Error getting courses in progress:\", error);\n        return [];\n    }\n};\n/**\n * Reset course progress for a user\n */ const resetCourseProgress = async (userId, courseId)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `users/${userId}/courseProgress/${courseId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(progressRef, {\n            courseId,\n            userId,\n            startDate: new Date().toISOString(),\n            lastAccessDate: new Date().toISOString(),\n            completedLessons: [],\n            completedModules: [],\n            quizScores: {},\n            overallProgress: 0,\n            completed: false,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n    } catch (error) {\n        console.error(\"Error resetting course progress:\", error);\n    }\n};\n/**\n * Get lesson progress for a user\n */ const getLessonProgress = async (userId, courseId, moduleId, lessonId)=>{\n    try {\n        const progressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courseProgress\", `${userId}_${courseId}`);\n        const progressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(progressRef);\n        if (!progressDoc.exists()) {\n            return {\n                lessonId,\n                moduleId,\n                completed: false,\n                progress: 0,\n                timeSpent: 0,\n                currentPosition: 0,\n                bookmarks: []\n            };\n        }\n        const progressData = progressDoc.data();\n        const lessonKey = `${moduleId}_${lessonId}`;\n        // Return lesson-specific progress data\n        return progressData.lessonProgress && progressData.lessonProgress[lessonKey] ? progressData.lessonProgress[lessonKey] : {\n            lessonId,\n            moduleId,\n            completed: false,\n            progress: 0,\n            timeSpent: 0,\n            currentPosition: 0,\n            bookmarks: []\n        };\n    } catch (error) {\n        console.error(\"Error getting lesson progress:\", error);\n        return {\n            lessonId,\n            moduleId,\n            completed: false,\n            progress: 0,\n            timeSpent: 0,\n            currentPosition: 0,\n            bookmarks: []\n        };\n    }\n};\n/**\n * Sync course progress with optimized writes\n * This should be called less frequently, e.g., when user leaves the course page\n */ const syncCourseProgress = (userId, courseId)=>{\n    const docId = `${userId}_${courseId}`;\n    const cached = progressCache.get(docId);\n    if (!cached) {\n        return; // Nothing to sync\n    }\n    try {\n        // Get the latest progress from cache\n        const progress = cached.data; // We know it's CourseProgress if cached\n        // Queue the write to the main courseProgress document\n        // The original intention might have been to update a separate 'enrollments' collection,\n        // but the current `queueWrite` is for `courseProgress`.\n        // If a separate enrollments collection needs updating, that's a different logic.\n        // For now, this syncs the cached `courseProgress` data.\n        // The `progress` object itself is what's in `courseProgress/${docId}`\n        // So we are essentially re-queueing the latest state from cache.\n        queueWrite(`courseProgress/${docId}`, progress);\n    } catch (error) {\n        console.error(\"Error syncing course progress:\", error);\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/courseProgressService.ts\n");

/***/ }),

/***/ "./src/services/firebase.ts":
/*!**********************************!*\
  !*** ./src/services/firebase.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* binding */ app),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   firestore: () => (/* binding */ firestore),\n/* harmony export */   storage: () => (/* binding */ storage)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"firebase/app\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"firebase/auth\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"firebase/storage\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_app__WEBPACK_IMPORTED_MODULE_0__, firebase_auth__WEBPACK_IMPORTED_MODULE_1__, firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, firebase_storage__WEBPACK_IMPORTED_MODULE_3__]);\n([firebase_app__WEBPACK_IMPORTED_MODULE_0__, firebase_auth__WEBPACK_IMPORTED_MODULE_1__, firebase_firestore__WEBPACK_IMPORTED_MODULE_2__, firebase_storage__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBdi4YO2FV5hzYT1iT2GZFJVkhlcsrD2Vw\",\n    authDomain: \"gen-lang-client-00697788-5c2c3.firebaseapp.com\",\n    projectId: \"gen-lang-client-00697788-5c2c3\",\n    storageBucket: \"gen-lang-client-00697788-5c2c3.firebasestorage.app\",\n    messagingSenderId: \"846318340379\",\n    appId: \"1:846318340379:web:9da5ed83b960851563ebbe\",\n    measurementId: \"G-NECRD4FN4L\"\n};\n// Validate that all required Firebase config values are present\nif (!firebaseConfig.apiKey || !firebaseConfig.authDomain || !firebaseConfig.projectId || !firebaseConfig.storageBucket) {\n    console.error(\"Firebase configuration is incomplete. Make sure all required environment variables are set.\");\n}\n// Initialize Firebase\nconst app = !(0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)().length ? (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig) : (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)();\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\n// Initialize Firestore with persistence enabled (only in browser environment)\nconst firestore =  false ? 0 : (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_3__.getStorage)(app);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2VydmljZXMvZmlyZWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBNkQ7QUFDdEI7QUFDaUY7QUFDM0U7QUFFN0MseUJBQXlCO0FBQ3pCLE1BQU1TLGlCQUFpQjtJQUNyQkMsUUFBUUMseUNBQXdDO0lBQ2hERyxZQUFZSCxnREFBNEM7SUFDeERLLFdBQVdMLGdDQUEyQztJQUN0RE8sZUFBZVAsb0RBQStDO0lBQzlEUyxtQkFBbUJULGNBQW9EO0lBQ3ZFVyxPQUFPWCwyQ0FBdUM7SUFDOUNhLGVBQWViLGNBQStDO0FBQ2hFO0FBRUEsZ0VBQWdFO0FBQ2hFLElBQUksQ0FBQ0YsZUFBZUMsTUFBTSxJQUFJLENBQUNELGVBQWVLLFVBQVUsSUFBSSxDQUFDTCxlQUFlTyxTQUFTLElBQUksQ0FBQ1AsZUFBZVMsYUFBYSxFQUFFO0lBQ3RIUSxRQUFRQyxLQUFLLENBQUM7QUFDaEI7QUFFQSxzQkFBc0I7QUFDdEIsTUFBTUMsTUFBTSxDQUFDM0IscURBQU9BLEdBQUc0QixNQUFNLEdBQUc3QiwyREFBYUEsQ0FBQ1Msa0JBQWtCUCxvREFBTUE7QUFDdEUsTUFBTTRCLE9BQU8zQixzREFBT0EsQ0FBQ3lCO0FBRXJCLDhFQUE4RTtBQUM5RSxNQUFNRyxZQUFZLE1BQWtCLEdBQ2hDMUIsQ0FJQSxHQUNBRCxnRUFBWUEsQ0FBQ3dCO0FBRWpCLE1BQU1PLFVBQVUzQiw0REFBVUEsQ0FBQ29CO0FBRWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmFpbmluZy1wbGF0Zm9ybS8uL3NyYy9zZXJ2aWNlcy9maXJlYmFzZS50cz8wOGMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5pdGlhbGl6ZUFwcCwgZ2V0QXBwcywgZ2V0QXBwIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7Z2V0QXV0aCB9IGZyb20gJ2ZpcmViYXNlL2F1dGgnO1xuaW1wb3J0IHtnZXRGaXJlc3RvcmUsIGluaXRpYWxpemVGaXJlc3RvcmUsIHBlcnNpc3RlbnRMb2NhbENhY2hlLCBwZXJzaXN0ZW50U2luZ2xlVGFiTWFuYWdlciB9IGZyb20gJ2ZpcmViYXNlL2ZpcmVzdG9yZSc7XG5pbXBvcnQge2dldFN0b3JhZ2UgfSBmcm9tICdmaXJlYmFzZS9zdG9yYWdlJztcblxuLy8gRmlyZWJhc2UgY29uZmlndXJhdGlvblxuY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBJX0tFWSxcbiAgYXV0aERvbWFpbjogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfQVVUSF9ET01BSU4sXG4gIHByb2plY3RJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfUFJPSkVDVF9JRCxcbiAgc3RvcmFnZUJ1Y2tldDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfU1RPUkFHRV9CVUNLRVQsXG4gIG1lc3NhZ2luZ1NlbmRlcklkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lELFxuICBhcHBJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBQX0lELFxuICBtZWFzdXJlbWVudElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9NRUFTVVJFTUVOVF9JRCxcbn07XG5cbi8vIFZhbGlkYXRlIHRoYXQgYWxsIHJlcXVpcmVkIEZpcmViYXNlIGNvbmZpZyB2YWx1ZXMgYXJlIHByZXNlbnRcbmlmICghZmlyZWJhc2VDb25maWcuYXBpS2V5IHx8ICFmaXJlYmFzZUNvbmZpZy5hdXRoRG9tYWluIHx8ICFmaXJlYmFzZUNvbmZpZy5wcm9qZWN0SWQgfHwgIWZpcmViYXNlQ29uZmlnLnN0b3JhZ2VCdWNrZXQpIHtcbiAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgY29uZmlndXJhdGlvbiBpcyBpbmNvbXBsZXRlLiBNYWtlIHN1cmUgYWxsIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0LicpO1xufVxuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXG5jb25zdCBhcHAgPSAhZ2V0QXBwcygpLmxlbmd0aCA/IGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpIDogZ2V0QXBwKCk7XG5jb25zdCBhdXRoID0gZ2V0QXV0aChhcHApO1xuXG4vLyBJbml0aWFsaXplIEZpcmVzdG9yZSB3aXRoIHBlcnNpc3RlbmNlIGVuYWJsZWQgKG9ubHkgaW4gYnJvd3NlciBlbnZpcm9ubWVudClcbmNvbnN0IGZpcmVzdG9yZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnIFxuICA/IGluaXRpYWxpemVGaXJlc3RvcmUoYXBwLCB7XG4gICAgICBsb2NhbENhY2hlOiBwZXJzaXN0ZW50TG9jYWxDYWNoZSh7XG4gICAgICAgIHRhYk1hbmFnZXI6IHBlcnNpc3RlbnRTaW5nbGVUYWJNYW5hZ2VyKHtmb3JjZU93bmVyc2hpcDogdHJ1ZSB9KVxuICAgIH0pXG4gIH0pXG4gIDogZ2V0RmlyZXN0b3JlKGFwcCk7XG5cbmNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlKGFwcCk7XG5cbmV4cG9ydCB7YXBwLCBhdXRoLCBmaXJlc3RvcmUsIHN0b3JhZ2UgfTtcblxuXG5cbiJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZ2V0QXBwcyIsImdldEFwcCIsImdldEF1dGgiLCJnZXRGaXJlc3RvcmUiLCJpbml0aWFsaXplRmlyZXN0b3JlIiwicGVyc2lzdGVudExvY2FsQ2FjaGUiLCJwZXJzaXN0ZW50U2luZ2xlVGFiTWFuYWdlciIsImdldFN0b3JhZ2UiLCJmaXJlYmFzZUNvbmZpZyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9BUElfS0VZIiwiYXV0aERvbWFpbiIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FVVEhfRE9NQUlOIiwicHJvamVjdElkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfUFJPSkVDVF9JRCIsInN0b3JhZ2VCdWNrZXQiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9TVE9SQUdFX0JVQ0tFVCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVTU0FHSU5HX1NFTkRFUl9JRCIsImFwcElkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBQX0lEIiwibWVhc3VyZW1lbnRJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FQVNVUkVNRU5UX0lEIiwiY29uc29sZSIsImVycm9yIiwiYXBwIiwibGVuZ3RoIiwiYXV0aCIsImZpcmVzdG9yZSIsImxvY2FsQ2FjaGUiLCJ0YWJNYW5hZ2VyIiwiZm9yY2VPd25lcnNoaXAiLCJzdG9yYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/services/firebase.ts\n");

/***/ }),

/***/ "./src/services/moduleService.ts":
/*!***************************************!*\
  !*** ./src/services/moduleService.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLesson: () => (/* binding */ createLesson),\n/* harmony export */   createModule: () => (/* binding */ createModule),\n/* harmony export */   deleteLesson: () => (/* binding */ deleteLesson),\n/* harmony export */   deleteModule: () => (/* binding */ deleteModule),\n/* harmony export */   fetchLesson: () => (/* binding */ fetchLesson),\n/* harmony export */   fetchLessons: () => (/* binding */ fetchLessons),\n/* harmony export */   fetchModule: () => (/* binding */ fetchModule),\n/* harmony export */   fetchModules: () => (/* binding */ fetchModules),\n/* harmony export */   updateCourseLessonCount: () => (/* binding */ updateCourseLessonCount),\n/* harmony export */   updateCourseModuleCount: () => (/* binding */ updateCourseModuleCount),\n/* harmony export */   updateLesson: () => (/* binding */ updateLesson),\n/* harmony export */   updateLessonOrder: () => (/* binding */ updateLessonOrder),\n/* harmony export */   updateModule: () => (/* binding */ updateModule),\n/* harmony export */   updateModuleLessonCount: () => (/* binding */ updateModuleLessonCount),\n/* harmony export */   updateModuleOrder: () => (/* binding */ updateModuleOrder),\n/* harmony export */   verifyAllCourseModuleCounts: () => (/* binding */ verifyAllCourseModuleCounts),\n/* harmony export */   verifyAllModuleLessonCounts: () => (/* binding */ verifyAllModuleLessonCounts)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _services_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/firebase */ \"./src/services/firebase.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _services_firebase__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _services_firebase__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Fetch all modules for a course\n */ const fetchModules = async (courseId)=>{\n    try {\n        const modulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(modulesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"order\", \"asc\"));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const modulesList = [];\n        querySnapshot.forEach((doc)=>{\n            modulesList.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return modulesList;\n    } catch (error) {\n        console.error(\"Error fetching modules:\", error);\n        throw error;\n    }\n};\n/**\n * Fetch a single module by ID\n */ const fetchModule = async (courseId, moduleId)=>{\n    try {\n        const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}`);\n        const moduleDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(moduleRef);\n        if (!moduleDoc.exists()) {\n            throw new Error(\"Module not found\");\n        }\n        return {\n            id: moduleDoc.id,\n            ...moduleDoc.data()\n        };\n    } catch (error) {\n        console.error(\"Error fetching module:\", error);\n        throw error;\n    }\n};\n/**\n * Create a new module\n */ const createModule = async (courseId, moduleData)=>{\n    try {\n        // Get the highest order value\n        const modules = await fetchModules(courseId);\n        const highestOrder = modules.length > 0 ? Math.max(...modules.map((m)=>m.order)) : -1;\n        const now = new Date().toISOString();\n        const newModule = {\n            ...moduleData,\n            order: highestOrder + 1,\n            createdAt: now,\n            updatedAt: now\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`), newModule);\n        // Update the course's module count\n        await updateCourseModuleCount(courseId);\n        return docRef.id;\n    } catch (error) {\n        console.error(\"Error creating module:\", error);\n        throw error;\n    }\n};\n/**\n * Update an existing module\n */ const updateModule = async (courseId, moduleId, moduleData)=>{\n    try {\n        const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(moduleRef, {\n            ...moduleData,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error updating module:\", error);\n        throw error;\n    }\n};\n/**\n * Delete a module and all its lessons\n */ const deleteModule = async (courseId, moduleId)=>{\n    try {\n        // First, get all lessons for this module\n        const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`);\n        const lessonsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(lessonsRef);\n        // Use a batch to delete all lessons and the module\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore);\n        // Add lesson deletions to batch\n        lessonsSnapshot.forEach((lessonDoc)=>{\n            batch.delete((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons/${lessonDoc.id}`));\n        });\n        // Add module deletion to batch\n        batch.delete((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}`));\n        // Commit the batch\n        await batch.commit();\n        // Update the course's module count\n        await updateCourseModuleCount(courseId);\n        // Update the course's total lesson count\n        await updateCourseLessonCount(courseId);\n    } catch (error) {\n        console.error(\"Error deleting module:\", error);\n        throw error;\n    }\n};\n/**\n * Update the order of modules\n */ const updateModuleOrder = async (courseId, moduleOrders)=>{\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore);\n        moduleOrders.forEach(({ id, order })=>{\n            const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${id}`);\n            batch.update(moduleRef, {\n                order\n            });\n        });\n        await batch.commit();\n    } catch (error) {\n        console.error(\"Error updating module order:\", error);\n        throw error;\n    }\n};\n/**\n * Fetch all lessons for a module\n */ const fetchLessons = async (courseId, moduleId)=>{\n    try {\n        const lessonsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(lessonsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"order\", \"asc\"));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const lessonsList = [];\n        querySnapshot.forEach((doc)=>{\n            lessonsList.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return lessonsList;\n    } catch (error) {\n        console.error(\"Error fetching lessons:\", error);\n        throw error;\n    }\n};\n/**\n * Fetch a single lesson by ID\n */ const fetchLesson = async (courseId, moduleId, lessonId)=>{\n    try {\n        const lessonRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons/${lessonId}`);\n        const lessonDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(lessonRef);\n        if (!lessonDoc.exists()) {\n            throw new Error(\"Lesson not found\");\n        }\n        return {\n            id: lessonDoc.id,\n            ...lessonDoc.data()\n        };\n    } catch (error) {\n        console.error(\"Error fetching lesson:\", error);\n        throw error;\n    }\n};\n/**\n * Create a new lesson\n */ const createLesson = async (courseId, moduleId, lessonData)=>{\n    try {\n        // Get the highest order value\n        const lessons = await fetchLessons(courseId, moduleId);\n        const highestOrder = lessons.length > 0 ? Math.max(...lessons.map((l)=>l.order)) : -1;\n        const now = new Date().toISOString();\n        const newLesson = {\n            ...lessonData,\n            order: highestOrder + 1,\n            createdAt: now,\n            updatedAt: now\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons`), newLesson);\n        // Update the module's lesson count\n        await updateModuleLessonCount(courseId, moduleId);\n        // Update the course's total lesson count\n        await updateCourseLessonCount(courseId);\n        return docRef.id;\n    } catch (error) {\n        console.error(\"Error creating lesson:\", error);\n        throw error;\n    }\n};\n/**\n * Update an existing lesson\n */ const updateLesson = async (courseId, moduleId, lessonId, lessonData)=>{\n    try {\n        const lessonRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons/${lessonId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(lessonRef, {\n            ...lessonData,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error updating lesson:\", error);\n        throw error;\n    }\n};\n/**\n * Delete a lesson\n */ const deleteLesson = async (courseId, moduleId, lessonId)=>{\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons/${lessonId}`));\n        // Update the module's lesson count\n        await updateModuleLessonCount(courseId, moduleId);\n        // Update the course's total lesson count\n        await updateCourseLessonCount(courseId);\n    } catch (error) {\n        console.error(\"Error deleting lesson:\", error);\n        throw error;\n    }\n};\n/**\n * Update the order of lessons\n */ const updateLessonOrder = async (courseId, moduleId, lessonOrders)=>{\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore);\n        lessonOrders.forEach(({ id, order })=>{\n            const lessonRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}/lessons/${id}`);\n            batch.update(lessonRef, {\n                order\n            });\n        });\n        await batch.commit();\n    } catch (error) {\n        console.error(\"Error updating lesson order:\", error);\n        throw error;\n    }\n};\n/**\n * Update the lesson count for a module\n */ const updateModuleLessonCount = async (courseId, moduleId)=>{\n    try {\n        const lessons = await fetchLessons(courseId, moduleId);\n        const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(moduleRef, {\n            lessonCount: lessons.length,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error updating module lesson count:\", error);\n        throw error;\n    }\n};\n/**\n * Update the module count for a course\n */ // ModuleService.ts\nconst updateCourseModuleCount = async (courseId)=>{\n    try {\n        // Directly query the modules subcollection to get an accurate count\n        const modulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n        const modulesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(modulesRef); // <--- This gets the actual count\n        const moduleCount = modulesSnapshot.size;\n        // Get module IDs for the modulesList field\n        const moduleIds = modulesSnapshot.docs.map((doc)=>doc.id);\n        const courseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}`);\n        const courseDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(courseRef);\n        if (!courseDoc.exists()) {\n            console.error(`Course document with ID ${courseId} does not exist.`);\n            // Consider throwing an error or handling this case more explicitly\n            // if a course document MUST exist when modules are being managed.\n            return;\n        }\n        // Update the course document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(courseRef, {\n            modules: moduleCount,\n            modulesList: moduleIds,\n            updatedAt: new Date().toISOString() // Or serverTimestamp()\n        });\n        console.log(`Updated module count for course ${courseId} to ${moduleCount}`);\n    } catch (error) {\n        console.error(\"Error updating course module count:\", error);\n        throw error; // Re-throw to allow calling function to handle it\n    }\n};\n/**\n * Verify and update all module lesson counts for a course\n */ const verifyAllModuleLessonCounts = async (courseId)=>{\n    try {\n        const modules = await fetchModules(courseId);\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore);\n        // Update each module's lesson count\n        for (const moduleItem of modules){\n            const lessons = await fetchLessons(courseId, moduleItem.id);\n            const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules/${moduleItem.id}`);\n            batch.update(moduleRef, {\n                lessonCount: lessons.length,\n                updatedAt: new Date().toISOString()\n            });\n        }\n        // Commit all updates in a single batch\n        await batch.commit();\n        // Now update the course's total lesson count\n        await updateCourseLessonCount(courseId);\n    } catch (error) {\n        console.error(\"Error verifying module lesson counts:\", error);\n        throw error;\n    }\n};\n/**\n * Update the total lesson count for a course\n */ const updateCourseLessonCount = async (courseId)=>{\n    try {\n        const modules = await fetchModules(courseId);\n        let totalLessons = 0;\n        // Sum up lesson counts from all modules using their lessonCount property\n        // This is more efficient than fetching all lessons for each module\n        for (const moduleData of modules){\n            // Use the module's lessonCount if available, otherwise fetch lessons\n            if (typeof moduleData.lessonCount === \"number\") {\n                totalLessons += moduleData.lessonCount;\n            } else {\n                const lessons = await fetchLessons(courseId, moduleData.id);\n                totalLessons += lessons.length;\n            }\n        }\n        const courseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}`);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(courseRef, {\n            lessons: totalLessons,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error updating course lesson count:\", error);\n        throw error;\n    }\n};\n/**\n * Verify and fix module counts for all courses\n * This utility function can be used to ensure all courses have correct module counts\n */ // ModuleService.ts - verifyAllCourseModuleCounts\n// This function is good. No changes needed here for its logic.\nconst verifyAllCourseModuleCounts = async ()=>{\n    try {\n        const coursesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"courses\");\n        const coursesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(coursesRef);\n        let fixedCount = 0;\n        const totalCourses = coursesSnapshot.size;\n        const errorCourses = [];\n        for (const courseDoc of coursesSnapshot.docs){\n            const courseId = courseDoc.id;\n            const courseData = courseDoc.data();\n            let needsUpdate = false;\n            try {\n                const modulesSubcollectionRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}/modules`);\n                const modulesSubcollectionSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(modulesSubcollectionRef);\n                const actualModuleCount = modulesSubcollectionSnapshot.size; // Number\n                const actualModuleIds = modulesSubcollectionSnapshot.docs.map((doc)=>doc.id); // string[]\n                const dataToUpdate = {\n                    updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now()\n                };\n                // Check if 'modules' field needs fixing (either wrong type or wrong value)\n                if (typeof courseData.modules !== \"number\" || courseData.modules !== actualModuleCount) {\n                    dataToUpdate.modules = actualModuleCount;\n                    needsUpdate = true;\n                    console.log(`Course ${courseId}: Fixing 'modules' field. Stored: ${courseData.modules} (type: ${typeof courseData.modules}), Actual count: ${actualModuleCount}`);\n                }\n                // Check if 'modulesList' field needs fixing or adding\n                // Simple check: if it doesn't exist or its length doesn't match actual count\n                // More robust: deep comparison of arrays if order matters and is guaranteed\n                if (!courseData.modulesList || !Array.isArray(courseData.modulesList) || courseData.modulesList.length !== actualModuleIds.length || !actualModuleIds.every((id)=>Array.isArray(courseData.modulesList) && courseData.modulesList.includes(id)) || // Ensure all actual IDs are present\n                !(Array.isArray(courseData.modulesList) && courseData.modulesList.every((id)=>typeof id === \"string\" && actualModuleIds.includes(id)) // Ensure all stored IDs are actual and strings\n                )) {\n                    dataToUpdate.modulesList = actualModuleIds;\n                    needsUpdate = true;\n                    console.log(`Course ${courseId}: Fixing 'modulesList' field.`);\n                }\n                // If 'modulesCount' field exists and is different, you might want to remove it or ensure it's also correct\n                // For now, focusing on 'modules' and 'modulesList'\n                // Example: if (courseData.hasOwnProperty('modulesCount')) {dataToUpdate.modulesCount = deleteField(); needsUpdate = true; }\n                if (needsUpdate) {\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, `courses/${courseId}`), dataToUpdate);\n                    fixedCount++;\n                }\n            } catch (err) {\n                console.error(`Error processing course ${courseId} during verification:`, err);\n                errorCourses.push(courseId);\n            }\n        }\n        console.log(`Verification complete. Processed ${totalCourses} courses. Fixed/Updated ${fixedCount} courses. Errors on: ${errorCourses.join(\", \")}`);\n        return {\n            fixed: fixedCount,\n            total: totalCourses,\n            errors: errorCourses\n        };\n    } catch (error) {\n        console.error(\"Error verifying course module counts:\", error);\n        throw error;\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/moduleService.ts\n");

/***/ }),

/***/ "./src/services/notificationService.ts":
/*!*********************************************!*\
  !*** ./src/services/notificationService.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotification: () => (/* binding */ createNotification),\n/* harmony export */   deleteAllNotifications: () => (/* binding */ deleteAllNotifications),\n/* harmony export */   deleteExpiredNotifications: () => (/* binding */ deleteExpiredNotifications),\n/* harmony export */   deleteNotification: () => (/* binding */ deleteNotification),\n/* harmony export */   getUnreadNotificationsCount: () => (/* binding */ getUnreadNotificationsCount),\n/* harmony export */   getUserNotifications: () => (/* binding */ getUserNotifications),\n/* harmony export */   markAllNotificationsAsRead: () => (/* binding */ markAllNotificationsAsRead),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _services_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/firebase */ \"./src/services/firebase.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _services_firebase__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _services_firebase__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Create a notification\n */ const createNotification = async (notification)=>{\n    try {\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        const now = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)();\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)(notificationsRef, {\n            ...notification,\n            isRead: false,\n            createdAt: now\n        });\n        return docRef.id;\n    } catch (error) {\n        console.error(\"Error creating notification:\", error);\n        throw error;\n    }\n};\n/**\n * Get notifications for a user\n */ const getUserNotifications = async (userId, limitCount = 50)=>{\n    try {\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        // Try to use the composite index first\n        try {\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(limitCount));\n            const notificationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            return notificationsSnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n        } catch (indexError) {\n            // If we get an index error, fall back to a simpler query without ordering\n            console.warn(\"Index error, falling back to simpler query:\", indexError);\n            // Fallback query without ordering\n            const fallbackQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(limitCount));\n            const fallbackSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(fallbackQuery);\n            // Sort the results in memory\n            const notifications = fallbackSnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            // Sort by createdAt in descending order if the field exists\n            return notifications.sort((a, b)=>{\n                const dateA = a.createdAt ? a.createdAt instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp ? a.createdAt.toMillis() : new Date(a.createdAt).getTime() : 0;\n                const dateB = b.createdAt ? b.createdAt instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp ? b.createdAt.toMillis() : new Date(b.createdAt).getTime() : 0;\n                return dateB - dateA;\n            });\n        }\n    } catch (error) {\n        console.error(\"Error getting user notifications:\", error);\n        // Return empty array instead of throwing to prevent app crashes\n        return [];\n    }\n};\n/**\n * Get unread notifications count for a user\n */ const getUnreadNotificationsCount = async (userId)=>{\n    try {\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isRead\", \"==\", false));\n        const notificationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return notificationsSnapshot.size;\n    } catch (error) {\n        console.error(\"Error getting unread notifications count:\", error);\n        throw error;\n    }\n};\n/**\n * Mark a notification as read\n */ const markNotificationAsRead = async (notificationId)=>{\n    try {\n        const notificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\", notificationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(notificationRef, {\n            isRead: true\n        });\n    } catch (error) {\n        console.error(\"Error marking notification as read:\", error);\n        throw error;\n    }\n};\n/**\n * Mark all notifications as read for a user\n */ const markAllNotificationsAsRead = async (userId)=>{\n    try {\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isRead\", \"==\", false));\n        const notificationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        // Update each notification\n        const updatePromises = notificationsSnapshot.docs.map((doc)=>(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(doc.ref, {\n                isRead: true\n            }));\n        await Promise.all(updatePromises);\n    } catch (error) {\n        console.error(\"Error marking all notifications as read:\", error);\n        throw error;\n    }\n};\n/**\n * Delete a notification\n */ const deleteNotification = async (notificationId)=>{\n    try {\n        const notificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\", notificationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(notificationRef);\n    } catch (error) {\n        console.error(\"Error deleting notification:\", error);\n        throw error;\n    }\n};\n/**\n * Delete all notifications for a user\n */ const deleteAllNotifications = async (userId)=>{\n    try {\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId));\n        const notificationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        // Delete each notification\n        const deletePromises = notificationsSnapshot.docs.map((doc)=>(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(doc.ref));\n        await Promise.all(deletePromises);\n    } catch (error) {\n        console.error(\"Error deleting all notifications:\", error);\n        throw error;\n    }\n};\n/**\n * Delete expired notifications\n */ const deleteExpiredNotifications = async ()=>{\n    try {\n        const now = new Date().toISOString();\n        const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_services_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"notifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"expiresAt\", \"<=\", now));\n        const notificationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        // Delete each expired notification\n        const deletePromises = notificationsSnapshot.docs.map((doc)=>(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(doc.ref));\n        await Promise.all(deletePromises);\n        return notificationsSnapshot.size;\n    } catch (error) {\n        console.error(\"Error deleting expired notifications:\", error);\n        return 0;\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/notificationService.ts\n");

/***/ }),

/***/ "./src/services/reminderService.ts":
/*!*****************************************!*\
  !*** ./src/services/reminderService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkInactiveEnrollments: () => (/* binding */ checkInactiveEnrollments),\n/* harmony export */   createCompletionReminder: () => (/* binding */ createCompletionReminder),\n/* harmony export */   createInactivityReminder: () => (/* binding */ createInactivityReminder),\n/* harmony export */   createProgressReminder: () => (/* binding */ createProgressReminder),\n/* harmony export */   getUserReminderSettings: () => (/* binding */ getUserReminderSettings),\n/* harmony export */   getUserReminders: () => (/* binding */ getUserReminders),\n/* harmony export */   markReminderAsRead: () => (/* binding */ markReminderAsRead),\n/* harmony export */   processDueReminders: () => (/* binding */ processDueReminders),\n/* harmony export */   updateProgressReminders: () => (/* binding */ updateProgressReminders),\n/* harmony export */   updateUserReminderSettings: () => (/* binding */ updateUserReminderSettings)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"firebase/firestore\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"./src/services/firebase.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_firestore__WEBPACK_IMPORTED_MODULE_0__, _firebase__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Get reminder settings for a user\n */ const getUserReminderSettings = async (userId)=>{\n    try {\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"users\", userId));\n        if (!userDoc.exists()) {\n            throw new Error(\"User not found\");\n        }\n        const userData = userDoc.data();\n        // Return reminder settings or default values\n        return {\n            enabled: userData.reminderSettings?.enabled ?? true,\n            frequency: userData.reminderSettings?.frequency ?? \"weekly\",\n            lastSent: userData.reminderSettings?.lastSent\n        };\n    } catch (error) {\n        console.error(\"Error getting user reminder settings:\", error);\n        // Return default settings\n        return {\n            enabled: true,\n            frequency: \"weekly\"\n        };\n    }\n};\n/**\n * Update reminder settings for a user\n */ const updateUserReminderSettings = async (userId, settings)=>{\n    try {\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"users\", userId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(userRef, {\n            \"reminderSettings.enabled\": settings.enabled !== undefined ? settings.enabled : true,\n            \"reminderSettings.frequency\": settings.frequency || \"weekly\"\n        });\n    } catch (error) {\n        console.error(\"Error updating user reminder settings:\", error);\n        throw error;\n    }\n};\n/**\n * Get all reminders for a user\n */ const getUserReminders = async (userId)=>{\n    try {\n        const remindersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"in\", [\n            \"pending\",\n            \"sent\"\n        ]));\n        const remindersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(remindersQuery);\n        const reminders = [];\n        remindersSnapshot.forEach((doc)=>{\n            const data = doc.data();\n            reminders.push({\n                id: doc.id,\n                userId: data.userId,\n                courseId: data.courseId,\n                courseName: data.courseName,\n                type: data.type,\n                message: data.message,\n                status: data.status,\n                createdAt: data.createdAt,\n                scheduledFor: data.scheduledFor,\n                sentAt: data.sentAt,\n                readAt: data.readAt\n            });\n        });\n        return reminders;\n    } catch (error) {\n        console.error(\"Error getting user reminders:\", error);\n        return [];\n    }\n};\n/**\n * Mark a reminder as read\n */ const markReminderAsRead = async (reminderId)=>{\n    try {\n        const reminderRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\", reminderId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(reminderRef, {\n            status: \"read\",\n            readAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n    } catch (error) {\n        console.error(\"Error marking reminder as read:\", error);\n        throw error;\n    }\n};\n/**\n * Create a progress reminder for a user\n */ const createProgressReminder = async (userId, courseId, courseName, progress)=>{\n    try {\n        // Check if user has reminder settings enabled\n        const settings = await getUserReminderSettings(userId);\n        if (!settings.enabled) {\n            return;\n        }\n        // Create reminder message based on progress\n        let message = \"\";\n        if (progress < 25) {\n            message = `You've started the \"${courseName}\" course. Continue learning to improve your skills!`;\n        } else if (progress < 50) {\n            message = `You're making progress in \"${courseName}\". Keep going to reach the halfway point!`;\n        } else if (progress < 75) {\n            message = `You're more than halfway through \"${courseName}\". Keep up the good work!`;\n        } else if (progress < 100) {\n            message = `You're almost done with \"${courseName}\". Just a little more to complete the course!`;\n        }\n        if (!message) {\n            return;\n        }\n        // Calculate scheduled date based on frequency\n        const now = new Date();\n        const scheduledDate = new Date();\n        switch(settings.frequency){\n            case \"daily\":\n                scheduledDate.setDate(now.getDate() + 1);\n                break;\n            case \"weekly\":\n                scheduledDate.setDate(now.getDate() + 7);\n                break;\n            case \"monthly\":\n                scheduledDate.setMonth(now.getMonth() + 1);\n                break;\n        }\n        // Create reminder\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), {\n            userId,\n            courseId,\n            courseName,\n            type: \"progress\",\n            message,\n            status: \"pending\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            scheduledFor: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(scheduledDate)\n        });\n    } catch (error) {\n        console.error(\"Error creating progress reminder:\", error);\n    }\n};\n/**\n * Create an inactivity reminder for a user\n */ const createInactivityReminder = async (userId, courseId, courseName, lastAccessedDays)=>{\n    try {\n        // Check if user has reminder settings enabled\n        const settings = await getUserReminderSettings(userId);\n        if (!settings.enabled) {\n            return;\n        }\n        // Create reminder message based on inactivity\n        let message = \"\";\n        if (lastAccessedDays >= 7 && lastAccessedDays < 14) {\n            message = `It's been a week since you last accessed \"${courseName}\". Don't lose your momentum!`;\n        } else if (lastAccessedDays >= 14 && lastAccessedDays < 30) {\n            message = `It's been two weeks since you last accessed \"${courseName}\". Continue your learning journey!`;\n        } else if (lastAccessedDays >= 30) {\n            message = `It's been a month since you last accessed \"${courseName}\". Don't forget to complete your course!`;\n        }\n        if (!message) {\n            return;\n        }\n        // Calculate scheduled date (send immediately for inactivity)\n        const now = new Date();\n        // Create reminder\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), {\n            userId,\n            courseId,\n            courseName,\n            type: \"inactivity\",\n            message,\n            status: \"pending\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            scheduledFor: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(now)\n        });\n    } catch (error) {\n        console.error(\"Error creating inactivity reminder:\", error);\n    }\n};\n/**\n * Create a completion reminder for a user\n */ const createCompletionReminder = async (userId, courseId, courseName)=>{\n    try {\n        // Create reminder message\n        const message = `Congratulations! You've completed \"${courseName}\". Don't forget to download your certificate!`;\n        // Create reminder (send immediately for completion)\n        const now = new Date();\n        // Create reminder\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), {\n            userId,\n            courseId,\n            courseName,\n            type: \"completion\",\n            message,\n            status: \"pending\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            scheduledFor: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(now)\n        });\n    } catch (error) {\n        console.error(\"Error creating completion reminder:\", error);\n    }\n};\n/**\n * Process reminders that are due to be sent\n * This would typically be called by a scheduled function\n */ const processDueReminders = async ()=>{\n    try {\n        const now = firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now();\n        // Query for reminders that are due\n        const remindersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"pending\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"scheduledFor\", \"<=\", now));\n        const remindersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(remindersQuery);\n        let count = 0;\n        // Process each reminder\n        for (const reminderDoc of remindersSnapshot.docs){\n            const reminderRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\", reminderDoc.id);\n            // Update reminder status\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(reminderRef, {\n                status: \"sent\",\n                sentAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            // Here you would typically send an email or push notification\n            // This would be integrated with your notification service\n            count++;\n        }\n        return count;\n    } catch (error) {\n        console.error(\"Error processing due reminders:\", error);\n        return 0;\n    }\n};\n/**\n * Check for inactive enrollments and create reminders\n * This would typically be called by a scheduled function\n */ const checkInactiveEnrollments = async ()=>{\n    try {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const sevenDaysAgoTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(sevenDaysAgo);\n        // Query for enrollments that haven't been accessed in a while\n        const enrollmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"enrollments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"lastAccessedAt\", \"<=\", sevenDaysAgoTimestamp), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"active\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"progress\", \"<\", 100));\n        const enrollmentsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(enrollmentsQuery);\n        let count = 0;\n        // Process each enrollment\n        for (const enrollmentDoc of enrollmentsSnapshot.docs){\n            const enrollmentData = enrollmentDoc.data();\n            // Calculate days since last access\n            const lastAccessedAt = enrollmentData.lastAccessedAt.toDate();\n            const daysSinceLastAccess = Math.floor((now.getTime() - lastAccessedAt.getTime()) / (24 * 60 * 60 * 1000));\n            // Create inactivity reminder\n            await createInactivityReminder(enrollmentData.userId, enrollmentData.courseId, enrollmentData.courseName, daysSinceLastAccess);\n            count++;\n        }\n        return count;\n    } catch (error) {\n        console.error(\"Error checking inactive enrollments:\", error);\n        return 0;\n    }\n};\n/**\n * Update progress reminders for a user's enrollment\n */ const updateProgressReminders = async (userId, courseId, courseName, progress)=>{\n    try {\n        // Only create reminders at certain progress milestones\n        const milestones = [\n            25,\n            50,\n            75,\n            90\n        ];\n        // Find the highest milestone achieved\n        const achievedMilestone = milestones.filter((milestone)=>progress >= milestone).pop();\n        if (achievedMilestone) {\n            // Check if a reminder already exists for this milestone\n            const remindersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"courseId\", \"==\", courseId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"type\", \"==\", \"progress\"));\n            const remindersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(remindersQuery);\n            // If no reminders exist or the most recent one is for a lower milestone, create a new one\n            if (remindersSnapshot.empty) {\n                await createProgressReminder(userId, courseId, courseName, progress);\n            }\n        }\n        // If course is completed, create completion reminder\n        if (progress >= 100) {\n            // Check if a completion reminder already exists\n            const completionRemindersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.firestore, \"reminders\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"courseId\", \"==\", courseId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"type\", \"==\", \"completion\"));\n            const completionRemindersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(completionRemindersQuery);\n            // If no completion reminder exists, create one\n            if (completionRemindersSnapshot.empty) {\n                await createCompletionReminder(userId, courseId, courseName);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error updating progress reminders:\", error);\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/reminderService.ts\n");

/***/ }),

/***/ "./src/utils/createEmotionCache.ts":
/*!*****************************************!*\
  !*** ./src/utils/createEmotionCache.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createEmotionCache)\n/* harmony export */ });\n/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/cache */ \"@emotion/cache\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_cache__WEBPACK_IMPORTED_MODULE_0__]);\n_emotion_cache__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * Creates an Emotion cache for styling\n * @return {Object} Emotion cache instance\n */ function createEmotionCache() {\n    return (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        key: \"css\",\n        prepend: true\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvY3JlYXRlRW1vdGlvbkNhY2hlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDO0FBRXpDOzs7Q0FHQyxHQUNjLFNBQVNDO0lBQ3RCLE9BQU9ELDBEQUFXQSxDQUFDO1FBQUNFLEtBQUs7UUFBT0MsU0FBUztJQUFJO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhaW5pbmctcGxhdGZvcm0vLi9zcmMvdXRpbHMvY3JlYXRlRW1vdGlvbkNhY2hlLnRzP2ViYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gXCJAZW1vdGlvbi9jYWNoZVwiO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gRW1vdGlvbiBjYWNoZSBmb3Igc3R5bGluZ1xuICogQHJldHVybiB7T2JqZWN0fSBFbW90aW9uIGNhY2hlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIGNyZWF0ZUNhY2hlKHtrZXk6IFwiY3NzXCIsIHByZXBlbmQ6IHRydWV9KTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDYWNoZSIsImNyZWF0ZUVtb3Rpb25DYWNoZSIsImtleSIsInByZXBlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/createEmotionCache.ts\n");

/***/ }),

/***/ "./src/utils/digitalSignature.ts":
/*!***************************************!*\
  !*** ./src/utils/digitalSignature.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSignature: () => (/* binding */ generateSignature),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Secret key for signing certificates\n * In a production environment, this should be stored securely in environment\n * variables\n */ const SECRET_KEY = process.env.CERTIFICATE_SIGNATURE_SECRET || \"certificate-signature-secret-key\";\n/**\n * Generate a digital signature for a certificate\n * @param {Record<string, unknown>} data The data to sign\n * @return {string} The digital signature\n */ const generateSignature = (data)=>{\n    // Create a deterministic string representation of the data\n    const sortedData = sortObjectKeys(data);\n    const dataString = JSON.stringify(sortedData);\n    // Generate HMAC signature using SHA-256\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", SECRET_KEY).update(dataString).digest(\"hex\");\n};\n/**\n * Verify a digital signature for a certificate\n * @param {Record<string, unknown>} data The data that was signed\n * @param {string} signature The signature to verify\n * @return {boolean} Whether the signature is valid\n */ const verifySignature = (data, signature)=>{\n    // Generate a new signature from the data\n    const expectedSignature = generateSignature(data);\n    // Compare the signatures\n    return expectedSignature === signature;\n};\n/**\n * Sort object keys recursively to ensure deterministic JSON stringification\n * @param {unknown} obj The object to sort\n * @return {unknown} A new object with sorted keys\n */ const sortObjectKeys = (obj)=>{\n    // If not an object or null, return as is\n    if (obj === null || typeof obj !== \"object\" || Array.isArray(obj)) {\n        return obj;\n    }\n    // Get all keys and sort them\n    const sortedKeys = Object.keys(obj).sort();\n    // Create a new object with sorted keys\n    const sortedObj = {};\n    for (const key of sortedKeys){\n        sortedObj[key] = sortObjectKeys(obj[key]);\n    }\n    return sortedObj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvZGlnaXRhbFNpZ25hdHVyZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtDO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxhQUFhQyxRQUFRQyxHQUFHLENBQUNDLDRCQUE0QixJQUN6RDtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNQyxvQkFBb0IsQ0FBQ0M7SUFDaEMsMkRBQTJEO0lBQzNELE1BQU1DLGFBQWFDLGVBQWVGO0lBQ2xDLE1BQU1HLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFFbEMsd0NBQXdDO0lBQ3hDLE9BQU9QLGtEQUFVQSxDQUFDLFVBQVVDLFlBQ3pCVyxNQUFNLENBQUNILFlBQ1BJLE1BQU0sQ0FBQztBQUNaLEVBQUU7QUFFRjs7Ozs7Q0FLQyxHQUNNLE1BQU1DLGtCQUFrQixDQUM3QlIsTUFDQVM7SUFFQSx5Q0FBeUM7SUFDekMsTUFBTUMsb0JBQW9CWCxrQkFBa0JDO0lBRTVDLHlCQUF5QjtJQUN6QixPQUFPVSxzQkFBc0JEO0FBQy9CLEVBQUU7QUFFRjs7OztDQUlDLEdBQ0QsTUFBTVAsaUJBQWlCLENBQUNTO0lBQ3RCLHlDQUF5QztJQUN6QyxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZQyxNQUFNQyxPQUFPLENBQUNGLE1BQU07UUFDakUsT0FBT0E7SUFDWDtJQUVFLDZCQUE2QjtJQUM3QixNQUFNRyxhQUFhQyxPQUFPQyxJQUFJLENBQUNMLEtBQWdDTSxJQUFJO0lBRW5FLHVDQUF1QztJQUN2QyxNQUFNQyxZQUFxQyxDQUFDO0lBQzVDLEtBQUssTUFBTUMsT0FBT0wsV0FBWTtRQUM1QkksU0FBUyxDQUFDQyxJQUFJLEdBQUdqQixlQUFlLEdBQWdDLENBQUNpQixJQUFJO0lBQ3pFO0lBRUUsT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWluaW5nLXBsYXRmb3JtLy4vc3JjL3V0aWxzL2RpZ2l0YWxTaWduYXR1cmUudHM/MjEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZUhtYWN9IGZyb20gXCJjcnlwdG9cIjtcblxuLyoqXG4gKiBTZWNyZXQga2V5IGZvciBzaWduaW5nIGNlcnRpZmljYXRlc1xuICogSW4gYSBwcm9kdWN0aW9uIGVudmlyb25tZW50LCB0aGlzIHNob3VsZCBiZSBzdG9yZWQgc2VjdXJlbHkgaW4gZW52aXJvbm1lbnRcbiAqIHZhcmlhYmxlc1xuICovXG5jb25zdCBTRUNSRVRfS0VZID0gcHJvY2Vzcy5lbnYuQ0VSVElGSUNBVEVfU0lHTkFUVVJFX1NFQ1JFVCB8fFxuICBcImNlcnRpZmljYXRlLXNpZ25hdHVyZS1zZWNyZXQta2V5XCI7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBkaWdpdGFsIHNpZ25hdHVyZSBmb3IgYSBjZXJ0aWZpY2F0ZVxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gZGF0YSBUaGUgZGF0YSB0byBzaWduXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkaWdpdGFsIHNpZ25hdHVyZVxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVTaWduYXR1cmUgPSAoZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBzdHJpbmcgPT4ge1xuICAvLyBDcmVhdGUgYSBkZXRlcm1pbmlzdGljIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGF0YVxuICBjb25zdCBzb3J0ZWREYXRhID0gc29ydE9iamVjdEtleXMoZGF0YSk7XG4gIGNvbnN0IGRhdGFTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShzb3J0ZWREYXRhKTtcblxuICAvLyBHZW5lcmF0ZSBITUFDIHNpZ25hdHVyZSB1c2luZyBTSEEtMjU2XG4gIHJldHVybiBjcmVhdGVIbWFjKFwic2hhMjU2XCIsIFNFQ1JFVF9LRVkpXG4gICAgLnVwZGF0ZShkYXRhU3RyaW5nKVxuICAgIC5kaWdlc3QoXCJoZXhcIik7XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhIGRpZ2l0YWwgc2lnbmF0dXJlIGZvciBhIGNlcnRpZmljYXRlXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBkYXRhIFRoZSBkYXRhIHRoYXQgd2FzIHNpZ25lZFxuICogQHBhcmFtIHtzdHJpbmd9IHNpZ25hdHVyZSBUaGUgc2lnbmF0dXJlIHRvIHZlcmlmeVxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHZhbGlkXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJpZnlTaWduYXR1cmUgPSAoXG4gIGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICBzaWduYXR1cmU6IHN0cmluZ1xuKTogYm9vbGVhbiA9PiB7XG4gIC8vIEdlbmVyYXRlIGEgbmV3IHNpZ25hdHVyZSBmcm9tIHRoZSBkYXRhXG4gIGNvbnN0IGV4cGVjdGVkU2lnbmF0dXJlID0gZ2VuZXJhdGVTaWduYXR1cmUoZGF0YSk7XG5cbiAgLy8gQ29tcGFyZSB0aGUgc2lnbmF0dXJlc1xuICByZXR1cm4gZXhwZWN0ZWRTaWduYXR1cmUgPT09IHNpZ25hdHVyZTtcbn07XG5cbi8qKlxuICogU29ydCBvYmplY3Qga2V5cyByZWN1cnNpdmVseSB0byBlbnN1cmUgZGV0ZXJtaW5pc3RpYyBKU09OIHN0cmluZ2lmaWNhdGlvblxuICogQHBhcmFtIHt1bmtub3dufSBvYmogVGhlIG9iamVjdCB0byBzb3J0XG4gKiBAcmV0dXJuIHt1bmtub3dufSBBIG5ldyBvYmplY3Qgd2l0aCBzb3J0ZWQga2V5c1xuICovXG5jb25zdCBzb3J0T2JqZWN0S2V5cyA9IChvYmo6IHVua25vd24pOiB1bmtub3duID0+IHtcbiAgLy8gSWYgbm90IGFuIG9iamVjdCBvciBudWxsLCByZXR1cm4gYXMgaXNcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmo7XG59XG5cbiAgLy8gR2V0IGFsbCBrZXlzIGFuZCBzb3J0IHRoZW1cbiAgY29uc3Qgc29ydGVkS2V5cyA9IE9iamVjdC5rZXlzKG9iaiBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikuc29ydCgpO1xuXG4gIC8vIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCBzb3J0ZWQga2V5c1xuICBjb25zdCBzb3J0ZWRPYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIHNvcnRlZEtleXMpIHtcbiAgICBzb3J0ZWRPYmpba2V5XSA9IHNvcnRPYmplY3RLZXlzKChvYmogYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tleV0pO1xufVxuXG4gIHJldHVybiBzb3J0ZWRPYmo7XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUhtYWMiLCJTRUNSRVRfS0VZIiwicHJvY2VzcyIsImVudiIsIkNFUlRJRklDQVRFX1NJR05BVFVSRV9TRUNSRVQiLCJnZW5lcmF0ZVNpZ25hdHVyZSIsImRhdGEiLCJzb3J0ZWREYXRhIiwic29ydE9iamVjdEtleXMiLCJkYXRhU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZSIsImRpZ2VzdCIsInZlcmlmeVNpZ25hdHVyZSIsInNpZ25hdHVyZSIsImV4cGVjdGVkU2lnbmF0dXJlIiwib2JqIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydGVkS2V5cyIsIk9iamVjdCIsImtleXMiLCJzb3J0Iiwic29ydGVkT2JqIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/digitalSignature.ts\n");

/***/ }),

/***/ "./src/utils/pdfGenerator.ts":
/*!***********************************!*\
  !*** ./src/utils/pdfGenerator.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePDF: () => (/* binding */ generatePDF),\n/* harmony export */   generatePDFPreview: () => (/* binding */ generatePDFPreview)\n/* harmony export */ });\n// Import puppeteer types and use dynamic import only on server-side\n// Using dynamic import with type assertion for server-side only\nconst puppeteer =  true ? Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! puppeteer */ \"puppeteer\")) : 0;\n// Import Node.js Buffer constructor\nlet BufferClass = null;\nif (true) {\n    // Only import on server side\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const bufferModule = __webpack_require__(/*! buffer */ \"buffer\");\n    BufferClass = bufferModule.Buffer;\n}\n/**\n * Generate a PDF from HTML content (Server-side implementation)\n * @param html HTML content to convert to PDF\n * @param options PDF generation options\n * @returns PDF buffer\n */ const generatePDFServer = async (html, options = {})=>{\n    if (!puppeteer || !BufferClass) {\n        throw new Error(\"Puppeteer or Buffer is not available in this environment\");\n    }\n    try {\n        const puppeteerModule = await puppeteer;\n        const browser = await puppeteerModule.launch({\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-setuid-sandbox\"\n            ]\n        });\n        const page = await browser.newPage();\n        // Set content\n        await page.setContent(html, {\n            waitUntil: \"networkidle0\"\n        });\n        // Generate PDF\n        const pdfBuffer = await page.pdf({\n            format: options.format || \"A4\",\n            landscape: options.landscape || false,\n            margin: options.margin || {\n                top: \"1cm\",\n                bottom: \"1cm\",\n                left: \"1cm\",\n                right: \"1cm\"\n            },\n            printBackground: options.printBackground !== false,\n            scale: options.scale || 1,\n            headerTemplate: options.headerTemplate || \"\",\n            footerTemplate: options.footerTemplate || \"\",\n            displayHeaderFooter: options.displayHeaderFooter || false,\n            pageRanges: options.pageRanges || \"\"\n        });\n        // Convert Uint8Array to Buffer\n        const buffer = BufferClass.from(pdfBuffer);\n        await browser.close();\n        return buffer;\n    } catch (error) {\n        console.error(\"Error generating PDF:\", error);\n        throw error;\n    }\n};\n/**\n * Generate a PDF from HTML content (Client-side implementation)\n * @param html HTML content to convert to PDF\n * @param options PDF generation options\n * @returns PDF buffer as Uint8Array\n */ const generatePDFClient = async (html, options = {})=>{\n    const response = await fetch(\"/api/generate-pdf\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            html,\n            options\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to generate PDF\");\n    }\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data);\n};\n/**\n * Generate a PDF from HTML content\n * @param html HTML content to convert to PDF\n * @param options PDF generation options\n * @returns PDF buffer (Buffer on server, Uint8Array on client)\n */ const generatePDF = async (html, options = {})=>{\n    if (false) {} else {\n        // TypeScript needs help understanding that this branch returns Buffer\n        return generatePDFServer(html, options);\n    }\n};\n/**\n * Generate a PDF preview image from HTML content (Server-side implementation)\n * @param html HTML content to convert to image\n * @returns Image buffer (PNG) as Buffer\n */ const generatePDFPreviewServer = async (html)=>{\n    if (!puppeteer || !BufferClass) {\n        throw new Error(\"Puppeteer or Buffer is not available in this environment\");\n    }\n    try {\n        const puppeteerModule = await puppeteer;\n        const browser = await puppeteerModule.launch({\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-setuid-sandbox\"\n            ]\n        });\n        const page = await browser.newPage();\n        // Set viewport size (A4 dimensions at 96 DPI)\n        await page.setViewport({\n            width: 794,\n            height: 1123,\n            deviceScaleFactor: 2\n        });\n        // Set content\n        await page.setContent(html, {\n            waitUntil: \"networkidle0\"\n        });\n        // Generate screenshot\n        const screenshotBuffer = await page.screenshot({\n            type: \"png\",\n            fullPage: true\n        });\n        // Convert Uint8Array to Buffer\n        const imageBuffer = BufferClass.from(screenshotBuffer);\n        await browser.close();\n        return imageBuffer;\n    } catch (error) {\n        console.error(\"Error generating PDF preview:\", error);\n        throw error;\n    }\n};\n/**\n * Generate a PDF preview image from HTML content (Client-side implementation)\n * @param html HTML content to convert to image\n * @returns Image buffer (PNG) as Uint8Array\n */ const generatePDFPreviewClient = async (html)=>{\n    const response = await fetch(\"/api/generate-pdf-preview\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            html\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to generate PDF preview\");\n    }\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data);\n};\n/**\n * Generate a PDF preview image from HTML content\n * @param html HTML content to convert to image\n * @returns Image buffer (PNG) (Buffer on server, Uint8Array on client)\n */ const generatePDFPreview = async (html)=>{\n    if (false) {} else {\n        // TypeScript needs help understanding that this branch returns Buffer\n        return generatePDFPreviewServer(html);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/pdfGenerator.ts\n");

/***/ }),

/***/ "./src/utils/queryClient.ts":
/*!**********************************!*\
  !*** ./src/utils/queryClient.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STALE_TIMES: () => (/* binding */ STALE_TIMES),\n/* harmony export */   createQueryClient: () => (/* binding */ createQueryClient),\n/* harmony export */   getQueryClient: () => (/* binding */ getQueryClient),\n/* harmony export */   queryClient: () => (/* binding */ queryClient)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"@tanstack/react-query\");\n/* harmony import */ var _tanstack_query_sync_storage_persister__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-sync-storage-persister */ \"@tanstack/query-sync-storage-persister\");\n/* harmony import */ var _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query-persist-client */ \"@tanstack/react-query-persist-client\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__, _tanstack_query_sync_storage_persister__WEBPACK_IMPORTED_MODULE_1__, _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__]);\n([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__, _tanstack_query_sync_storage_persister__WEBPACK_IMPORTED_MODULE_1__, _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// Define data type categories with appropriate stale times\nconst STALE_TIMES = {\n    // Static data that rarely changes\n    STATIC: 24 * 60 * 60 * 1000,\n    // Semi-static data that changes occasionally\n    SEMI_STATIC: 6 * 60 * 60 * 1000,\n    // Dynamic data that changes frequently\n    DYNAMIC: 5 * 60 * 1000,\n    // Real-time data that needs to be fresh\n    REAL_TIME: 30 * 1000\n};\nconst getQueryClient = ()=>new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.QueryClient({\n        defaultOptions: {\n            queries: {\n                staleTime: 1000 * 60 * 5,\n                refetchOnWindowFocus: false,\n                retry: 1\n            }\n        }\n    });\n// Export a singleton instance\nconst queryClient = getQueryClient();\n// Create a client with optimized default options\nconst createQueryClient = ()=>{\n    const queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.QueryClient({\n        defaultOptions: {\n            queries: {\n                staleTime: STALE_TIMES.SEMI_STATIC,\n                // Set reasonable defaults for caching behavior\n                gcTime: 7 * 24 * 60 * 60 * 1000,\n                retry: 2,\n                retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)\n            }\n        }\n    });\n    // Only run in browser environment\n    if (false) {}\n    return queryClient;\n};\n// Export stale times for use in specific queries\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcXVlcnlDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFtRDtBQUNpQztBQUVYO0FBRXpFLDJEQUEyRDtBQUMzRCxNQUFNRyxjQUFjO0lBQ2xCLGtDQUFrQztJQUNsQ0MsUUFBUSxLQUFLLEtBQUssS0FBSztJQUN2Qiw2Q0FBNkM7SUFDN0NDLGFBQWEsSUFBSSxLQUFLLEtBQUs7SUFDM0IsdUNBQXVDO0lBQ3ZDQyxTQUFTLElBQUksS0FBSztJQUNsQix3Q0FBd0M7SUFDeENDLFdBQVcsS0FBSztBQUNsQjtBQUVPLE1BQU1DLGlCQUFpQixJQUFNLElBQUlSLDhEQUFXQSxDQUFDO1FBQ2xEUyxnQkFBZ0I7WUFDZEMsU0FBUztnQkFDUEMsV0FBVyxPQUFPLEtBQUs7Z0JBQ3ZCQyxzQkFBc0I7Z0JBQ3RCQyxPQUFPO1lBQ1Q7UUFDRjtJQUNGLEdBQUc7QUFFSCw4QkFBOEI7QUFDdkIsTUFBTUMsY0FBY04saUJBQWlCO0FBRTVDLGlEQUFpRDtBQUMxQyxNQUFNTyxvQkFBb0I7SUFDL0IsTUFBTUQsY0FBYyxJQUFJZCw4REFBV0EsQ0FBQztRQUNsQ1MsZ0JBQWdCO1lBQ2RDLFNBQVM7Z0JBQ1BDLFdBQVdSLFlBQVlFLFdBQVc7Z0JBQ2xDLCtDQUErQztnQkFDL0NXLFFBQVEsSUFBSSxLQUFLLEtBQUssS0FBSztnQkFDM0JILE9BQU87Z0JBQ1BJLFlBQVlDLENBQUFBLGVBQWdCQyxLQUFLQyxHQUFHLENBQUMsT0FBTyxLQUFLRixjQUFjO1lBQ25FO1FBQ0Y7SUFDRjtJQUVFLGtDQUFrQztJQUNsQyxJQUFJLEtBQWtCLEVBQWEsRUFzQnBDO0lBRUMsT0FBT0o7QUFDVCxFQUFFO0FBRUYsaURBQWlEO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhaW5pbmctcGxhdGZvcm0vLi9zcmMvdXRpbHMvcXVlcnlDbGllbnQudHM/MDgzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1F1ZXJ5Q2xpZW50IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IGNyZWF0ZVN5bmNTdG9yYWdlUGVyc2lzdGVyIH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LXN5bmMtc3RvcmFnZS1wZXJzaXN0ZXInO1xuaW1wb3J0IHsgUGVyc2lzdGVkQ2xpZW50IH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LXBlcnNpc3QtY2xpZW50LWNvcmUnO1xuaW1wb3J0IHtwZXJzaXN0UXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnktcGVyc2lzdC1jbGllbnQnO1xuXG4vLyBEZWZpbmUgZGF0YSB0eXBlIGNhdGVnb3JpZXMgd2l0aCBhcHByb3ByaWF0ZSBzdGFsZSB0aW1lc1xuY29uc3QgU1RBTEVfVElNRVMgPSB7XG4gIC8vIFN0YXRpYyBkYXRhIHRoYXQgcmFyZWx5IGNoYW5nZXNcbiAgU1RBVElDOiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyAyNCBob3Vyc1xuICAvLyBTZW1pLXN0YXRpYyBkYXRhIHRoYXQgY2hhbmdlcyBvY2Nhc2lvbmFsbHlcbiAgU0VNSV9TVEFUSUM6IDYgKiA2MCAqIDYwICogMTAwMCwgLy8gNiBob3Vyc1xuICAvLyBEeW5hbWljIGRhdGEgdGhhdCBjaGFuZ2VzIGZyZXF1ZW50bHlcbiAgRFlOQU1JQzogNSAqIDYwICogMTAwMCwgLy8gNSBtaW51dGVzXG4gIC8vIFJlYWwtdGltZSBkYXRhIHRoYXQgbmVlZHMgdG8gYmUgZnJlc2hcbiAgUkVBTF9USU1FOiAzMCAqIDEwMDAsIC8vIDMwIHNlY29uZHNcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRRdWVyeUNsaWVudCA9ICgpID0+IG5ldyBRdWVyeUNsaWVudCh7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgcXVlcmllczoge1xuICAgICAgc3RhbGVUaW1lOiAxMDAwICogNjAgKiA1LCAvLyA1IG1pbnV0ZXNcbiAgICAgIHJlZmV0Y2hPbldpbmRvd0ZvY3VzOiBmYWxzZSxcbiAgICAgIHJldHJ5OiAxLFxuICAgIH0sXG4gIH0sXG59KTtcblxuLy8gRXhwb3J0IGEgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3QgcXVlcnlDbGllbnQgPSBnZXRRdWVyeUNsaWVudCgpO1xuXG4vLyBDcmVhdGUgYSBjbGllbnQgd2l0aCBvcHRpbWl6ZWQgZGVmYXVsdCBvcHRpb25zXG5leHBvcnQgY29uc3QgY3JlYXRlUXVlcnlDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcbiAgICBkZWZhdWx0T3B0aW9uczoge1xuICAgICAgcXVlcmllczoge1xuICAgICAgICBzdGFsZVRpbWU6IFNUQUxFX1RJTUVTLlNFTUlfU1RBVElDLCAvLyBEZWZhdWx0IHRvIDYgaG91cnMgZm9yIG1vc3QgZGF0YVxuICAgICAgICAvLyBTZXQgcmVhc29uYWJsZSBkZWZhdWx0cyBmb3IgY2FjaGluZyBiZWhhdmlvclxuICAgICAgICBnY1RpbWU6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyA3IGRheXMgLSBob3cgbG9uZyB0byBrZWVwIHVudXNlZCBkYXRhIGluIGNhY2hlXG4gICAgICAgIHJldHJ5OiAyLCAvLyBSZXRyeSBmYWlsZWQgcXVlcmllcyB0d2ljZVxuICAgICAgICByZXRyeURlbGF5OiBhdHRlbXB0SW5kZXggPT4gTWF0aC5taW4oMTAwMCAqIDIgKiogYXR0ZW1wdEluZGV4LCAzMDAwMCksIC8vIEV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICB9LFxuICB9LFxufSk7XG5cbiAgLy8gT25seSBydW4gaW4gYnJvd3NlciBlbnZpcm9ubWVudFxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIGEgcGVyc2lzdGVyIGZvciB0aGUgcXVlcnkgY2FjaGUgdXNpbmcgbG9jYWxTdG9yYWdlXG4gICAgICBjb25zdCBsb2NhbFN0b3JhZ2VQZXJzaXN0ZXIgPSBjcmVhdGVTeW5jU3RvcmFnZVBlcnNpc3Rlcih7XG4gICAgICAgIHN0b3JhZ2U6IHdpbmRvdy5sb2NhbFN0b3JhZ2UsXG4gICAgICAgIGtleTogJ1RSQUlOSU5HX1BMQVRGT1JNX1FVRVJZX0NBQ0hFJywgLy8gQ3VzdG9tIGtleSBmb3IgbG9jYWxTdG9yYWdlXG4gICAgICAgIHRocm90dGxlVGltZTogMTAwMCwgLy8gVGhyb3R0bGUgd3JpdGVzIHRvIHN0b3JhZ2UgdG8gcHJldmVudCBleGNlc3NpdmUgd3JpdGVzXG4gICAgICAgIHNlcmlhbGl6ZTogKGNsaWVudDogUGVyc2lzdGVkQ2xpZW50KSA9PiBKU09OLnN0cmluZ2lmeShjbGllbnQpLFxuICAgICAgICBkZXNlcmlhbGl6ZTogKGRhdGE6IHN0cmluZyk6IFBlcnNpc3RlZENsaWVudCA9PiBKU09OLnBhcnNlKGRhdGEpIGFzIFBlcnNpc3RlZENsaWVudCxcbiAgICB9KTtcblxuICAgICAgLy8gUGVyc2lzdCB0aGUgUmVhY3QgUXVlcnkgY2FjaGUgdG8gbG9jYWxTdG9yYWdlXG4gICAgICB2b2lkIHBlcnNpc3RRdWVyeUNsaWVudCh7XG4gICAgICAgIHF1ZXJ5Q2xpZW50LFxuICAgICAgICBwZXJzaXN0ZXI6IGxvY2FsU3RvcmFnZVBlcnNpc3RlcixcbiAgICAgICAgbWF4QWdlOiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyAyNCBob3VycyAtIGhvdyBsb25nIHRvIHBlcnNpc3QgY2FjaGVcbiAgICAgICAgYnVzdGVyOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVkVSU0lPTiB8fCAnMS4wLjAnLCAvLyBDYWNoZSBidXN0ZXIgb24gYXBwIHVwZGF0ZXNcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIExvZyBhbnkgZXJyb3JzIGJ1dCBkb24ndCBicmVhayB0aGUgYXBwbGljYXRpb25cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNldHRpbmcgdXAgUmVhY3QgUXVlcnkgcGVyc2lzdGVuY2U6JywgZXJyb3IpO1xuICB9XG59XG5cbiAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xufTtcblxuLy8gRXhwb3J0IHN0YWxlIHRpbWVzIGZvciB1c2UgaW4gc3BlY2lmaWMgcXVlcmllc1xuZXhwb3J0IHtTVEFMRV9USU1FUyB9O1xuIl0sIm5hbWVzIjpbIlF1ZXJ5Q2xpZW50IiwiY3JlYXRlU3luY1N0b3JhZ2VQZXJzaXN0ZXIiLCJwZXJzaXN0UXVlcnlDbGllbnQiLCJTVEFMRV9USU1FUyIsIlNUQVRJQyIsIlNFTUlfU1RBVElDIiwiRFlOQU1JQyIsIlJFQUxfVElNRSIsImdldFF1ZXJ5Q2xpZW50IiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwic3RhbGVUaW1lIiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJyZXRyeSIsInF1ZXJ5Q2xpZW50IiwiY3JlYXRlUXVlcnlDbGllbnQiLCJnY1RpbWUiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdEluZGV4IiwiTWF0aCIsIm1pbiIsImxvY2FsU3RvcmFnZVBlcnNpc3RlciIsInN0b3JhZ2UiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJrZXkiLCJ0aHJvdHRsZVRpbWUiLCJzZXJpYWxpemUiLCJjbGllbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzZXJpYWxpemUiLCJkYXRhIiwicGFyc2UiLCJwZXJzaXN0ZXIiLCJtYXhBZ2UiLCJidXN0ZXIiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBQX1ZFUlNJT04iLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/queryClient.ts\n");

/***/ }),

/***/ "./src/styles/globals.css":
/*!********************************!*\
  !*** ./src/styles/globals.css ***!
  \********************************/
/***/ (() => {



/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "qrcode":
/*!*************************!*\
  !*** external "qrcode" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("qrcode");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "@emotion/cache":
/*!*********************************!*\
  !*** external "@emotion/cache" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("@emotion/cache");;

/***/ }),

/***/ "@emotion/react":
/*!*********************************!*\
  !*** external "@emotion/react" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("@emotion/react");;

/***/ }),

/***/ "@emotion/server/create-instance":
/*!**************************************************!*\
  !*** external "@emotion/server/create-instance" ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@emotion/server/create-instance");;

/***/ }),

/***/ "@mui/material/CssBaseline":
/*!********************************************!*\
  !*** external "@mui/material/CssBaseline" ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@mui/material/CssBaseline");;

/***/ }),

/***/ "@mui/material/styles":
/*!***************************************!*\
  !*** external "@mui/material/styles" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@mui/material/styles");;

/***/ }),

/***/ "@tanstack/query-sync-storage-persister":
/*!*********************************************************!*\
  !*** external "@tanstack/query-sync-storage-persister" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/query-sync-storage-persister");;

/***/ }),

/***/ "@tanstack/react-query":
/*!****************************************!*\
  !*** external "@tanstack/react-query" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/react-query");;

/***/ }),

/***/ "@tanstack/react-query-devtools":
/*!*************************************************!*\
  !*** external "@tanstack/react-query-devtools" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/react-query-devtools");;

/***/ }),

/***/ "@tanstack/react-query-persist-client":
/*!*******************************************************!*\
  !*** external "@tanstack/react-query-persist-client" ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/react-query-persist-client");;

/***/ }),

/***/ "firebase/app":
/*!*******************************!*\
  !*** external "firebase/app" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/app");;

/***/ }),

/***/ "firebase/auth":
/*!********************************!*\
  !*** external "firebase/auth" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/auth");;

/***/ }),

/***/ "firebase/firestore":
/*!*************************************!*\
  !*** external "firebase/firestore" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/firestore");;

/***/ }),

/***/ "firebase/storage":
/*!***********************************!*\
  !*** external "firebase/storage" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = import("firebase/storage");;

/***/ }),

/***/ "puppeteer":
/*!****************************!*\
  !*** external "puppeteer" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = import("puppeteer");;

/***/ }),

/***/ "react-hot-toast":
/*!**********************************!*\
  !*** external "react-hot-toast" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-hot-toast");;

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = import("uuid");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();